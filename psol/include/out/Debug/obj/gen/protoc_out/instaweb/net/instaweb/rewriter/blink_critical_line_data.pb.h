// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/rewriter/blink_critical_line_data.proto

#ifndef PROTOBUF_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto();

class BlinkCriticalLineData;
class DiffInfo;

// ===================================================================

class BlinkCriticalLineData : public ::google::protobuf::MessageLite {
 public:
  BlinkCriticalLineData();
  virtual ~BlinkCriticalLineData();
  
  BlinkCriticalLineData(const BlinkCriticalLineData& from);
  
  inline BlinkCriticalLineData& operator=(const BlinkCriticalLineData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BlinkCriticalLineData& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BlinkCriticalLineData* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(BlinkCriticalLineData* other);
  
  // implements Message ----------------------------------------------
  
  BlinkCriticalLineData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BlinkCriticalLineData& from);
  void MergeFrom(const BlinkCriticalLineData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // optional bytes critical_html = 2;
  inline bool has_critical_html() const;
  inline void clear_critical_html();
  static const int kCriticalHtmlFieldNumber = 2;
  inline const ::std::string& critical_html() const;
  inline void set_critical_html(const ::std::string& value);
  inline void set_critical_html(const char* value);
  inline void set_critical_html(const void* value, size_t size);
  inline ::std::string* mutable_critical_html();
  inline ::std::string* release_critical_html();
  
  // optional bytes critical_images_map = 3;
  inline bool has_critical_images_map() const;
  inline void clear_critical_images_map();
  static const int kCriticalImagesMapFieldNumber = 3;
  inline const ::std::string& critical_images_map() const;
  inline void set_critical_images_map(const ::std::string& value);
  inline void set_critical_images_map(const char* value);
  inline void set_critical_images_map(const void* value, size_t size);
  inline ::std::string* mutable_critical_images_map();
  inline ::std::string* release_critical_images_map();
  
  // optional bytes non_critical_json = 4;
  inline bool has_non_critical_json() const;
  inline void clear_non_critical_json();
  static const int kNonCriticalJsonFieldNumber = 4;
  inline const ::std::string& non_critical_json() const;
  inline void set_non_critical_json(const ::std::string& value);
  inline void set_non_critical_json(const char* value);
  inline void set_non_critical_json(const void* value, size_t size);
  inline ::std::string* mutable_non_critical_json();
  inline ::std::string* release_non_critical_json();
  
  // optional string last_modified_date = 5;
  inline bool has_last_modified_date() const;
  inline void clear_last_modified_date();
  static const int kLastModifiedDateFieldNumber = 5;
  inline const ::std::string& last_modified_date() const;
  inline void set_last_modified_date(const ::std::string& value);
  inline void set_last_modified_date(const char* value);
  inline void set_last_modified_date(const char* value, size_t size);
  inline ::std::string* mutable_last_modified_date();
  inline ::std::string* release_last_modified_date();
  
  // optional string hash = 6;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 6;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const char* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  
  // optional int64 last_diff_timestamp_ms = 7 [deprecated = true];
  inline bool has_last_diff_timestamp_ms() const PROTOBUF_DEPRECATED;
  inline void clear_last_diff_timestamp_ms() PROTOBUF_DEPRECATED;
  static const int kLastDiffTimestampMsFieldNumber = 7;
  inline ::google::protobuf::int64 last_diff_timestamp_ms() const PROTOBUF_DEPRECATED;
  inline void set_last_diff_timestamp_ms(::google::protobuf::int64 value) PROTOBUF_DEPRECATED;
  
  // optional int64 last_critical_line_computation_timestamp_ms = 8;
  inline bool has_last_critical_line_computation_timestamp_ms() const;
  inline void clear_last_critical_line_computation_timestamp_ms();
  static const int kLastCriticalLineComputationTimestampMsFieldNumber = 8;
  inline ::google::protobuf::int64 last_critical_line_computation_timestamp_ms() const;
  inline void set_last_critical_line_computation_timestamp_ms(::google::protobuf::int64 value);
  
  // optional string hash_smart_diff = 9;
  inline bool has_hash_smart_diff() const;
  inline void clear_hash_smart_diff();
  static const int kHashSmartDiffFieldNumber = 9;
  inline const ::std::string& hash_smart_diff() const;
  inline void set_hash_smart_diff(const ::std::string& value);
  inline void set_hash_smart_diff(const char* value);
  inline void set_hash_smart_diff(const char* value, size_t size);
  inline ::std::string* mutable_hash_smart_diff();
  inline ::std::string* release_hash_smart_diff();
  
  // optional string charset = 10;
  inline bool has_charset() const;
  inline void clear_charset();
  static const int kCharsetFieldNumber = 10;
  inline const ::std::string& charset() const;
  inline void set_charset(const ::std::string& value);
  inline void set_charset(const char* value);
  inline void set_charset(const char* value, size_t size);
  inline ::std::string* mutable_charset();
  inline ::std::string* release_charset();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.BlinkCriticalLineData)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_critical_html();
  inline void clear_has_critical_html();
  inline void set_has_critical_images_map();
  inline void clear_has_critical_images_map();
  inline void set_has_non_critical_json();
  inline void clear_has_non_critical_json();
  inline void set_has_last_modified_date();
  inline void clear_has_last_modified_date();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_last_diff_timestamp_ms();
  inline void clear_has_last_diff_timestamp_ms();
  inline void set_has_last_critical_line_computation_timestamp_ms();
  inline void clear_has_last_critical_line_computation_timestamp_ms();
  inline void set_has_hash_smart_diff();
  inline void clear_has_hash_smart_diff();
  inline void set_has_charset();
  inline void clear_has_charset();
  
  ::std::string* url_;
  ::std::string* critical_html_;
  ::std::string* critical_images_map_;
  ::std::string* non_critical_json_;
  ::std::string* last_modified_date_;
  ::std::string* hash_;
  ::google::protobuf::int64 last_diff_timestamp_ms_;
  ::google::protobuf::int64 last_critical_line_computation_timestamp_ms_;
  ::std::string* hash_smart_diff_;
  ::std::string* charset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto();
  
  void InitAsDefaultInstance();
  static BlinkCriticalLineData* default_instance_;
};
// -------------------------------------------------------------------

class DiffInfo : public ::google::protobuf::MessageLite {
 public:
  DiffInfo();
  virtual ~DiffInfo();
  
  DiffInfo(const DiffInfo& from);
  
  inline DiffInfo& operator=(const DiffInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DiffInfo& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DiffInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(DiffInfo* other);
  
  // implements Message ----------------------------------------------
  
  DiffInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DiffInfo& from);
  void MergeFrom(const DiffInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string diff_match_history = 1;
  inline bool has_diff_match_history() const;
  inline void clear_diff_match_history();
  static const int kDiffMatchHistoryFieldNumber = 1;
  inline const ::std::string& diff_match_history() const;
  inline void set_diff_match_history(const ::std::string& value);
  inline void set_diff_match_history(const char* value);
  inline void set_diff_match_history(const char* value, size_t size);
  inline ::std::string* mutable_diff_match_history();
  inline ::std::string* release_diff_match_history();
  
  // optional int64 blacklist_timestamp_ms = 2;
  inline bool has_blacklist_timestamp_ms() const;
  inline void clear_blacklist_timestamp_ms();
  static const int kBlacklistTimestampMsFieldNumber = 2;
  inline ::google::protobuf::int64 blacklist_timestamp_ms() const;
  inline void set_blacklist_timestamp_ms(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.DiffInfo)
 private:
  inline void set_has_diff_match_history();
  inline void clear_has_diff_match_history();
  inline void set_has_blacklist_timestamp_ms();
  inline void clear_has_blacklist_timestamp_ms();
  
  ::std::string* diff_match_history_;
  ::google::protobuf::int64 blacklist_timestamp_ms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto();
  
  void InitAsDefaultInstance();
  static DiffInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// BlinkCriticalLineData

// required string url = 1;
inline bool BlinkCriticalLineData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlinkCriticalLineData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlinkCriticalLineData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlinkCriticalLineData::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BlinkCriticalLineData::url() const {
  return *url_;
}
inline void BlinkCriticalLineData::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BlinkCriticalLineData::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BlinkCriticalLineData::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkCriticalLineData::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BlinkCriticalLineData::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes critical_html = 2;
inline bool BlinkCriticalLineData::has_critical_html() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlinkCriticalLineData::set_has_critical_html() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlinkCriticalLineData::clear_has_critical_html() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlinkCriticalLineData::clear_critical_html() {
  if (critical_html_ != &::google::protobuf::internal::kEmptyString) {
    critical_html_->clear();
  }
  clear_has_critical_html();
}
inline const ::std::string& BlinkCriticalLineData::critical_html() const {
  return *critical_html_;
}
inline void BlinkCriticalLineData::set_critical_html(const ::std::string& value) {
  set_has_critical_html();
  if (critical_html_ == &::google::protobuf::internal::kEmptyString) {
    critical_html_ = new ::std::string;
  }
  critical_html_->assign(value);
}
inline void BlinkCriticalLineData::set_critical_html(const char* value) {
  set_has_critical_html();
  if (critical_html_ == &::google::protobuf::internal::kEmptyString) {
    critical_html_ = new ::std::string;
  }
  critical_html_->assign(value);
}
inline void BlinkCriticalLineData::set_critical_html(const void* value, size_t size) {
  set_has_critical_html();
  if (critical_html_ == &::google::protobuf::internal::kEmptyString) {
    critical_html_ = new ::std::string;
  }
  critical_html_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkCriticalLineData::mutable_critical_html() {
  set_has_critical_html();
  if (critical_html_ == &::google::protobuf::internal::kEmptyString) {
    critical_html_ = new ::std::string;
  }
  return critical_html_;
}
inline ::std::string* BlinkCriticalLineData::release_critical_html() {
  clear_has_critical_html();
  if (critical_html_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = critical_html_;
    critical_html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes critical_images_map = 3;
inline bool BlinkCriticalLineData::has_critical_images_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlinkCriticalLineData::set_has_critical_images_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlinkCriticalLineData::clear_has_critical_images_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlinkCriticalLineData::clear_critical_images_map() {
  if (critical_images_map_ != &::google::protobuf::internal::kEmptyString) {
    critical_images_map_->clear();
  }
  clear_has_critical_images_map();
}
inline const ::std::string& BlinkCriticalLineData::critical_images_map() const {
  return *critical_images_map_;
}
inline void BlinkCriticalLineData::set_critical_images_map(const ::std::string& value) {
  set_has_critical_images_map();
  if (critical_images_map_ == &::google::protobuf::internal::kEmptyString) {
    critical_images_map_ = new ::std::string;
  }
  critical_images_map_->assign(value);
}
inline void BlinkCriticalLineData::set_critical_images_map(const char* value) {
  set_has_critical_images_map();
  if (critical_images_map_ == &::google::protobuf::internal::kEmptyString) {
    critical_images_map_ = new ::std::string;
  }
  critical_images_map_->assign(value);
}
inline void BlinkCriticalLineData::set_critical_images_map(const void* value, size_t size) {
  set_has_critical_images_map();
  if (critical_images_map_ == &::google::protobuf::internal::kEmptyString) {
    critical_images_map_ = new ::std::string;
  }
  critical_images_map_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkCriticalLineData::mutable_critical_images_map() {
  set_has_critical_images_map();
  if (critical_images_map_ == &::google::protobuf::internal::kEmptyString) {
    critical_images_map_ = new ::std::string;
  }
  return critical_images_map_;
}
inline ::std::string* BlinkCriticalLineData::release_critical_images_map() {
  clear_has_critical_images_map();
  if (critical_images_map_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = critical_images_map_;
    critical_images_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes non_critical_json = 4;
inline bool BlinkCriticalLineData::has_non_critical_json() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlinkCriticalLineData::set_has_non_critical_json() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlinkCriticalLineData::clear_has_non_critical_json() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlinkCriticalLineData::clear_non_critical_json() {
  if (non_critical_json_ != &::google::protobuf::internal::kEmptyString) {
    non_critical_json_->clear();
  }
  clear_has_non_critical_json();
}
inline const ::std::string& BlinkCriticalLineData::non_critical_json() const {
  return *non_critical_json_;
}
inline void BlinkCriticalLineData::set_non_critical_json(const ::std::string& value) {
  set_has_non_critical_json();
  if (non_critical_json_ == &::google::protobuf::internal::kEmptyString) {
    non_critical_json_ = new ::std::string;
  }
  non_critical_json_->assign(value);
}
inline void BlinkCriticalLineData::set_non_critical_json(const char* value) {
  set_has_non_critical_json();
  if (non_critical_json_ == &::google::protobuf::internal::kEmptyString) {
    non_critical_json_ = new ::std::string;
  }
  non_critical_json_->assign(value);
}
inline void BlinkCriticalLineData::set_non_critical_json(const void* value, size_t size) {
  set_has_non_critical_json();
  if (non_critical_json_ == &::google::protobuf::internal::kEmptyString) {
    non_critical_json_ = new ::std::string;
  }
  non_critical_json_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkCriticalLineData::mutable_non_critical_json() {
  set_has_non_critical_json();
  if (non_critical_json_ == &::google::protobuf::internal::kEmptyString) {
    non_critical_json_ = new ::std::string;
  }
  return non_critical_json_;
}
inline ::std::string* BlinkCriticalLineData::release_non_critical_json() {
  clear_has_non_critical_json();
  if (non_critical_json_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = non_critical_json_;
    non_critical_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string last_modified_date = 5;
inline bool BlinkCriticalLineData::has_last_modified_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlinkCriticalLineData::set_has_last_modified_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlinkCriticalLineData::clear_has_last_modified_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlinkCriticalLineData::clear_last_modified_date() {
  if (last_modified_date_ != &::google::protobuf::internal::kEmptyString) {
    last_modified_date_->clear();
  }
  clear_has_last_modified_date();
}
inline const ::std::string& BlinkCriticalLineData::last_modified_date() const {
  return *last_modified_date_;
}
inline void BlinkCriticalLineData::set_last_modified_date(const ::std::string& value) {
  set_has_last_modified_date();
  if (last_modified_date_ == &::google::protobuf::internal::kEmptyString) {
    last_modified_date_ = new ::std::string;
  }
  last_modified_date_->assign(value);
}
inline void BlinkCriticalLineData::set_last_modified_date(const char* value) {
  set_has_last_modified_date();
  if (last_modified_date_ == &::google::protobuf::internal::kEmptyString) {
    last_modified_date_ = new ::std::string;
  }
  last_modified_date_->assign(value);
}
inline void BlinkCriticalLineData::set_last_modified_date(const char* value, size_t size) {
  set_has_last_modified_date();
  if (last_modified_date_ == &::google::protobuf::internal::kEmptyString) {
    last_modified_date_ = new ::std::string;
  }
  last_modified_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkCriticalLineData::mutable_last_modified_date() {
  set_has_last_modified_date();
  if (last_modified_date_ == &::google::protobuf::internal::kEmptyString) {
    last_modified_date_ = new ::std::string;
  }
  return last_modified_date_;
}
inline ::std::string* BlinkCriticalLineData::release_last_modified_date() {
  clear_has_last_modified_date();
  if (last_modified_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_modified_date_;
    last_modified_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string hash = 6;
inline bool BlinkCriticalLineData::has_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlinkCriticalLineData::set_has_hash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlinkCriticalLineData::clear_has_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlinkCriticalLineData::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& BlinkCriticalLineData::hash() const {
  return *hash_;
}
inline void BlinkCriticalLineData::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void BlinkCriticalLineData::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void BlinkCriticalLineData::set_hash(const char* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkCriticalLineData::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* BlinkCriticalLineData::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 last_diff_timestamp_ms = 7 [deprecated = true];
inline bool BlinkCriticalLineData::has_last_diff_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlinkCriticalLineData::set_has_last_diff_timestamp_ms() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlinkCriticalLineData::clear_has_last_diff_timestamp_ms() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlinkCriticalLineData::clear_last_diff_timestamp_ms() {
  last_diff_timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_last_diff_timestamp_ms();
}
inline ::google::protobuf::int64 BlinkCriticalLineData::last_diff_timestamp_ms() const {
  return last_diff_timestamp_ms_;
}
inline void BlinkCriticalLineData::set_last_diff_timestamp_ms(::google::protobuf::int64 value) {
  set_has_last_diff_timestamp_ms();
  last_diff_timestamp_ms_ = value;
}

// optional int64 last_critical_line_computation_timestamp_ms = 8;
inline bool BlinkCriticalLineData::has_last_critical_line_computation_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlinkCriticalLineData::set_has_last_critical_line_computation_timestamp_ms() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlinkCriticalLineData::clear_has_last_critical_line_computation_timestamp_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlinkCriticalLineData::clear_last_critical_line_computation_timestamp_ms() {
  last_critical_line_computation_timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_last_critical_line_computation_timestamp_ms();
}
inline ::google::protobuf::int64 BlinkCriticalLineData::last_critical_line_computation_timestamp_ms() const {
  return last_critical_line_computation_timestamp_ms_;
}
inline void BlinkCriticalLineData::set_last_critical_line_computation_timestamp_ms(::google::protobuf::int64 value) {
  set_has_last_critical_line_computation_timestamp_ms();
  last_critical_line_computation_timestamp_ms_ = value;
}

// optional string hash_smart_diff = 9;
inline bool BlinkCriticalLineData::has_hash_smart_diff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlinkCriticalLineData::set_has_hash_smart_diff() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlinkCriticalLineData::clear_has_hash_smart_diff() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlinkCriticalLineData::clear_hash_smart_diff() {
  if (hash_smart_diff_ != &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_->clear();
  }
  clear_has_hash_smart_diff();
}
inline const ::std::string& BlinkCriticalLineData::hash_smart_diff() const {
  return *hash_smart_diff_;
}
inline void BlinkCriticalLineData::set_hash_smart_diff(const ::std::string& value) {
  set_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_ = new ::std::string;
  }
  hash_smart_diff_->assign(value);
}
inline void BlinkCriticalLineData::set_hash_smart_diff(const char* value) {
  set_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_ = new ::std::string;
  }
  hash_smart_diff_->assign(value);
}
inline void BlinkCriticalLineData::set_hash_smart_diff(const char* value, size_t size) {
  set_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_ = new ::std::string;
  }
  hash_smart_diff_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkCriticalLineData::mutable_hash_smart_diff() {
  set_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_ = new ::std::string;
  }
  return hash_smart_diff_;
}
inline ::std::string* BlinkCriticalLineData::release_hash_smart_diff() {
  clear_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_smart_diff_;
    hash_smart_diff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string charset = 10;
inline bool BlinkCriticalLineData::has_charset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlinkCriticalLineData::set_has_charset() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlinkCriticalLineData::clear_has_charset() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlinkCriticalLineData::clear_charset() {
  if (charset_ != &::google::protobuf::internal::kEmptyString) {
    charset_->clear();
  }
  clear_has_charset();
}
inline const ::std::string& BlinkCriticalLineData::charset() const {
  return *charset_;
}
inline void BlinkCriticalLineData::set_charset(const ::std::string& value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
}
inline void BlinkCriticalLineData::set_charset(const char* value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
}
inline void BlinkCriticalLineData::set_charset(const char* value, size_t size) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkCriticalLineData::mutable_charset() {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  return charset_;
}
inline ::std::string* BlinkCriticalLineData::release_charset() {
  clear_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charset_;
    charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DiffInfo

// optional string diff_match_history = 1;
inline bool DiffInfo::has_diff_match_history() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiffInfo::set_has_diff_match_history() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiffInfo::clear_has_diff_match_history() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiffInfo::clear_diff_match_history() {
  if (diff_match_history_ != &::google::protobuf::internal::kEmptyString) {
    diff_match_history_->clear();
  }
  clear_has_diff_match_history();
}
inline const ::std::string& DiffInfo::diff_match_history() const {
  return *diff_match_history_;
}
inline void DiffInfo::set_diff_match_history(const ::std::string& value) {
  set_has_diff_match_history();
  if (diff_match_history_ == &::google::protobuf::internal::kEmptyString) {
    diff_match_history_ = new ::std::string;
  }
  diff_match_history_->assign(value);
}
inline void DiffInfo::set_diff_match_history(const char* value) {
  set_has_diff_match_history();
  if (diff_match_history_ == &::google::protobuf::internal::kEmptyString) {
    diff_match_history_ = new ::std::string;
  }
  diff_match_history_->assign(value);
}
inline void DiffInfo::set_diff_match_history(const char* value, size_t size) {
  set_has_diff_match_history();
  if (diff_match_history_ == &::google::protobuf::internal::kEmptyString) {
    diff_match_history_ = new ::std::string;
  }
  diff_match_history_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DiffInfo::mutable_diff_match_history() {
  set_has_diff_match_history();
  if (diff_match_history_ == &::google::protobuf::internal::kEmptyString) {
    diff_match_history_ = new ::std::string;
  }
  return diff_match_history_;
}
inline ::std::string* DiffInfo::release_diff_match_history() {
  clear_has_diff_match_history();
  if (diff_match_history_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = diff_match_history_;
    diff_match_history_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 blacklist_timestamp_ms = 2;
inline bool DiffInfo::has_blacklist_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiffInfo::set_has_blacklist_timestamp_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiffInfo::clear_has_blacklist_timestamp_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiffInfo::clear_blacklist_timestamp_ms() {
  blacklist_timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_blacklist_timestamp_ms();
}
inline ::google::protobuf::int64 DiffInfo::blacklist_timestamp_ms() const {
  return blacklist_timestamp_ms_;
}
inline void DiffInfo::set_blacklist_timestamp_ms(::google::protobuf::int64 value) {
  set_has_blacklist_timestamp_ms();
  blacklist_timestamp_ms_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2frewriter_2fblink_5fcritical_5fline_5fdata_2eproto__INCLUDED
