// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/rewriter/cache_html_info.proto

#ifndef PROTOBUF_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "net/instaweb/http/http.pb.h"
// @@protoc_insertion_point(includes)

namespace net_instaweb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto();

class CacheHtmlInfo;

// ===================================================================

class CacheHtmlInfo : public ::google::protobuf::MessageLite {
 public:
  CacheHtmlInfo();
  virtual ~CacheHtmlInfo();
  
  CacheHtmlInfo(const CacheHtmlInfo& from);
  
  inline CacheHtmlInfo& operator=(const CacheHtmlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CacheHtmlInfo& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CacheHtmlInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(CacheHtmlInfo* other);
  
  // implements Message ----------------------------------------------
  
  CacheHtmlInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CacheHtmlInfo& from);
  void MergeFrom(const CacheHtmlInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes cached_html = 1;
  inline bool has_cached_html() const;
  inline void clear_cached_html();
  static const int kCachedHtmlFieldNumber = 1;
  inline const ::std::string& cached_html() const;
  inline void set_cached_html(const ::std::string& value);
  inline void set_cached_html(const char* value);
  inline void set_cached_html(const void* value, size_t size);
  inline ::std::string* mutable_cached_html();
  inline ::std::string* release_cached_html();
  
  // optional string hash = 2;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 2;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const char* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  
  // optional int64 last_cached_html_computation_timestamp_ms = 3;
  inline bool has_last_cached_html_computation_timestamp_ms() const;
  inline void clear_last_cached_html_computation_timestamp_ms();
  static const int kLastCachedHtmlComputationTimestampMsFieldNumber = 3;
  inline ::google::protobuf::int64 last_cached_html_computation_timestamp_ms() const;
  inline void set_last_cached_html_computation_timestamp_ms(::google::protobuf::int64 value);
  
  // optional string hash_smart_diff = 4;
  inline bool has_hash_smart_diff() const;
  inline void clear_hash_smart_diff();
  static const int kHashSmartDiffFieldNumber = 4;
  inline const ::std::string& hash_smart_diff() const;
  inline void set_hash_smart_diff(const ::std::string& value);
  inline void set_hash_smart_diff(const char* value);
  inline void set_hash_smart_diff(const char* value, size_t size);
  inline ::std::string* mutable_hash_smart_diff();
  inline ::std::string* release_hash_smart_diff();
  
  // optional string charset = 5;
  inline bool has_charset() const;
  inline void clear_charset();
  static const int kCharsetFieldNumber = 5;
  inline const ::std::string& charset() const;
  inline void set_charset(const ::std::string& value);
  inline void set_charset(const char* value);
  inline void set_charset(const char* value, size_t size);
  inline ::std::string* mutable_charset();
  inline ::std::string* release_charset();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.CacheHtmlInfo)
 private:
  inline void set_has_cached_html();
  inline void clear_has_cached_html();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_last_cached_html_computation_timestamp_ms();
  inline void clear_has_last_cached_html_computation_timestamp_ms();
  inline void set_has_hash_smart_diff();
  inline void clear_has_hash_smart_diff();
  inline void set_has_charset();
  inline void clear_has_charset();
  
  ::std::string* cached_html_;
  ::std::string* hash_;
  ::google::protobuf::int64 last_cached_html_computation_timestamp_ms_;
  ::std::string* hash_smart_diff_;
  ::std::string* charset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto();
  
  void InitAsDefaultInstance();
  static CacheHtmlInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CacheHtmlInfo

// optional bytes cached_html = 1;
inline bool CacheHtmlInfo::has_cached_html() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheHtmlInfo::set_has_cached_html() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheHtmlInfo::clear_has_cached_html() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheHtmlInfo::clear_cached_html() {
  if (cached_html_ != &::google::protobuf::internal::kEmptyString) {
    cached_html_->clear();
  }
  clear_has_cached_html();
}
inline const ::std::string& CacheHtmlInfo::cached_html() const {
  return *cached_html_;
}
inline void CacheHtmlInfo::set_cached_html(const ::std::string& value) {
  set_has_cached_html();
  if (cached_html_ == &::google::protobuf::internal::kEmptyString) {
    cached_html_ = new ::std::string;
  }
  cached_html_->assign(value);
}
inline void CacheHtmlInfo::set_cached_html(const char* value) {
  set_has_cached_html();
  if (cached_html_ == &::google::protobuf::internal::kEmptyString) {
    cached_html_ = new ::std::string;
  }
  cached_html_->assign(value);
}
inline void CacheHtmlInfo::set_cached_html(const void* value, size_t size) {
  set_has_cached_html();
  if (cached_html_ == &::google::protobuf::internal::kEmptyString) {
    cached_html_ = new ::std::string;
  }
  cached_html_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheHtmlInfo::mutable_cached_html() {
  set_has_cached_html();
  if (cached_html_ == &::google::protobuf::internal::kEmptyString) {
    cached_html_ = new ::std::string;
  }
  return cached_html_;
}
inline ::std::string* CacheHtmlInfo::release_cached_html() {
  clear_has_cached_html();
  if (cached_html_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cached_html_;
    cached_html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string hash = 2;
inline bool CacheHtmlInfo::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheHtmlInfo::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheHtmlInfo::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheHtmlInfo::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& CacheHtmlInfo::hash() const {
  return *hash_;
}
inline void CacheHtmlInfo::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void CacheHtmlInfo::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void CacheHtmlInfo::set_hash(const char* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheHtmlInfo::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* CacheHtmlInfo::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 last_cached_html_computation_timestamp_ms = 3;
inline bool CacheHtmlInfo::has_last_cached_html_computation_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheHtmlInfo::set_has_last_cached_html_computation_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheHtmlInfo::clear_has_last_cached_html_computation_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheHtmlInfo::clear_last_cached_html_computation_timestamp_ms() {
  last_cached_html_computation_timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_last_cached_html_computation_timestamp_ms();
}
inline ::google::protobuf::int64 CacheHtmlInfo::last_cached_html_computation_timestamp_ms() const {
  return last_cached_html_computation_timestamp_ms_;
}
inline void CacheHtmlInfo::set_last_cached_html_computation_timestamp_ms(::google::protobuf::int64 value) {
  set_has_last_cached_html_computation_timestamp_ms();
  last_cached_html_computation_timestamp_ms_ = value;
}

// optional string hash_smart_diff = 4;
inline bool CacheHtmlInfo::has_hash_smart_diff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheHtmlInfo::set_has_hash_smart_diff() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheHtmlInfo::clear_has_hash_smart_diff() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheHtmlInfo::clear_hash_smart_diff() {
  if (hash_smart_diff_ != &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_->clear();
  }
  clear_has_hash_smart_diff();
}
inline const ::std::string& CacheHtmlInfo::hash_smart_diff() const {
  return *hash_smart_diff_;
}
inline void CacheHtmlInfo::set_hash_smart_diff(const ::std::string& value) {
  set_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_ = new ::std::string;
  }
  hash_smart_diff_->assign(value);
}
inline void CacheHtmlInfo::set_hash_smart_diff(const char* value) {
  set_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_ = new ::std::string;
  }
  hash_smart_diff_->assign(value);
}
inline void CacheHtmlInfo::set_hash_smart_diff(const char* value, size_t size) {
  set_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_ = new ::std::string;
  }
  hash_smart_diff_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheHtmlInfo::mutable_hash_smart_diff() {
  set_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    hash_smart_diff_ = new ::std::string;
  }
  return hash_smart_diff_;
}
inline ::std::string* CacheHtmlInfo::release_hash_smart_diff() {
  clear_has_hash_smart_diff();
  if (hash_smart_diff_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_smart_diff_;
    hash_smart_diff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string charset = 5;
inline bool CacheHtmlInfo::has_charset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CacheHtmlInfo::set_has_charset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CacheHtmlInfo::clear_has_charset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CacheHtmlInfo::clear_charset() {
  if (charset_ != &::google::protobuf::internal::kEmptyString) {
    charset_->clear();
  }
  clear_has_charset();
}
inline const ::std::string& CacheHtmlInfo::charset() const {
  return *charset_;
}
inline void CacheHtmlInfo::set_charset(const ::std::string& value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
}
inline void CacheHtmlInfo::set_charset(const char* value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
}
inline void CacheHtmlInfo::set_charset(const char* value, size_t size) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheHtmlInfo::mutable_charset() {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  return charset_;
}
inline ::std::string* CacheHtmlInfo::release_charset() {
  clear_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charset_;
    charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2frewriter_2fcache_5fhtml_5finfo_2eproto__INCLUDED
