// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/rewriter/critical_css.proto

#ifndef PROTOBUF_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();

class CriticalCssResult;
class CriticalCssResult_LinkRules;

// ===================================================================

class CriticalCssResult_LinkRules : public ::google::protobuf::MessageLite {
 public:
  CriticalCssResult_LinkRules();
  virtual ~CriticalCssResult_LinkRules();
  
  CriticalCssResult_LinkRules(const CriticalCssResult_LinkRules& from);
  
  inline CriticalCssResult_LinkRules& operator=(const CriticalCssResult_LinkRules& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CriticalCssResult_LinkRules& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CriticalCssResult_LinkRules* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(CriticalCssResult_LinkRules* other);
  
  // implements Message ----------------------------------------------
  
  CriticalCssResult_LinkRules* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CriticalCssResult_LinkRules& from);
  void MergeFrom(const CriticalCssResult_LinkRules& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string link_url = 1;
  inline bool has_link_url() const;
  inline void clear_link_url();
  static const int kLinkUrlFieldNumber = 1;
  inline const ::std::string& link_url() const;
  inline void set_link_url(const ::std::string& value);
  inline void set_link_url(const char* value);
  inline void set_link_url(const char* value, size_t size);
  inline ::std::string* mutable_link_url();
  inline ::std::string* release_link_url();
  
  // optional string critical_rules = 2;
  inline bool has_critical_rules() const;
  inline void clear_critical_rules();
  static const int kCriticalRulesFieldNumber = 2;
  inline const ::std::string& critical_rules() const;
  inline void set_critical_rules(const ::std::string& value);
  inline void set_critical_rules(const char* value);
  inline void set_critical_rules(const char* value, size_t size);
  inline ::std::string* mutable_critical_rules();
  inline ::std::string* release_critical_rules();
  
  // optional int32 original_size = 3;
  inline bool has_original_size() const;
  inline void clear_original_size();
  static const int kOriginalSizeFieldNumber = 3;
  inline ::google::protobuf::int32 original_size() const;
  inline void set_original_size(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.CriticalCssResult.LinkRules)
 private:
  inline void set_has_link_url();
  inline void clear_has_link_url();
  inline void set_has_critical_rules();
  inline void clear_has_critical_rules();
  inline void set_has_original_size();
  inline void clear_has_original_size();
  
  ::std::string* link_url_;
  ::std::string* critical_rules_;
  ::google::protobuf::int32 original_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  
  void InitAsDefaultInstance();
  static CriticalCssResult_LinkRules* default_instance_;
};
// -------------------------------------------------------------------

class CriticalCssResult : public ::google::protobuf::MessageLite {
 public:
  CriticalCssResult();
  virtual ~CriticalCssResult();
  
  CriticalCssResult(const CriticalCssResult& from);
  
  inline CriticalCssResult& operator=(const CriticalCssResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CriticalCssResult& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CriticalCssResult* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(CriticalCssResult* other);
  
  // implements Message ----------------------------------------------
  
  CriticalCssResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CriticalCssResult& from);
  void MergeFrom(const CriticalCssResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef CriticalCssResult_LinkRules LinkRules;
  
  // accessors -------------------------------------------------------
  
  // repeated .net_instaweb.CriticalCssResult.LinkRules link_rules = 1;
  inline int link_rules_size() const;
  inline void clear_link_rules();
  static const int kLinkRulesFieldNumber = 1;
  inline const ::net_instaweb::CriticalCssResult_LinkRules& link_rules(int index) const;
  inline ::net_instaweb::CriticalCssResult_LinkRules* mutable_link_rules(int index);
  inline ::net_instaweb::CriticalCssResult_LinkRules* add_link_rules();
  inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssResult_LinkRules >&
      link_rules() const;
  inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssResult_LinkRules >*
      mutable_link_rules();
  
  // optional int32 exception_count = 2;
  inline bool has_exception_count() const;
  inline void clear_exception_count();
  static const int kExceptionCountFieldNumber = 2;
  inline ::google::protobuf::int32 exception_count() const;
  inline void set_exception_count(::google::protobuf::int32 value);
  
  // optional int32 import_count = 3;
  inline bool has_import_count() const;
  inline void clear_import_count();
  static const int kImportCountFieldNumber = 3;
  inline ::google::protobuf::int32 import_count() const;
  inline void set_import_count(::google::protobuf::int32 value);
  
  // optional int32 link_count = 4;
  inline bool has_link_count() const;
  inline void clear_link_count();
  static const int kLinkCountFieldNumber = 4;
  inline ::google::protobuf::int32 link_count() const;
  inline void set_link_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.CriticalCssResult)
 private:
  inline void set_has_exception_count();
  inline void clear_has_exception_count();
  inline void set_has_import_count();
  inline void clear_has_import_count();
  inline void set_has_link_count();
  inline void clear_has_link_count();
  
  ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssResult_LinkRules > link_rules_;
  ::google::protobuf::int32 exception_count_;
  ::google::protobuf::int32 import_count_;
  ::google::protobuf::int32 link_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  
  void InitAsDefaultInstance();
  static CriticalCssResult* default_instance_;
};
// ===================================================================


// ===================================================================

// CriticalCssResult_LinkRules

// optional string link_url = 1;
inline bool CriticalCssResult_LinkRules::has_link_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CriticalCssResult_LinkRules::set_has_link_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CriticalCssResult_LinkRules::clear_has_link_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CriticalCssResult_LinkRules::clear_link_url() {
  if (link_url_ != &::google::protobuf::internal::kEmptyString) {
    link_url_->clear();
  }
  clear_has_link_url();
}
inline const ::std::string& CriticalCssResult_LinkRules::link_url() const {
  return *link_url_;
}
inline void CriticalCssResult_LinkRules::set_link_url(const ::std::string& value) {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    link_url_ = new ::std::string;
  }
  link_url_->assign(value);
}
inline void CriticalCssResult_LinkRules::set_link_url(const char* value) {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    link_url_ = new ::std::string;
  }
  link_url_->assign(value);
}
inline void CriticalCssResult_LinkRules::set_link_url(const char* value, size_t size) {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    link_url_ = new ::std::string;
  }
  link_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CriticalCssResult_LinkRules::mutable_link_url() {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    link_url_ = new ::std::string;
  }
  return link_url_;
}
inline ::std::string* CriticalCssResult_LinkRules::release_link_url() {
  clear_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = link_url_;
    link_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string critical_rules = 2;
inline bool CriticalCssResult_LinkRules::has_critical_rules() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CriticalCssResult_LinkRules::set_has_critical_rules() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CriticalCssResult_LinkRules::clear_has_critical_rules() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CriticalCssResult_LinkRules::clear_critical_rules() {
  if (critical_rules_ != &::google::protobuf::internal::kEmptyString) {
    critical_rules_->clear();
  }
  clear_has_critical_rules();
}
inline const ::std::string& CriticalCssResult_LinkRules::critical_rules() const {
  return *critical_rules_;
}
inline void CriticalCssResult_LinkRules::set_critical_rules(const ::std::string& value) {
  set_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    critical_rules_ = new ::std::string;
  }
  critical_rules_->assign(value);
}
inline void CriticalCssResult_LinkRules::set_critical_rules(const char* value) {
  set_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    critical_rules_ = new ::std::string;
  }
  critical_rules_->assign(value);
}
inline void CriticalCssResult_LinkRules::set_critical_rules(const char* value, size_t size) {
  set_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    critical_rules_ = new ::std::string;
  }
  critical_rules_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CriticalCssResult_LinkRules::mutable_critical_rules() {
  set_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    critical_rules_ = new ::std::string;
  }
  return critical_rules_;
}
inline ::std::string* CriticalCssResult_LinkRules::release_critical_rules() {
  clear_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = critical_rules_;
    critical_rules_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 original_size = 3;
inline bool CriticalCssResult_LinkRules::has_original_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CriticalCssResult_LinkRules::set_has_original_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CriticalCssResult_LinkRules::clear_has_original_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CriticalCssResult_LinkRules::clear_original_size() {
  original_size_ = 0;
  clear_has_original_size();
}
inline ::google::protobuf::int32 CriticalCssResult_LinkRules::original_size() const {
  return original_size_;
}
inline void CriticalCssResult_LinkRules::set_original_size(::google::protobuf::int32 value) {
  set_has_original_size();
  original_size_ = value;
}

// -------------------------------------------------------------------

// CriticalCssResult

// repeated .net_instaweb.CriticalCssResult.LinkRules link_rules = 1;
inline int CriticalCssResult::link_rules_size() const {
  return link_rules_.size();
}
inline void CriticalCssResult::clear_link_rules() {
  link_rules_.Clear();
}
inline const ::net_instaweb::CriticalCssResult_LinkRules& CriticalCssResult::link_rules(int index) const {
  return link_rules_.Get(index);
}
inline ::net_instaweb::CriticalCssResult_LinkRules* CriticalCssResult::mutable_link_rules(int index) {
  return link_rules_.Mutable(index);
}
inline ::net_instaweb::CriticalCssResult_LinkRules* CriticalCssResult::add_link_rules() {
  return link_rules_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssResult_LinkRules >&
CriticalCssResult::link_rules() const {
  return link_rules_;
}
inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssResult_LinkRules >*
CriticalCssResult::mutable_link_rules() {
  return &link_rules_;
}

// optional int32 exception_count = 2;
inline bool CriticalCssResult::has_exception_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CriticalCssResult::set_has_exception_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CriticalCssResult::clear_has_exception_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CriticalCssResult::clear_exception_count() {
  exception_count_ = 0;
  clear_has_exception_count();
}
inline ::google::protobuf::int32 CriticalCssResult::exception_count() const {
  return exception_count_;
}
inline void CriticalCssResult::set_exception_count(::google::protobuf::int32 value) {
  set_has_exception_count();
  exception_count_ = value;
}

// optional int32 import_count = 3;
inline bool CriticalCssResult::has_import_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CriticalCssResult::set_has_import_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CriticalCssResult::clear_has_import_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CriticalCssResult::clear_import_count() {
  import_count_ = 0;
  clear_has_import_count();
}
inline ::google::protobuf::int32 CriticalCssResult::import_count() const {
  return import_count_;
}
inline void CriticalCssResult::set_import_count(::google::protobuf::int32 value) {
  set_has_import_count();
  import_count_ = value;
}

// optional int32 link_count = 4;
inline bool CriticalCssResult::has_link_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CriticalCssResult::set_has_link_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CriticalCssResult::clear_has_link_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CriticalCssResult::clear_link_count() {
  link_count_ = 0;
  clear_has_link_count();
}
inline ::google::protobuf::int32 CriticalCssResult::link_count() const {
  return link_count_;
}
inline void CriticalCssResult::set_link_count(::google::protobuf::int32 value) {
  set_has_link_count();
  link_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto__INCLUDED
