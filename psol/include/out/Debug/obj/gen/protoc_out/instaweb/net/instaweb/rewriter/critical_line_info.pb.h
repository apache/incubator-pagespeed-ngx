// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/rewriter/critical_line_info.proto

#ifndef PROTOBUF_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto();

class CriticalLineInfo;
class Panel;

// ===================================================================

class CriticalLineInfo : public ::google::protobuf::MessageLite {
 public:
  CriticalLineInfo();
  virtual ~CriticalLineInfo();
  
  CriticalLineInfo(const CriticalLineInfo& from);
  
  inline CriticalLineInfo& operator=(const CriticalLineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CriticalLineInfo& default_instance();
  
  void Swap(CriticalLineInfo* other);
  
  // implements Message ----------------------------------------------
  
  CriticalLineInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CriticalLineInfo& from);
  void MergeFrom(const CriticalLineInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .net_instaweb.Panel panels = 1;
  inline int panels_size() const;
  inline void clear_panels();
  static const int kPanelsFieldNumber = 1;
  inline const ::net_instaweb::Panel& panels(int index) const;
  inline ::net_instaweb::Panel* mutable_panels(int index);
  inline ::net_instaweb::Panel* add_panels();
  inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::Panel >&
      panels() const;
  inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::Panel >*
      mutable_panels();
  
  // repeated string critical_image_url = 2;
  inline int critical_image_url_size() const;
  inline void clear_critical_image_url();
  static const int kCriticalImageUrlFieldNumber = 2;
  inline const ::std::string& critical_image_url(int index) const;
  inline ::std::string* mutable_critical_image_url(int index);
  inline void set_critical_image_url(int index, const ::std::string& value);
  inline void set_critical_image_url(int index, const char* value);
  inline void set_critical_image_url(int index, const char* value, size_t size);
  inline ::std::string* add_critical_image_url();
  inline void add_critical_image_url(const ::std::string& value);
  inline void add_critical_image_url(const char* value);
  inline void add_critical_image_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& critical_image_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_critical_image_url();
  
  // repeated string css_critical_image_url = 3;
  inline int css_critical_image_url_size() const;
  inline void clear_css_critical_image_url();
  static const int kCssCriticalImageUrlFieldNumber = 3;
  inline const ::std::string& css_critical_image_url(int index) const;
  inline ::std::string* mutable_css_critical_image_url(int index);
  inline void set_css_critical_image_url(int index, const ::std::string& value);
  inline void set_css_critical_image_url(int index, const char* value);
  inline void set_css_critical_image_url(int index, const char* value, size_t size);
  inline ::std::string* add_css_critical_image_url();
  inline void add_css_critical_image_url(const ::std::string& value);
  inline void add_css_critical_image_url(const char* value);
  inline void add_css_critical_image_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& css_critical_image_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_css_critical_image_url();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.CriticalLineInfo)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::net_instaweb::Panel > panels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> critical_image_url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> css_critical_image_url_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto();
  
  void InitAsDefaultInstance();
  static CriticalLineInfo* default_instance_;
};
// -------------------------------------------------------------------

class Panel : public ::google::protobuf::MessageLite {
 public:
  Panel();
  virtual ~Panel();
  
  Panel(const Panel& from);
  
  inline Panel& operator=(const Panel& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Panel& default_instance();
  
  void Swap(Panel* other);
  
  // implements Message ----------------------------------------------
  
  Panel* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Panel& from);
  void MergeFrom(const Panel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string start_xpath = 1;
  inline bool has_start_xpath() const;
  inline void clear_start_xpath();
  static const int kStartXpathFieldNumber = 1;
  inline const ::std::string& start_xpath() const;
  inline void set_start_xpath(const ::std::string& value);
  inline void set_start_xpath(const char* value);
  inline void set_start_xpath(const char* value, size_t size);
  inline ::std::string* mutable_start_xpath();
  inline ::std::string* release_start_xpath();
  
  // optional string end_marker_xpath = 2;
  inline bool has_end_marker_xpath() const;
  inline void clear_end_marker_xpath();
  static const int kEndMarkerXpathFieldNumber = 2;
  inline const ::std::string& end_marker_xpath() const;
  inline void set_end_marker_xpath(const ::std::string& value);
  inline void set_end_marker_xpath(const char* value);
  inline void set_end_marker_xpath(const char* value, size_t size);
  inline ::std::string* mutable_end_marker_xpath();
  inline ::std::string* release_end_marker_xpath();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.Panel)
 private:
  inline void set_has_start_xpath();
  inline void clear_has_start_xpath();
  inline void set_has_end_marker_xpath();
  inline void clear_has_end_marker_xpath();
  
  ::std::string* start_xpath_;
  ::std::string* end_marker_xpath_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto();
  
  void InitAsDefaultInstance();
  static Panel* default_instance_;
};
// ===================================================================


// ===================================================================

// CriticalLineInfo

// repeated .net_instaweb.Panel panels = 1;
inline int CriticalLineInfo::panels_size() const {
  return panels_.size();
}
inline void CriticalLineInfo::clear_panels() {
  panels_.Clear();
}
inline const ::net_instaweb::Panel& CriticalLineInfo::panels(int index) const {
  return panels_.Get(index);
}
inline ::net_instaweb::Panel* CriticalLineInfo::mutable_panels(int index) {
  return panels_.Mutable(index);
}
inline ::net_instaweb::Panel* CriticalLineInfo::add_panels() {
  return panels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::Panel >&
CriticalLineInfo::panels() const {
  return panels_;
}
inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::Panel >*
CriticalLineInfo::mutable_panels() {
  return &panels_;
}

// repeated string critical_image_url = 2;
inline int CriticalLineInfo::critical_image_url_size() const {
  return critical_image_url_.size();
}
inline void CriticalLineInfo::clear_critical_image_url() {
  critical_image_url_.Clear();
}
inline const ::std::string& CriticalLineInfo::critical_image_url(int index) const {
  return critical_image_url_.Get(index);
}
inline ::std::string* CriticalLineInfo::mutable_critical_image_url(int index) {
  return critical_image_url_.Mutable(index);
}
inline void CriticalLineInfo::set_critical_image_url(int index, const ::std::string& value) {
  critical_image_url_.Mutable(index)->assign(value);
}
inline void CriticalLineInfo::set_critical_image_url(int index, const char* value) {
  critical_image_url_.Mutable(index)->assign(value);
}
inline void CriticalLineInfo::set_critical_image_url(int index, const char* value, size_t size) {
  critical_image_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CriticalLineInfo::add_critical_image_url() {
  return critical_image_url_.Add();
}
inline void CriticalLineInfo::add_critical_image_url(const ::std::string& value) {
  critical_image_url_.Add()->assign(value);
}
inline void CriticalLineInfo::add_critical_image_url(const char* value) {
  critical_image_url_.Add()->assign(value);
}
inline void CriticalLineInfo::add_critical_image_url(const char* value, size_t size) {
  critical_image_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CriticalLineInfo::critical_image_url() const {
  return critical_image_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CriticalLineInfo::mutable_critical_image_url() {
  return &critical_image_url_;
}

// repeated string css_critical_image_url = 3;
inline int CriticalLineInfo::css_critical_image_url_size() const {
  return css_critical_image_url_.size();
}
inline void CriticalLineInfo::clear_css_critical_image_url() {
  css_critical_image_url_.Clear();
}
inline const ::std::string& CriticalLineInfo::css_critical_image_url(int index) const {
  return css_critical_image_url_.Get(index);
}
inline ::std::string* CriticalLineInfo::mutable_css_critical_image_url(int index) {
  return css_critical_image_url_.Mutable(index);
}
inline void CriticalLineInfo::set_css_critical_image_url(int index, const ::std::string& value) {
  css_critical_image_url_.Mutable(index)->assign(value);
}
inline void CriticalLineInfo::set_css_critical_image_url(int index, const char* value) {
  css_critical_image_url_.Mutable(index)->assign(value);
}
inline void CriticalLineInfo::set_css_critical_image_url(int index, const char* value, size_t size) {
  css_critical_image_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CriticalLineInfo::add_css_critical_image_url() {
  return css_critical_image_url_.Add();
}
inline void CriticalLineInfo::add_css_critical_image_url(const ::std::string& value) {
  css_critical_image_url_.Add()->assign(value);
}
inline void CriticalLineInfo::add_css_critical_image_url(const char* value) {
  css_critical_image_url_.Add()->assign(value);
}
inline void CriticalLineInfo::add_css_critical_image_url(const char* value, size_t size) {
  css_critical_image_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CriticalLineInfo::css_critical_image_url() const {
  return css_critical_image_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CriticalLineInfo::mutable_css_critical_image_url() {
  return &css_critical_image_url_;
}

// -------------------------------------------------------------------

// Panel

// required string start_xpath = 1;
inline bool Panel::has_start_xpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Panel::set_has_start_xpath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Panel::clear_has_start_xpath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Panel::clear_start_xpath() {
  if (start_xpath_ != &::google::protobuf::internal::kEmptyString) {
    start_xpath_->clear();
  }
  clear_has_start_xpath();
}
inline const ::std::string& Panel::start_xpath() const {
  return *start_xpath_;
}
inline void Panel::set_start_xpath(const ::std::string& value) {
  set_has_start_xpath();
  if (start_xpath_ == &::google::protobuf::internal::kEmptyString) {
    start_xpath_ = new ::std::string;
  }
  start_xpath_->assign(value);
}
inline void Panel::set_start_xpath(const char* value) {
  set_has_start_xpath();
  if (start_xpath_ == &::google::protobuf::internal::kEmptyString) {
    start_xpath_ = new ::std::string;
  }
  start_xpath_->assign(value);
}
inline void Panel::set_start_xpath(const char* value, size_t size) {
  set_has_start_xpath();
  if (start_xpath_ == &::google::protobuf::internal::kEmptyString) {
    start_xpath_ = new ::std::string;
  }
  start_xpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Panel::mutable_start_xpath() {
  set_has_start_xpath();
  if (start_xpath_ == &::google::protobuf::internal::kEmptyString) {
    start_xpath_ = new ::std::string;
  }
  return start_xpath_;
}
inline ::std::string* Panel::release_start_xpath() {
  clear_has_start_xpath();
  if (start_xpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = start_xpath_;
    start_xpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string end_marker_xpath = 2;
inline bool Panel::has_end_marker_xpath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Panel::set_has_end_marker_xpath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Panel::clear_has_end_marker_xpath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Panel::clear_end_marker_xpath() {
  if (end_marker_xpath_ != &::google::protobuf::internal::kEmptyString) {
    end_marker_xpath_->clear();
  }
  clear_has_end_marker_xpath();
}
inline const ::std::string& Panel::end_marker_xpath() const {
  return *end_marker_xpath_;
}
inline void Panel::set_end_marker_xpath(const ::std::string& value) {
  set_has_end_marker_xpath();
  if (end_marker_xpath_ == &::google::protobuf::internal::kEmptyString) {
    end_marker_xpath_ = new ::std::string;
  }
  end_marker_xpath_->assign(value);
}
inline void Panel::set_end_marker_xpath(const char* value) {
  set_has_end_marker_xpath();
  if (end_marker_xpath_ == &::google::protobuf::internal::kEmptyString) {
    end_marker_xpath_ = new ::std::string;
  }
  end_marker_xpath_->assign(value);
}
inline void Panel::set_end_marker_xpath(const char* value, size_t size) {
  set_has_end_marker_xpath();
  if (end_marker_xpath_ == &::google::protobuf::internal::kEmptyString) {
    end_marker_xpath_ = new ::std::string;
  }
  end_marker_xpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Panel::mutable_end_marker_xpath() {
  set_has_end_marker_xpath();
  if (end_marker_xpath_ == &::google::protobuf::internal::kEmptyString) {
    end_marker_xpath_ = new ::std::string;
  }
  return end_marker_xpath_;
}
inline ::std::string* Panel::release_end_marker_xpath() {
  clear_has_end_marker_xpath();
  if (end_marker_xpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = end_marker_xpath_;
    end_marker_xpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2frewriter_2fcritical_5fline_5finfo_2eproto__INCLUDED
