// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/rewriter/flush_early.proto

#ifndef PROTOBUF_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "net/instaweb/http/http.pb.h"
// @@protoc_insertion_point(includes)

namespace net_instaweb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();

class FlushEarlyResource;
class FlushEarlyInfo;
class FlushEarlyRenderInfo;

enum FlushEarlyContentType {
  OTHER = 1,
  JAVASCRIPT = 2,
  CSS = 3
};
bool FlushEarlyContentType_IsValid(int value);
const FlushEarlyContentType FlushEarlyContentType_MIN = OTHER;
const FlushEarlyContentType FlushEarlyContentType_MAX = CSS;
const int FlushEarlyContentType_ARRAYSIZE = FlushEarlyContentType_MAX + 1;

// ===================================================================

class FlushEarlyResource : public ::google::protobuf::MessageLite {
 public:
  FlushEarlyResource();
  virtual ~FlushEarlyResource();
  
  FlushEarlyResource(const FlushEarlyResource& from);
  
  inline FlushEarlyResource& operator=(const FlushEarlyResource& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const FlushEarlyResource& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FlushEarlyResource* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(FlushEarlyResource* other);
  
  // implements Message ----------------------------------------------
  
  FlushEarlyResource* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FlushEarlyResource& from);
  void MergeFrom(const FlushEarlyResource& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string rewritten_url = 1;
  inline bool has_rewritten_url() const;
  inline void clear_rewritten_url();
  static const int kRewrittenUrlFieldNumber = 1;
  inline const ::std::string& rewritten_url() const;
  inline void set_rewritten_url(const ::std::string& value);
  inline void set_rewritten_url(const char* value);
  inline void set_rewritten_url(const char* value, size_t size);
  inline ::std::string* mutable_rewritten_url();
  inline ::std::string* release_rewritten_url();
  
  // optional .net_instaweb.FlushEarlyContentType content_type = 2;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 2;
  inline net_instaweb::FlushEarlyContentType content_type() const;
  inline void set_content_type(net_instaweb::FlushEarlyContentType value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.FlushEarlyResource)
 private:
  inline void set_has_rewritten_url();
  inline void clear_has_rewritten_url();
  inline void set_has_content_type();
  inline void clear_has_content_type();
  
  ::std::string* rewritten_url_;
  int content_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  
  void InitAsDefaultInstance();
  static FlushEarlyResource* default_instance_;
};
// -------------------------------------------------------------------

class FlushEarlyInfo : public ::google::protobuf::MessageLite {
 public:
  FlushEarlyInfo();
  virtual ~FlushEarlyInfo();
  
  FlushEarlyInfo(const FlushEarlyInfo& from);
  
  inline FlushEarlyInfo& operator=(const FlushEarlyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const FlushEarlyInfo& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FlushEarlyInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(FlushEarlyInfo* other);
  
  // implements Message ----------------------------------------------
  
  FlushEarlyInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FlushEarlyInfo& from);
  void MergeFrom(const FlushEarlyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .net_instaweb.HttpResponseHeaders response_headers = 1;
  inline bool has_response_headers() const;
  inline void clear_response_headers();
  static const int kResponseHeadersFieldNumber = 1;
  inline const ::net_instaweb::HttpResponseHeaders& response_headers() const;
  inline ::net_instaweb::HttpResponseHeaders* mutable_response_headers();
  inline ::net_instaweb::HttpResponseHeaders* release_response_headers();
  
  // optional string pre_head = 2;
  inline bool has_pre_head() const;
  inline void clear_pre_head();
  static const int kPreHeadFieldNumber = 2;
  inline const ::std::string& pre_head() const;
  inline void set_pre_head(const ::std::string& value);
  inline void set_pre_head(const char* value);
  inline void set_pre_head(const char* value, size_t size);
  inline ::std::string* mutable_pre_head();
  inline ::std::string* release_pre_head();
  
  // repeated string resources = 3;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 3;
  inline const ::std::string& resources(int index) const;
  inline ::std::string* mutable_resources(int index);
  inline void set_resources(int index, const ::std::string& value);
  inline void set_resources(int index, const char* value);
  inline void set_resources(int index, const char* value, size_t size);
  inline ::std::string* add_resources();
  inline void add_resources(const ::std::string& value);
  inline void add_resources(const char* value);
  inline void add_resources(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resources();
  
  // repeated .net_instaweb.FlushEarlyResource subresource = 4;
  inline int subresource_size() const;
  inline void clear_subresource();
  static const int kSubresourceFieldNumber = 4;
  inline const ::net_instaweb::FlushEarlyResource& subresource(int index) const;
  inline ::net_instaweb::FlushEarlyResource* mutable_subresource(int index);
  inline ::net_instaweb::FlushEarlyResource* add_subresource();
  inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::FlushEarlyResource >&
      subresource() const;
  inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::FlushEarlyResource >*
      mutable_subresource();
  
  // repeated string dns_prefetch_domains = 5;
  inline int dns_prefetch_domains_size() const;
  inline void clear_dns_prefetch_domains();
  static const int kDnsPrefetchDomainsFieldNumber = 5;
  inline const ::std::string& dns_prefetch_domains(int index) const;
  inline ::std::string* mutable_dns_prefetch_domains(int index);
  inline void set_dns_prefetch_domains(int index, const ::std::string& value);
  inline void set_dns_prefetch_domains(int index, const char* value);
  inline void set_dns_prefetch_domains(int index, const char* value, size_t size);
  inline ::std::string* add_dns_prefetch_domains();
  inline void add_dns_prefetch_domains(const ::std::string& value);
  inline void add_dns_prefetch_domains(const char* value);
  inline void add_dns_prefetch_domains(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& dns_prefetch_domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dns_prefetch_domains();
  
  // optional int32 total_dns_prefetch_domains = 6;
  inline bool has_total_dns_prefetch_domains() const;
  inline void clear_total_dns_prefetch_domains();
  static const int kTotalDnsPrefetchDomainsFieldNumber = 6;
  inline ::google::protobuf::int32 total_dns_prefetch_domains() const;
  inline void set_total_dns_prefetch_domains(::google::protobuf::int32 value);
  
  // optional int32 total_dns_prefetch_domains_previous = 7;
  inline bool has_total_dns_prefetch_domains_previous() const;
  inline void clear_total_dns_prefetch_domains_previous();
  static const int kTotalDnsPrefetchDomainsPreviousFieldNumber = 7;
  inline ::google::protobuf::int32 total_dns_prefetch_domains_previous() const;
  inline void set_total_dns_prefetch_domains_previous(::google::protobuf::int32 value);
  
  // optional string content_type_meta_tag = 8;
  inline bool has_content_type_meta_tag() const;
  inline void clear_content_type_meta_tag();
  static const int kContentTypeMetaTagFieldNumber = 8;
  inline const ::std::string& content_type_meta_tag() const;
  inline void set_content_type_meta_tag(const ::std::string& value);
  inline void set_content_type_meta_tag(const char* value);
  inline void set_content_type_meta_tag(const char* value, size_t size);
  inline ::std::string* mutable_content_type_meta_tag();
  inline ::std::string* release_content_type_meta_tag();
  
  // optional string resource_html = 9;
  inline bool has_resource_html() const;
  inline void clear_resource_html();
  static const int kResourceHtmlFieldNumber = 9;
  inline const ::std::string& resource_html() const;
  inline void set_resource_html(const ::std::string& value);
  inline void set_resource_html(const char* value);
  inline void set_resource_html(const char* value, size_t size);
  inline ::std::string* mutable_resource_html();
  inline ::std::string* release_resource_html();
  
  // optional string last_n_fetch_latencies = 10;
  inline bool has_last_n_fetch_latencies() const;
  inline void clear_last_n_fetch_latencies();
  static const int kLastNFetchLatenciesFieldNumber = 10;
  inline const ::std::string& last_n_fetch_latencies() const;
  inline void set_last_n_fetch_latencies(const ::std::string& value);
  inline void set_last_n_fetch_latencies(const char* value);
  inline void set_last_n_fetch_latencies(const char* value, size_t size);
  inline ::std::string* mutable_last_n_fetch_latencies();
  inline ::std::string* release_last_n_fetch_latencies();
  
  // optional double average_fetch_latency_ms = 11;
  inline bool has_average_fetch_latency_ms() const;
  inline void clear_average_fetch_latency_ms();
  static const int kAverageFetchLatencyMsFieldNumber = 11;
  inline double average_fetch_latency_ms() const;
  inline void set_average_fetch_latency_ms(double value);
  
  // optional bool http_only_cookie_present = 12;
  inline bool has_http_only_cookie_present() const;
  inline void clear_http_only_cookie_present();
  static const int kHttpOnlyCookiePresentFieldNumber = 12;
  inline bool http_only_cookie_present() const;
  inline void set_http_only_cookie_present(bool value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.FlushEarlyInfo)
 private:
  inline void set_has_response_headers();
  inline void clear_has_response_headers();
  inline void set_has_pre_head();
  inline void clear_has_pre_head();
  inline void set_has_total_dns_prefetch_domains();
  inline void clear_has_total_dns_prefetch_domains();
  inline void set_has_total_dns_prefetch_domains_previous();
  inline void clear_has_total_dns_prefetch_domains_previous();
  inline void set_has_content_type_meta_tag();
  inline void clear_has_content_type_meta_tag();
  inline void set_has_resource_html();
  inline void clear_has_resource_html();
  inline void set_has_last_n_fetch_latencies();
  inline void clear_has_last_n_fetch_latencies();
  inline void set_has_average_fetch_latency_ms();
  inline void clear_has_average_fetch_latency_ms();
  inline void set_has_http_only_cookie_present();
  inline void clear_has_http_only_cookie_present();
  
  ::net_instaweb::HttpResponseHeaders* response_headers_;
  ::std::string* pre_head_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resources_;
  ::google::protobuf::RepeatedPtrField< ::net_instaweb::FlushEarlyResource > subresource_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dns_prefetch_domains_;
  ::google::protobuf::int32 total_dns_prefetch_domains_;
  ::google::protobuf::int32 total_dns_prefetch_domains_previous_;
  ::std::string* content_type_meta_tag_;
  ::std::string* resource_html_;
  ::std::string* last_n_fetch_latencies_;
  double average_fetch_latency_ms_;
  bool http_only_cookie_present_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  
  void InitAsDefaultInstance();
  static FlushEarlyInfo* default_instance_;
};
// -------------------------------------------------------------------

class FlushEarlyRenderInfo : public ::google::protobuf::MessageLite {
 public:
  FlushEarlyRenderInfo();
  virtual ~FlushEarlyRenderInfo();
  
  FlushEarlyRenderInfo(const FlushEarlyRenderInfo& from);
  
  inline FlushEarlyRenderInfo& operator=(const FlushEarlyRenderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const FlushEarlyRenderInfo& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FlushEarlyRenderInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(FlushEarlyRenderInfo* other);
  
  // implements Message ----------------------------------------------
  
  FlushEarlyRenderInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FlushEarlyRenderInfo& from);
  void MergeFrom(const FlushEarlyRenderInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string private_cacheable_url = 1;
  inline int private_cacheable_url_size() const;
  inline void clear_private_cacheable_url();
  static const int kPrivateCacheableUrlFieldNumber = 1;
  inline const ::std::string& private_cacheable_url(int index) const;
  inline ::std::string* mutable_private_cacheable_url(int index);
  inline void set_private_cacheable_url(int index, const ::std::string& value);
  inline void set_private_cacheable_url(int index, const char* value);
  inline void set_private_cacheable_url(int index, const char* value, size_t size);
  inline ::std::string* add_private_cacheable_url();
  inline void add_private_cacheable_url(const ::std::string& value);
  inline void add_private_cacheable_url(const char* value);
  inline void add_private_cacheable_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& private_cacheable_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_private_cacheable_url();
  
  // optional string charset = 2;
  inline bool has_charset() const;
  inline void clear_charset();
  static const int kCharsetFieldNumber = 2;
  inline const ::std::string& charset() const;
  inline void set_charset(const ::std::string& value);
  inline void set_charset(const char* value);
  inline void set_charset(const char* value, size_t size);
  inline ::std::string* mutable_charset();
  inline ::std::string* release_charset();
  
  // optional bool updated = 3;
  inline bool has_updated() const;
  inline void clear_updated();
  static const int kUpdatedFieldNumber = 3;
  inline bool updated() const;
  inline void set_updated(bool value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.FlushEarlyRenderInfo)
 private:
  inline void set_has_charset();
  inline void clear_has_charset();
  inline void set_has_updated();
  inline void clear_has_updated();
  
  ::google::protobuf::RepeatedPtrField< ::std::string> private_cacheable_url_;
  ::std::string* charset_;
  bool updated_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  
  void InitAsDefaultInstance();
  static FlushEarlyRenderInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// FlushEarlyResource

// optional string rewritten_url = 1;
inline bool FlushEarlyResource::has_rewritten_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushEarlyResource::set_has_rewritten_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushEarlyResource::clear_has_rewritten_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushEarlyResource::clear_rewritten_url() {
  if (rewritten_url_ != &::google::protobuf::internal::kEmptyString) {
    rewritten_url_->clear();
  }
  clear_has_rewritten_url();
}
inline const ::std::string& FlushEarlyResource::rewritten_url() const {
  return *rewritten_url_;
}
inline void FlushEarlyResource::set_rewritten_url(const ::std::string& value) {
  set_has_rewritten_url();
  if (rewritten_url_ == &::google::protobuf::internal::kEmptyString) {
    rewritten_url_ = new ::std::string;
  }
  rewritten_url_->assign(value);
}
inline void FlushEarlyResource::set_rewritten_url(const char* value) {
  set_has_rewritten_url();
  if (rewritten_url_ == &::google::protobuf::internal::kEmptyString) {
    rewritten_url_ = new ::std::string;
  }
  rewritten_url_->assign(value);
}
inline void FlushEarlyResource::set_rewritten_url(const char* value, size_t size) {
  set_has_rewritten_url();
  if (rewritten_url_ == &::google::protobuf::internal::kEmptyString) {
    rewritten_url_ = new ::std::string;
  }
  rewritten_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushEarlyResource::mutable_rewritten_url() {
  set_has_rewritten_url();
  if (rewritten_url_ == &::google::protobuf::internal::kEmptyString) {
    rewritten_url_ = new ::std::string;
  }
  return rewritten_url_;
}
inline ::std::string* FlushEarlyResource::release_rewritten_url() {
  clear_has_rewritten_url();
  if (rewritten_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rewritten_url_;
    rewritten_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .net_instaweb.FlushEarlyContentType content_type = 2;
inline bool FlushEarlyResource::has_content_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushEarlyResource::set_has_content_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlushEarlyResource::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlushEarlyResource::clear_content_type() {
  content_type_ = 1;
  clear_has_content_type();
}
inline net_instaweb::FlushEarlyContentType FlushEarlyResource::content_type() const {
  return static_cast< net_instaweb::FlushEarlyContentType >(content_type_);
}
inline void FlushEarlyResource::set_content_type(net_instaweb::FlushEarlyContentType value) {
  GOOGLE_DCHECK(net_instaweb::FlushEarlyContentType_IsValid(value));
  set_has_content_type();
  content_type_ = value;
}

// -------------------------------------------------------------------

// FlushEarlyInfo

// optional .net_instaweb.HttpResponseHeaders response_headers = 1;
inline bool FlushEarlyInfo::has_response_headers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushEarlyInfo::set_has_response_headers() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushEarlyInfo::clear_has_response_headers() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushEarlyInfo::clear_response_headers() {
  if (response_headers_ != NULL) response_headers_->::net_instaweb::HttpResponseHeaders::Clear();
  clear_has_response_headers();
}
inline const ::net_instaweb::HttpResponseHeaders& FlushEarlyInfo::response_headers() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return response_headers_ != NULL ? *response_headers_ : *default_instance().response_headers_;
#else
  return response_headers_ != NULL ? *response_headers_ : *default_instance_->response_headers_;
#endif
}
inline ::net_instaweb::HttpResponseHeaders* FlushEarlyInfo::mutable_response_headers() {
  set_has_response_headers();
  if (response_headers_ == NULL) response_headers_ = new ::net_instaweb::HttpResponseHeaders;
  return response_headers_;
}
inline ::net_instaweb::HttpResponseHeaders* FlushEarlyInfo::release_response_headers() {
  clear_has_response_headers();
  ::net_instaweb::HttpResponseHeaders* temp = response_headers_;
  response_headers_ = NULL;
  return temp;
}

// optional string pre_head = 2;
inline bool FlushEarlyInfo::has_pre_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushEarlyInfo::set_has_pre_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlushEarlyInfo::clear_has_pre_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlushEarlyInfo::clear_pre_head() {
  if (pre_head_ != &::google::protobuf::internal::kEmptyString) {
    pre_head_->clear();
  }
  clear_has_pre_head();
}
inline const ::std::string& FlushEarlyInfo::pre_head() const {
  return *pre_head_;
}
inline void FlushEarlyInfo::set_pre_head(const ::std::string& value) {
  set_has_pre_head();
  if (pre_head_ == &::google::protobuf::internal::kEmptyString) {
    pre_head_ = new ::std::string;
  }
  pre_head_->assign(value);
}
inline void FlushEarlyInfo::set_pre_head(const char* value) {
  set_has_pre_head();
  if (pre_head_ == &::google::protobuf::internal::kEmptyString) {
    pre_head_ = new ::std::string;
  }
  pre_head_->assign(value);
}
inline void FlushEarlyInfo::set_pre_head(const char* value, size_t size) {
  set_has_pre_head();
  if (pre_head_ == &::google::protobuf::internal::kEmptyString) {
    pre_head_ = new ::std::string;
  }
  pre_head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushEarlyInfo::mutable_pre_head() {
  set_has_pre_head();
  if (pre_head_ == &::google::protobuf::internal::kEmptyString) {
    pre_head_ = new ::std::string;
  }
  return pre_head_;
}
inline ::std::string* FlushEarlyInfo::release_pre_head() {
  clear_has_pre_head();
  if (pre_head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pre_head_;
    pre_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string resources = 3;
inline int FlushEarlyInfo::resources_size() const {
  return resources_.size();
}
inline void FlushEarlyInfo::clear_resources() {
  resources_.Clear();
}
inline const ::std::string& FlushEarlyInfo::resources(int index) const {
  return resources_.Get(index);
}
inline ::std::string* FlushEarlyInfo::mutable_resources(int index) {
  return resources_.Mutable(index);
}
inline void FlushEarlyInfo::set_resources(int index, const ::std::string& value) {
  resources_.Mutable(index)->assign(value);
}
inline void FlushEarlyInfo::set_resources(int index, const char* value) {
  resources_.Mutable(index)->assign(value);
}
inline void FlushEarlyInfo::set_resources(int index, const char* value, size_t size) {
  resources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushEarlyInfo::add_resources() {
  return resources_.Add();
}
inline void FlushEarlyInfo::add_resources(const ::std::string& value) {
  resources_.Add()->assign(value);
}
inline void FlushEarlyInfo::add_resources(const char* value) {
  resources_.Add()->assign(value);
}
inline void FlushEarlyInfo::add_resources(const char* value, size_t size) {
  resources_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FlushEarlyInfo::resources() const {
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FlushEarlyInfo::mutable_resources() {
  return &resources_;
}

// repeated .net_instaweb.FlushEarlyResource subresource = 4;
inline int FlushEarlyInfo::subresource_size() const {
  return subresource_.size();
}
inline void FlushEarlyInfo::clear_subresource() {
  subresource_.Clear();
}
inline const ::net_instaweb::FlushEarlyResource& FlushEarlyInfo::subresource(int index) const {
  return subresource_.Get(index);
}
inline ::net_instaweb::FlushEarlyResource* FlushEarlyInfo::mutable_subresource(int index) {
  return subresource_.Mutable(index);
}
inline ::net_instaweb::FlushEarlyResource* FlushEarlyInfo::add_subresource() {
  return subresource_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::FlushEarlyResource >&
FlushEarlyInfo::subresource() const {
  return subresource_;
}
inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::FlushEarlyResource >*
FlushEarlyInfo::mutable_subresource() {
  return &subresource_;
}

// repeated string dns_prefetch_domains = 5;
inline int FlushEarlyInfo::dns_prefetch_domains_size() const {
  return dns_prefetch_domains_.size();
}
inline void FlushEarlyInfo::clear_dns_prefetch_domains() {
  dns_prefetch_domains_.Clear();
}
inline const ::std::string& FlushEarlyInfo::dns_prefetch_domains(int index) const {
  return dns_prefetch_domains_.Get(index);
}
inline ::std::string* FlushEarlyInfo::mutable_dns_prefetch_domains(int index) {
  return dns_prefetch_domains_.Mutable(index);
}
inline void FlushEarlyInfo::set_dns_prefetch_domains(int index, const ::std::string& value) {
  dns_prefetch_domains_.Mutable(index)->assign(value);
}
inline void FlushEarlyInfo::set_dns_prefetch_domains(int index, const char* value) {
  dns_prefetch_domains_.Mutable(index)->assign(value);
}
inline void FlushEarlyInfo::set_dns_prefetch_domains(int index, const char* value, size_t size) {
  dns_prefetch_domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushEarlyInfo::add_dns_prefetch_domains() {
  return dns_prefetch_domains_.Add();
}
inline void FlushEarlyInfo::add_dns_prefetch_domains(const ::std::string& value) {
  dns_prefetch_domains_.Add()->assign(value);
}
inline void FlushEarlyInfo::add_dns_prefetch_domains(const char* value) {
  dns_prefetch_domains_.Add()->assign(value);
}
inline void FlushEarlyInfo::add_dns_prefetch_domains(const char* value, size_t size) {
  dns_prefetch_domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FlushEarlyInfo::dns_prefetch_domains() const {
  return dns_prefetch_domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FlushEarlyInfo::mutable_dns_prefetch_domains() {
  return &dns_prefetch_domains_;
}

// optional int32 total_dns_prefetch_domains = 6;
inline bool FlushEarlyInfo::has_total_dns_prefetch_domains() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FlushEarlyInfo::set_has_total_dns_prefetch_domains() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FlushEarlyInfo::clear_has_total_dns_prefetch_domains() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FlushEarlyInfo::clear_total_dns_prefetch_domains() {
  total_dns_prefetch_domains_ = 0;
  clear_has_total_dns_prefetch_domains();
}
inline ::google::protobuf::int32 FlushEarlyInfo::total_dns_prefetch_domains() const {
  return total_dns_prefetch_domains_;
}
inline void FlushEarlyInfo::set_total_dns_prefetch_domains(::google::protobuf::int32 value) {
  set_has_total_dns_prefetch_domains();
  total_dns_prefetch_domains_ = value;
}

// optional int32 total_dns_prefetch_domains_previous = 7;
inline bool FlushEarlyInfo::has_total_dns_prefetch_domains_previous() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FlushEarlyInfo::set_has_total_dns_prefetch_domains_previous() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FlushEarlyInfo::clear_has_total_dns_prefetch_domains_previous() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FlushEarlyInfo::clear_total_dns_prefetch_domains_previous() {
  total_dns_prefetch_domains_previous_ = 0;
  clear_has_total_dns_prefetch_domains_previous();
}
inline ::google::protobuf::int32 FlushEarlyInfo::total_dns_prefetch_domains_previous() const {
  return total_dns_prefetch_domains_previous_;
}
inline void FlushEarlyInfo::set_total_dns_prefetch_domains_previous(::google::protobuf::int32 value) {
  set_has_total_dns_prefetch_domains_previous();
  total_dns_prefetch_domains_previous_ = value;
}

// optional string content_type_meta_tag = 8;
inline bool FlushEarlyInfo::has_content_type_meta_tag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FlushEarlyInfo::set_has_content_type_meta_tag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FlushEarlyInfo::clear_has_content_type_meta_tag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FlushEarlyInfo::clear_content_type_meta_tag() {
  if (content_type_meta_tag_ != &::google::protobuf::internal::kEmptyString) {
    content_type_meta_tag_->clear();
  }
  clear_has_content_type_meta_tag();
}
inline const ::std::string& FlushEarlyInfo::content_type_meta_tag() const {
  return *content_type_meta_tag_;
}
inline void FlushEarlyInfo::set_content_type_meta_tag(const ::std::string& value) {
  set_has_content_type_meta_tag();
  if (content_type_meta_tag_ == &::google::protobuf::internal::kEmptyString) {
    content_type_meta_tag_ = new ::std::string;
  }
  content_type_meta_tag_->assign(value);
}
inline void FlushEarlyInfo::set_content_type_meta_tag(const char* value) {
  set_has_content_type_meta_tag();
  if (content_type_meta_tag_ == &::google::protobuf::internal::kEmptyString) {
    content_type_meta_tag_ = new ::std::string;
  }
  content_type_meta_tag_->assign(value);
}
inline void FlushEarlyInfo::set_content_type_meta_tag(const char* value, size_t size) {
  set_has_content_type_meta_tag();
  if (content_type_meta_tag_ == &::google::protobuf::internal::kEmptyString) {
    content_type_meta_tag_ = new ::std::string;
  }
  content_type_meta_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushEarlyInfo::mutable_content_type_meta_tag() {
  set_has_content_type_meta_tag();
  if (content_type_meta_tag_ == &::google::protobuf::internal::kEmptyString) {
    content_type_meta_tag_ = new ::std::string;
  }
  return content_type_meta_tag_;
}
inline ::std::string* FlushEarlyInfo::release_content_type_meta_tag() {
  clear_has_content_type_meta_tag();
  if (content_type_meta_tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_type_meta_tag_;
    content_type_meta_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string resource_html = 9;
inline bool FlushEarlyInfo::has_resource_html() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FlushEarlyInfo::set_has_resource_html() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FlushEarlyInfo::clear_has_resource_html() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FlushEarlyInfo::clear_resource_html() {
  if (resource_html_ != &::google::protobuf::internal::kEmptyString) {
    resource_html_->clear();
  }
  clear_has_resource_html();
}
inline const ::std::string& FlushEarlyInfo::resource_html() const {
  return *resource_html_;
}
inline void FlushEarlyInfo::set_resource_html(const ::std::string& value) {
  set_has_resource_html();
  if (resource_html_ == &::google::protobuf::internal::kEmptyString) {
    resource_html_ = new ::std::string;
  }
  resource_html_->assign(value);
}
inline void FlushEarlyInfo::set_resource_html(const char* value) {
  set_has_resource_html();
  if (resource_html_ == &::google::protobuf::internal::kEmptyString) {
    resource_html_ = new ::std::string;
  }
  resource_html_->assign(value);
}
inline void FlushEarlyInfo::set_resource_html(const char* value, size_t size) {
  set_has_resource_html();
  if (resource_html_ == &::google::protobuf::internal::kEmptyString) {
    resource_html_ = new ::std::string;
  }
  resource_html_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushEarlyInfo::mutable_resource_html() {
  set_has_resource_html();
  if (resource_html_ == &::google::protobuf::internal::kEmptyString) {
    resource_html_ = new ::std::string;
  }
  return resource_html_;
}
inline ::std::string* FlushEarlyInfo::release_resource_html() {
  clear_has_resource_html();
  if (resource_html_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resource_html_;
    resource_html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string last_n_fetch_latencies = 10;
inline bool FlushEarlyInfo::has_last_n_fetch_latencies() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FlushEarlyInfo::set_has_last_n_fetch_latencies() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FlushEarlyInfo::clear_has_last_n_fetch_latencies() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FlushEarlyInfo::clear_last_n_fetch_latencies() {
  if (last_n_fetch_latencies_ != &::google::protobuf::internal::kEmptyString) {
    last_n_fetch_latencies_->clear();
  }
  clear_has_last_n_fetch_latencies();
}
inline const ::std::string& FlushEarlyInfo::last_n_fetch_latencies() const {
  return *last_n_fetch_latencies_;
}
inline void FlushEarlyInfo::set_last_n_fetch_latencies(const ::std::string& value) {
  set_has_last_n_fetch_latencies();
  if (last_n_fetch_latencies_ == &::google::protobuf::internal::kEmptyString) {
    last_n_fetch_latencies_ = new ::std::string;
  }
  last_n_fetch_latencies_->assign(value);
}
inline void FlushEarlyInfo::set_last_n_fetch_latencies(const char* value) {
  set_has_last_n_fetch_latencies();
  if (last_n_fetch_latencies_ == &::google::protobuf::internal::kEmptyString) {
    last_n_fetch_latencies_ = new ::std::string;
  }
  last_n_fetch_latencies_->assign(value);
}
inline void FlushEarlyInfo::set_last_n_fetch_latencies(const char* value, size_t size) {
  set_has_last_n_fetch_latencies();
  if (last_n_fetch_latencies_ == &::google::protobuf::internal::kEmptyString) {
    last_n_fetch_latencies_ = new ::std::string;
  }
  last_n_fetch_latencies_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushEarlyInfo::mutable_last_n_fetch_latencies() {
  set_has_last_n_fetch_latencies();
  if (last_n_fetch_latencies_ == &::google::protobuf::internal::kEmptyString) {
    last_n_fetch_latencies_ = new ::std::string;
  }
  return last_n_fetch_latencies_;
}
inline ::std::string* FlushEarlyInfo::release_last_n_fetch_latencies() {
  clear_has_last_n_fetch_latencies();
  if (last_n_fetch_latencies_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_n_fetch_latencies_;
    last_n_fetch_latencies_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double average_fetch_latency_ms = 11;
inline bool FlushEarlyInfo::has_average_fetch_latency_ms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FlushEarlyInfo::set_has_average_fetch_latency_ms() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FlushEarlyInfo::clear_has_average_fetch_latency_ms() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FlushEarlyInfo::clear_average_fetch_latency_ms() {
  average_fetch_latency_ms_ = 0;
  clear_has_average_fetch_latency_ms();
}
inline double FlushEarlyInfo::average_fetch_latency_ms() const {
  return average_fetch_latency_ms_;
}
inline void FlushEarlyInfo::set_average_fetch_latency_ms(double value) {
  set_has_average_fetch_latency_ms();
  average_fetch_latency_ms_ = value;
}

// optional bool http_only_cookie_present = 12;
inline bool FlushEarlyInfo::has_http_only_cookie_present() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FlushEarlyInfo::set_has_http_only_cookie_present() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FlushEarlyInfo::clear_has_http_only_cookie_present() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FlushEarlyInfo::clear_http_only_cookie_present() {
  http_only_cookie_present_ = false;
  clear_has_http_only_cookie_present();
}
inline bool FlushEarlyInfo::http_only_cookie_present() const {
  return http_only_cookie_present_;
}
inline void FlushEarlyInfo::set_http_only_cookie_present(bool value) {
  set_has_http_only_cookie_present();
  http_only_cookie_present_ = value;
}

// -------------------------------------------------------------------

// FlushEarlyRenderInfo

// repeated string private_cacheable_url = 1;
inline int FlushEarlyRenderInfo::private_cacheable_url_size() const {
  return private_cacheable_url_.size();
}
inline void FlushEarlyRenderInfo::clear_private_cacheable_url() {
  private_cacheable_url_.Clear();
}
inline const ::std::string& FlushEarlyRenderInfo::private_cacheable_url(int index) const {
  return private_cacheable_url_.Get(index);
}
inline ::std::string* FlushEarlyRenderInfo::mutable_private_cacheable_url(int index) {
  return private_cacheable_url_.Mutable(index);
}
inline void FlushEarlyRenderInfo::set_private_cacheable_url(int index, const ::std::string& value) {
  private_cacheable_url_.Mutable(index)->assign(value);
}
inline void FlushEarlyRenderInfo::set_private_cacheable_url(int index, const char* value) {
  private_cacheable_url_.Mutable(index)->assign(value);
}
inline void FlushEarlyRenderInfo::set_private_cacheable_url(int index, const char* value, size_t size) {
  private_cacheable_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushEarlyRenderInfo::add_private_cacheable_url() {
  return private_cacheable_url_.Add();
}
inline void FlushEarlyRenderInfo::add_private_cacheable_url(const ::std::string& value) {
  private_cacheable_url_.Add()->assign(value);
}
inline void FlushEarlyRenderInfo::add_private_cacheable_url(const char* value) {
  private_cacheable_url_.Add()->assign(value);
}
inline void FlushEarlyRenderInfo::add_private_cacheable_url(const char* value, size_t size) {
  private_cacheable_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FlushEarlyRenderInfo::private_cacheable_url() const {
  return private_cacheable_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FlushEarlyRenderInfo::mutable_private_cacheable_url() {
  return &private_cacheable_url_;
}

// optional string charset = 2;
inline bool FlushEarlyRenderInfo::has_charset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushEarlyRenderInfo::set_has_charset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlushEarlyRenderInfo::clear_has_charset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlushEarlyRenderInfo::clear_charset() {
  if (charset_ != &::google::protobuf::internal::kEmptyString) {
    charset_->clear();
  }
  clear_has_charset();
}
inline const ::std::string& FlushEarlyRenderInfo::charset() const {
  return *charset_;
}
inline void FlushEarlyRenderInfo::set_charset(const ::std::string& value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
}
inline void FlushEarlyRenderInfo::set_charset(const char* value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
}
inline void FlushEarlyRenderInfo::set_charset(const char* value, size_t size) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushEarlyRenderInfo::mutable_charset() {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  return charset_;
}
inline ::std::string* FlushEarlyRenderInfo::release_charset() {
  clear_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charset_;
    charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool updated = 3;
inline bool FlushEarlyRenderInfo::has_updated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlushEarlyRenderInfo::set_has_updated() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlushEarlyRenderInfo::clear_has_updated() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlushEarlyRenderInfo::clear_updated() {
  updated_ = false;
  clear_has_updated();
}
inline bool FlushEarlyRenderInfo::updated() const {
  return updated_;
}
inline void FlushEarlyRenderInfo::set_updated(bool value) {
  set_has_updated();
  updated_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto__INCLUDED
