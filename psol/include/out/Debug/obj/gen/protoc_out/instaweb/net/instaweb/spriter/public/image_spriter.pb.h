// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/spriter/public/image_spriter.proto

#ifndef PROTOBUF_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {
namespace spriter {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();

class Image;
class SpriteOptions;
class SpriterInput;
class Rect;
class ImagePosition;
class SpriterResult;

enum PlacementMethod {
  VERTICAL_STRIP = 0
};
bool PlacementMethod_IsValid(int value);
const PlacementMethod PlacementMethod_MIN = VERTICAL_STRIP;
const PlacementMethod PlacementMethod_MAX = VERTICAL_STRIP;
const int PlacementMethod_ARRAYSIZE = PlacementMethod_MAX + 1;

enum ImageFormat {
  PNG = 0,
  JPEG = 1
};
bool ImageFormat_IsValid(int value);
const ImageFormat ImageFormat_MIN = PNG;
const ImageFormat ImageFormat_MAX = JPEG;
const int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

// ===================================================================

class Image : public ::google::protobuf::MessageLite {
 public:
  Image();
  virtual ~Image();
  
  Image(const Image& from);
  
  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Image& default_instance();
  
  void Swap(Image* other);
  
  // implements Message ----------------------------------------------
  
  Image* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.spriter.Image)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  
  ::std::string* path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  
  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class SpriteOptions : public ::google::protobuf::MessageLite {
 public:
  SpriteOptions();
  virtual ~SpriteOptions();
  
  SpriteOptions(const SpriteOptions& from);
  
  inline SpriteOptions& operator=(const SpriteOptions& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SpriteOptions& default_instance();
  
  void Swap(SpriteOptions* other);
  
  // implements Message ----------------------------------------------
  
  SpriteOptions* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SpriteOptions& from);
  void MergeFrom(const SpriteOptions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .net_instaweb.spriter.PlacementMethod placement_method = 1;
  inline bool has_placement_method() const;
  inline void clear_placement_method();
  static const int kPlacementMethodFieldNumber = 1;
  inline net_instaweb::spriter::PlacementMethod placement_method() const;
  inline void set_placement_method(net_instaweb::spriter::PlacementMethod value);
  
  // required .net_instaweb.spriter.ImageFormat output_format = 2;
  inline bool has_output_format() const;
  inline void clear_output_format();
  static const int kOutputFormatFieldNumber = 2;
  inline net_instaweb::spriter::ImageFormat output_format() const;
  inline void set_output_format(net_instaweb::spriter::ImageFormat value);
  
  // required string input_base_path = 3;
  inline bool has_input_base_path() const;
  inline void clear_input_base_path();
  static const int kInputBasePathFieldNumber = 3;
  inline const ::std::string& input_base_path() const;
  inline void set_input_base_path(const ::std::string& value);
  inline void set_input_base_path(const char* value);
  inline void set_input_base_path(const char* value, size_t size);
  inline ::std::string* mutable_input_base_path();
  inline ::std::string* release_input_base_path();
  
  // required string output_base_path = 4;
  inline bool has_output_base_path() const;
  inline void clear_output_base_path();
  static const int kOutputBasePathFieldNumber = 4;
  inline const ::std::string& output_base_path() const;
  inline void set_output_base_path(const ::std::string& value);
  inline void set_output_base_path(const char* value);
  inline void set_output_base_path(const char* value, size_t size);
  inline ::std::string* mutable_output_base_path();
  inline ::std::string* release_output_base_path();
  
  // required string output_image_path = 5;
  inline bool has_output_image_path() const;
  inline void clear_output_image_path();
  static const int kOutputImagePathFieldNumber = 5;
  inline const ::std::string& output_image_path() const;
  inline void set_output_image_path(const ::std::string& value);
  inline void set_output_image_path(const char* value);
  inline void set_output_image_path(const char* value, size_t size);
  inline ::std::string* mutable_output_image_path();
  inline ::std::string* release_output_image_path();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.spriter.SpriteOptions)
 private:
  inline void set_has_placement_method();
  inline void clear_has_placement_method();
  inline void set_has_output_format();
  inline void clear_has_output_format();
  inline void set_has_input_base_path();
  inline void clear_has_input_base_path();
  inline void set_has_output_base_path();
  inline void clear_has_output_base_path();
  inline void set_has_output_image_path();
  inline void clear_has_output_image_path();
  
  int placement_method_;
  int output_format_;
  ::std::string* input_base_path_;
  ::std::string* output_base_path_;
  ::std::string* output_image_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  
  void InitAsDefaultInstance();
  static SpriteOptions* default_instance_;
};
// -------------------------------------------------------------------

class SpriterInput : public ::google::protobuf::MessageLite {
 public:
  SpriterInput();
  virtual ~SpriterInput();
  
  SpriterInput(const SpriterInput& from);
  
  inline SpriterInput& operator=(const SpriterInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SpriterInput& default_instance();
  
  void Swap(SpriterInput* other);
  
  // implements Message ----------------------------------------------
  
  SpriterInput* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SpriterInput& from);
  void MergeFrom(const SpriterInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required .net_instaweb.spriter.SpriteOptions options = 2;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 2;
  inline const ::net_instaweb::spriter::SpriteOptions& options() const;
  inline ::net_instaweb::spriter::SpriteOptions* mutable_options();
  inline ::net_instaweb::spriter::SpriteOptions* release_options();
  
  // repeated .net_instaweb.spriter.Image input_image_set = 3;
  inline int input_image_set_size() const;
  inline void clear_input_image_set();
  static const int kInputImageSetFieldNumber = 3;
  inline const ::net_instaweb::spriter::Image& input_image_set(int index) const;
  inline ::net_instaweb::spriter::Image* mutable_input_image_set(int index);
  inline ::net_instaweb::spriter::Image* add_input_image_set();
  inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::Image >&
      input_image_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::Image >*
      mutable_input_image_set();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.spriter.SpriterInput)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_options();
  inline void clear_has_options();
  
  ::net_instaweb::spriter::SpriteOptions* options_;
  ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::Image > input_image_set_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  
  void InitAsDefaultInstance();
  static SpriterInput* default_instance_;
};
// -------------------------------------------------------------------

class Rect : public ::google::protobuf::MessageLite {
 public:
  Rect();
  virtual ~Rect();
  
  Rect(const Rect& from);
  
  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Rect& default_instance();
  
  void Swap(Rect* other);
  
  // implements Message ----------------------------------------------
  
  Rect* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 x_pos = 1;
  inline bool has_x_pos() const;
  inline void clear_x_pos();
  static const int kXPosFieldNumber = 1;
  inline ::google::protobuf::int32 x_pos() const;
  inline void set_x_pos(::google::protobuf::int32 value);
  
  // required int32 y_pos = 2;
  inline bool has_y_pos() const;
  inline void clear_y_pos();
  static const int kYPosFieldNumber = 2;
  inline ::google::protobuf::int32 y_pos() const;
  inline void set_y_pos(::google::protobuf::int32 value);
  
  // required int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // required int32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.spriter.Rect)
 private:
  inline void set_has_x_pos();
  inline void clear_has_x_pos();
  inline void set_has_y_pos();
  inline void clear_has_y_pos();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  
  ::google::protobuf::int32 x_pos_;
  ::google::protobuf::int32 y_pos_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  
  void InitAsDefaultInstance();
  static Rect* default_instance_;
};
// -------------------------------------------------------------------

class ImagePosition : public ::google::protobuf::MessageLite {
 public:
  ImagePosition();
  virtual ~ImagePosition();
  
  ImagePosition(const ImagePosition& from);
  
  inline ImagePosition& operator=(const ImagePosition& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ImagePosition& default_instance();
  
  void Swap(ImagePosition* other);
  
  // implements Message ----------------------------------------------
  
  ImagePosition* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ImagePosition& from);
  void MergeFrom(const ImagePosition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required .net_instaweb.spriter.Rect clip_rect = 2;
  inline bool has_clip_rect() const;
  inline void clear_clip_rect();
  static const int kClipRectFieldNumber = 2;
  inline const ::net_instaweb::spriter::Rect& clip_rect() const;
  inline ::net_instaweb::spriter::Rect* mutable_clip_rect();
  inline ::net_instaweb::spriter::Rect* release_clip_rect();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.spriter.ImagePosition)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_clip_rect();
  inline void clear_has_clip_rect();
  
  ::std::string* path_;
  ::net_instaweb::spriter::Rect* clip_rect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  
  void InitAsDefaultInstance();
  static ImagePosition* default_instance_;
};
// -------------------------------------------------------------------

class SpriterResult : public ::google::protobuf::MessageLite {
 public:
  SpriterResult();
  virtual ~SpriterResult();
  
  SpriterResult(const SpriterResult& from);
  
  inline SpriterResult& operator=(const SpriterResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SpriterResult& default_instance();
  
  void Swap(SpriterResult* other);
  
  // implements Message ----------------------------------------------
  
  SpriterResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SpriterResult& from);
  void MergeFrom(const SpriterResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string output_base_path = 2;
  inline bool has_output_base_path() const;
  inline void clear_output_base_path();
  static const int kOutputBasePathFieldNumber = 2;
  inline const ::std::string& output_base_path() const;
  inline void set_output_base_path(const ::std::string& value);
  inline void set_output_base_path(const char* value);
  inline void set_output_base_path(const char* value, size_t size);
  inline ::std::string* mutable_output_base_path();
  inline ::std::string* release_output_base_path();
  
  // required string output_image_path = 3;
  inline bool has_output_image_path() const;
  inline void clear_output_image_path();
  static const int kOutputImagePathFieldNumber = 3;
  inline const ::std::string& output_image_path() const;
  inline void set_output_image_path(const ::std::string& value);
  inline void set_output_image_path(const char* value);
  inline void set_output_image_path(const char* value, size_t size);
  inline ::std::string* mutable_output_image_path();
  inline ::std::string* release_output_image_path();
  
  // repeated .net_instaweb.spriter.ImagePosition image_position = 4;
  inline int image_position_size() const;
  inline void clear_image_position();
  static const int kImagePositionFieldNumber = 4;
  inline const ::net_instaweb::spriter::ImagePosition& image_position(int index) const;
  inline ::net_instaweb::spriter::ImagePosition* mutable_image_position(int index);
  inline ::net_instaweb::spriter::ImagePosition* add_image_position();
  inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::ImagePosition >&
      image_position() const;
  inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::ImagePosition >*
      mutable_image_position();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.spriter.SpriterResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_output_base_path();
  inline void clear_has_output_base_path();
  inline void set_has_output_image_path();
  inline void clear_has_output_image_path();
  
  ::std::string* output_base_path_;
  ::std::string* output_image_path_;
  ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::ImagePosition > image_position_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto();
  
  void InitAsDefaultInstance();
  static SpriterResult* default_instance_;
};
// ===================================================================


// ===================================================================

// Image

// required string path = 1;
inline bool Image::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Image::path() const {
  return *path_;
}
inline void Image::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Image::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Image::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* Image::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SpriteOptions

// required .net_instaweb.spriter.PlacementMethod placement_method = 1;
inline bool SpriteOptions::has_placement_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpriteOptions::set_has_placement_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpriteOptions::clear_has_placement_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpriteOptions::clear_placement_method() {
  placement_method_ = 0;
  clear_has_placement_method();
}
inline net_instaweb::spriter::PlacementMethod SpriteOptions::placement_method() const {
  return static_cast< net_instaweb::spriter::PlacementMethod >(placement_method_);
}
inline void SpriteOptions::set_placement_method(net_instaweb::spriter::PlacementMethod value) {
  GOOGLE_DCHECK(net_instaweb::spriter::PlacementMethod_IsValid(value));
  set_has_placement_method();
  placement_method_ = value;
}

// required .net_instaweb.spriter.ImageFormat output_format = 2;
inline bool SpriteOptions::has_output_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpriteOptions::set_has_output_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpriteOptions::clear_has_output_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpriteOptions::clear_output_format() {
  output_format_ = 0;
  clear_has_output_format();
}
inline net_instaweb::spriter::ImageFormat SpriteOptions::output_format() const {
  return static_cast< net_instaweb::spriter::ImageFormat >(output_format_);
}
inline void SpriteOptions::set_output_format(net_instaweb::spriter::ImageFormat value) {
  GOOGLE_DCHECK(net_instaweb::spriter::ImageFormat_IsValid(value));
  set_has_output_format();
  output_format_ = value;
}

// required string input_base_path = 3;
inline bool SpriteOptions::has_input_base_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpriteOptions::set_has_input_base_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpriteOptions::clear_has_input_base_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpriteOptions::clear_input_base_path() {
  if (input_base_path_ != &::google::protobuf::internal::kEmptyString) {
    input_base_path_->clear();
  }
  clear_has_input_base_path();
}
inline const ::std::string& SpriteOptions::input_base_path() const {
  return *input_base_path_;
}
inline void SpriteOptions::set_input_base_path(const ::std::string& value) {
  set_has_input_base_path();
  if (input_base_path_ == &::google::protobuf::internal::kEmptyString) {
    input_base_path_ = new ::std::string;
  }
  input_base_path_->assign(value);
}
inline void SpriteOptions::set_input_base_path(const char* value) {
  set_has_input_base_path();
  if (input_base_path_ == &::google::protobuf::internal::kEmptyString) {
    input_base_path_ = new ::std::string;
  }
  input_base_path_->assign(value);
}
inline void SpriteOptions::set_input_base_path(const char* value, size_t size) {
  set_has_input_base_path();
  if (input_base_path_ == &::google::protobuf::internal::kEmptyString) {
    input_base_path_ = new ::std::string;
  }
  input_base_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpriteOptions::mutable_input_base_path() {
  set_has_input_base_path();
  if (input_base_path_ == &::google::protobuf::internal::kEmptyString) {
    input_base_path_ = new ::std::string;
  }
  return input_base_path_;
}
inline ::std::string* SpriteOptions::release_input_base_path() {
  clear_has_input_base_path();
  if (input_base_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_base_path_;
    input_base_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string output_base_path = 4;
inline bool SpriteOptions::has_output_base_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpriteOptions::set_has_output_base_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpriteOptions::clear_has_output_base_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpriteOptions::clear_output_base_path() {
  if (output_base_path_ != &::google::protobuf::internal::kEmptyString) {
    output_base_path_->clear();
  }
  clear_has_output_base_path();
}
inline const ::std::string& SpriteOptions::output_base_path() const {
  return *output_base_path_;
}
inline void SpriteOptions::set_output_base_path(const ::std::string& value) {
  set_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    output_base_path_ = new ::std::string;
  }
  output_base_path_->assign(value);
}
inline void SpriteOptions::set_output_base_path(const char* value) {
  set_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    output_base_path_ = new ::std::string;
  }
  output_base_path_->assign(value);
}
inline void SpriteOptions::set_output_base_path(const char* value, size_t size) {
  set_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    output_base_path_ = new ::std::string;
  }
  output_base_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpriteOptions::mutable_output_base_path() {
  set_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    output_base_path_ = new ::std::string;
  }
  return output_base_path_;
}
inline ::std::string* SpriteOptions::release_output_base_path() {
  clear_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_base_path_;
    output_base_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string output_image_path = 5;
inline bool SpriteOptions::has_output_image_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpriteOptions::set_has_output_image_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpriteOptions::clear_has_output_image_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpriteOptions::clear_output_image_path() {
  if (output_image_path_ != &::google::protobuf::internal::kEmptyString) {
    output_image_path_->clear();
  }
  clear_has_output_image_path();
}
inline const ::std::string& SpriteOptions::output_image_path() const {
  return *output_image_path_;
}
inline void SpriteOptions::set_output_image_path(const ::std::string& value) {
  set_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    output_image_path_ = new ::std::string;
  }
  output_image_path_->assign(value);
}
inline void SpriteOptions::set_output_image_path(const char* value) {
  set_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    output_image_path_ = new ::std::string;
  }
  output_image_path_->assign(value);
}
inline void SpriteOptions::set_output_image_path(const char* value, size_t size) {
  set_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    output_image_path_ = new ::std::string;
  }
  output_image_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpriteOptions::mutable_output_image_path() {
  set_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    output_image_path_ = new ::std::string;
  }
  return output_image_path_;
}
inline ::std::string* SpriteOptions::release_output_image_path() {
  clear_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_image_path_;
    output_image_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SpriterInput

// optional int32 id = 1 [default = 0];
inline bool SpriterInput::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpriterInput::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpriterInput::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpriterInput::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SpriterInput::id() const {
  return id_;
}
inline void SpriterInput::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .net_instaweb.spriter.SpriteOptions options = 2;
inline bool SpriterInput::has_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpriterInput::set_has_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpriterInput::clear_has_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpriterInput::clear_options() {
  if (options_ != NULL) options_->::net_instaweb::spriter::SpriteOptions::Clear();
  clear_has_options();
}
inline const ::net_instaweb::spriter::SpriteOptions& SpriterInput::options() const {
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::net_instaweb::spriter::SpriteOptions* SpriterInput::mutable_options() {
  set_has_options();
  if (options_ == NULL) options_ = new ::net_instaweb::spriter::SpriteOptions;
  return options_;
}
inline ::net_instaweb::spriter::SpriteOptions* SpriterInput::release_options() {
  clear_has_options();
  ::net_instaweb::spriter::SpriteOptions* temp = options_;
  options_ = NULL;
  return temp;
}

// repeated .net_instaweb.spriter.Image input_image_set = 3;
inline int SpriterInput::input_image_set_size() const {
  return input_image_set_.size();
}
inline void SpriterInput::clear_input_image_set() {
  input_image_set_.Clear();
}
inline const ::net_instaweb::spriter::Image& SpriterInput::input_image_set(int index) const {
  return input_image_set_.Get(index);
}
inline ::net_instaweb::spriter::Image* SpriterInput::mutable_input_image_set(int index) {
  return input_image_set_.Mutable(index);
}
inline ::net_instaweb::spriter::Image* SpriterInput::add_input_image_set() {
  return input_image_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::Image >&
SpriterInput::input_image_set() const {
  return input_image_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::Image >*
SpriterInput::mutable_input_image_set() {
  return &input_image_set_;
}

// -------------------------------------------------------------------

// Rect

// required int32 x_pos = 1;
inline bool Rect::has_x_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect::set_has_x_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rect::clear_has_x_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rect::clear_x_pos() {
  x_pos_ = 0;
  clear_has_x_pos();
}
inline ::google::protobuf::int32 Rect::x_pos() const {
  return x_pos_;
}
inline void Rect::set_x_pos(::google::protobuf::int32 value) {
  set_has_x_pos();
  x_pos_ = value;
}

// required int32 y_pos = 2;
inline bool Rect::has_y_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect::set_has_y_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rect::clear_has_y_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rect::clear_y_pos() {
  y_pos_ = 0;
  clear_has_y_pos();
}
inline ::google::protobuf::int32 Rect::y_pos() const {
  return y_pos_;
}
inline void Rect::set_y_pos(::google::protobuf::int32 value) {
  set_has_y_pos();
  y_pos_ = value;
}

// required int32 width = 3;
inline bool Rect::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rect::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rect::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rect::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Rect::width() const {
  return width_;
}
inline void Rect::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 4;
inline bool Rect::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rect::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rect::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rect::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Rect::height() const {
  return height_;
}
inline void Rect::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// ImagePosition

// required string path = 1;
inline bool ImagePosition::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImagePosition::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImagePosition::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImagePosition::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ImagePosition::path() const {
  return *path_;
}
inline void ImagePosition::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ImagePosition::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ImagePosition::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImagePosition::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ImagePosition::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .net_instaweb.spriter.Rect clip_rect = 2;
inline bool ImagePosition::has_clip_rect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImagePosition::set_has_clip_rect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImagePosition::clear_has_clip_rect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImagePosition::clear_clip_rect() {
  if (clip_rect_ != NULL) clip_rect_->::net_instaweb::spriter::Rect::Clear();
  clear_has_clip_rect();
}
inline const ::net_instaweb::spriter::Rect& ImagePosition::clip_rect() const {
  return clip_rect_ != NULL ? *clip_rect_ : *default_instance_->clip_rect_;
}
inline ::net_instaweb::spriter::Rect* ImagePosition::mutable_clip_rect() {
  set_has_clip_rect();
  if (clip_rect_ == NULL) clip_rect_ = new ::net_instaweb::spriter::Rect;
  return clip_rect_;
}
inline ::net_instaweb::spriter::Rect* ImagePosition::release_clip_rect() {
  clear_has_clip_rect();
  ::net_instaweb::spriter::Rect* temp = clip_rect_;
  clip_rect_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SpriterResult

// required int32 id = 1;
inline bool SpriterResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpriterResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpriterResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpriterResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SpriterResult::id() const {
  return id_;
}
inline void SpriterResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string output_base_path = 2;
inline bool SpriterResult::has_output_base_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpriterResult::set_has_output_base_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpriterResult::clear_has_output_base_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpriterResult::clear_output_base_path() {
  if (output_base_path_ != &::google::protobuf::internal::kEmptyString) {
    output_base_path_->clear();
  }
  clear_has_output_base_path();
}
inline const ::std::string& SpriterResult::output_base_path() const {
  return *output_base_path_;
}
inline void SpriterResult::set_output_base_path(const ::std::string& value) {
  set_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    output_base_path_ = new ::std::string;
  }
  output_base_path_->assign(value);
}
inline void SpriterResult::set_output_base_path(const char* value) {
  set_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    output_base_path_ = new ::std::string;
  }
  output_base_path_->assign(value);
}
inline void SpriterResult::set_output_base_path(const char* value, size_t size) {
  set_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    output_base_path_ = new ::std::string;
  }
  output_base_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpriterResult::mutable_output_base_path() {
  set_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    output_base_path_ = new ::std::string;
  }
  return output_base_path_;
}
inline ::std::string* SpriterResult::release_output_base_path() {
  clear_has_output_base_path();
  if (output_base_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_base_path_;
    output_base_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string output_image_path = 3;
inline bool SpriterResult::has_output_image_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpriterResult::set_has_output_image_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpriterResult::clear_has_output_image_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpriterResult::clear_output_image_path() {
  if (output_image_path_ != &::google::protobuf::internal::kEmptyString) {
    output_image_path_->clear();
  }
  clear_has_output_image_path();
}
inline const ::std::string& SpriterResult::output_image_path() const {
  return *output_image_path_;
}
inline void SpriterResult::set_output_image_path(const ::std::string& value) {
  set_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    output_image_path_ = new ::std::string;
  }
  output_image_path_->assign(value);
}
inline void SpriterResult::set_output_image_path(const char* value) {
  set_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    output_image_path_ = new ::std::string;
  }
  output_image_path_->assign(value);
}
inline void SpriterResult::set_output_image_path(const char* value, size_t size) {
  set_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    output_image_path_ = new ::std::string;
  }
  output_image_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpriterResult::mutable_output_image_path() {
  set_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    output_image_path_ = new ::std::string;
  }
  return output_image_path_;
}
inline ::std::string* SpriterResult::release_output_image_path() {
  clear_has_output_image_path();
  if (output_image_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_image_path_;
    output_image_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .net_instaweb.spriter.ImagePosition image_position = 4;
inline int SpriterResult::image_position_size() const {
  return image_position_.size();
}
inline void SpriterResult::clear_image_position() {
  image_position_.Clear();
}
inline const ::net_instaweb::spriter::ImagePosition& SpriterResult::image_position(int index) const {
  return image_position_.Get(index);
}
inline ::net_instaweb::spriter::ImagePosition* SpriterResult::mutable_image_position(int index) {
  return image_position_.Mutable(index);
}
inline ::net_instaweb::spriter::ImagePosition* SpriterResult::add_image_position() {
  return image_position_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::ImagePosition >&
SpriterResult::image_position() const {
  return image_position_;
}
inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::spriter::ImagePosition >*
SpriterResult::mutable_image_position() {
  return &image_position_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace spriter
}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2fspriter_2fpublic_2fimage_5fspriter_2eproto__INCLUDED
