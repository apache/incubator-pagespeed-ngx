// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource.proto

#ifndef PROTOBUF_resource_2eproto__INCLUDED
#define PROTOBUF_resource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace pagespeed {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_resource_2eproto();
void protobuf_AssignDesc_resource_2eproto();
void protobuf_ShutdownFile_resource_2eproto();

class CodeLocation;
class Timestamp;
class ResourceFetchDelayData;
class ResourceFetchDownloadData;
class ResourceFetchData;
class ResourceEvaluationConstraintData;
class ResourceEvaluationData;
class HeaderData;
class ResourceData;
class BrowsingContextData;
class PageResourceData;

enum ResourceFetchDelayType {
  UNKNOWN_DELAY_TYPE = 0,
  EVENT = 1,
  TIMEOUT = 2,
  MAX_CONNECTION = 3
};
bool ResourceFetchDelayType_IsValid(int value);
const ResourceFetchDelayType ResourceFetchDelayType_MIN = UNKNOWN_DELAY_TYPE;
const ResourceFetchDelayType ResourceFetchDelayType_MAX = MAX_CONNECTION;
const int ResourceFetchDelayType_ARRAYSIZE = ResourceFetchDelayType_MAX + 1;

enum ResourceDiscoveryType {
  UNKNOWN_DISCOVERY_TYPE = 0,
  PARSER = 1,
  DOCUMENT_WRITE = 2,
  NODE_INSERT = 3,
  XHR = 4,
  INITIAL_RESOURCE = 5
};
bool ResourceDiscoveryType_IsValid(int value);
const ResourceDiscoveryType ResourceDiscoveryType_MIN = UNKNOWN_DISCOVERY_TYPE;
const ResourceDiscoveryType ResourceDiscoveryType_MAX = INITIAL_RESOURCE;
const int ResourceDiscoveryType_ARRAYSIZE = ResourceDiscoveryType_MAX + 1;

enum EvaluationConstraintType {
  UNKNOWN_CONSTRAINT_TYPE = 0,
  BLOCKING = 1,
  AFTER_PARSE = 2,
  ASAP_ORDERED = 3,
  ASAP_UNORDERED = 4
};
bool EvaluationConstraintType_IsValid(int value);
const EvaluationConstraintType EvaluationConstraintType_MIN = UNKNOWN_CONSTRAINT_TYPE;
const EvaluationConstraintType EvaluationConstraintType_MAX = ASAP_UNORDERED;
const int EvaluationConstraintType_ARRAYSIZE = EvaluationConstraintType_MAX + 1;

enum EvaluationType {
  UNKNOWN_EVALUATION_TYPE = 0,
  EVAL_SCRIPT = 1,
  APPLY_STYLES = 2,
  PARSE = 3
};
bool EvaluationType_IsValid(int value);
const EvaluationType EvaluationType_MIN = UNKNOWN_EVALUATION_TYPE;
const EvaluationType EvaluationType_MAX = PARSE;
const int EvaluationType_ARRAYSIZE = EvaluationType_MAX + 1;

enum ResourceType {
  OTHER = 0,
  HTML = 1,
  TEXT = 2,
  CSS = 3,
  IMAGE = 4,
  JS = 5,
  REDIRECT = 6,
  FLASH = 7,
  MEDIA = 8,
  BINARY_DATA = 9,
  FONT = 10
};
bool ResourceType_IsValid(int value);
const ResourceType ResourceType_MIN = OTHER;
const ResourceType ResourceType_MAX = FONT;
const int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

enum Protocol {
  HTTP_10 = 0,
  HTTP_11 = 1,
  UNKNOWN_PROTOCOL = 2
};
bool Protocol_IsValid(int value);
const Protocol Protocol_MIN = HTTP_10;
const Protocol Protocol_MAX = UNKNOWN_PROTOCOL;
const int Protocol_ARRAYSIZE = Protocol_MAX + 1;

enum ImageType {
  JPEG = 0,
  PNG = 1,
  GIF = 2,
  SVG = 3,
  UNKNOWN_IMAGE_TYPE = 4
};
bool ImageType_IsValid(int value);
const ImageType ImageType_MIN = JPEG;
const ImageType ImageType_MAX = UNKNOWN_IMAGE_TYPE;
const int ImageType_ARRAYSIZE = ImageType_MAX + 1;

// ===================================================================

class CodeLocation : public ::google::protobuf::MessageLite {
 public:
  CodeLocation();
  virtual ~CodeLocation();
  
  CodeLocation(const CodeLocation& from);
  
  inline CodeLocation& operator=(const CodeLocation& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CodeLocation& default_instance();
  
  void Swap(CodeLocation* other);
  
  // implements Message ----------------------------------------------
  
  CodeLocation* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CodeLocation& from);
  void MergeFrom(const CodeLocation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // required int32 line = 2;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 2;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // optional int32 column = 3;
  inline bool has_column() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 3;
  inline ::google::protobuf::int32 column() const;
  inline void set_column(::google::protobuf::int32 value);
  
  // optional string function_name = 4;
  inline bool has_function_name() const;
  inline void clear_function_name();
  static const int kFunctionNameFieldNumber = 4;
  inline const ::std::string& function_name() const;
  inline void set_function_name(const ::std::string& value);
  inline void set_function_name(const char* value);
  inline void set_function_name(const char* value, size_t size);
  inline ::std::string* mutable_function_name();
  inline ::std::string* release_function_name();
  
  // @@protoc_insertion_point(class_scope:pagespeed.CodeLocation)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_column();
  inline void clear_has_column();
  inline void set_has_function_name();
  inline void clear_has_function_name();
  
  ::std::string* url_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 column_;
  ::std::string* function_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static CodeLocation* default_instance_;
};
// -------------------------------------------------------------------

class Timestamp : public ::google::protobuf::MessageLite {
 public:
  Timestamp();
  virtual ~Timestamp();
  
  Timestamp(const Timestamp& from);
  
  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Timestamp& default_instance();
  
  void Swap(Timestamp* other);
  
  // implements Message ----------------------------------------------
  
  Timestamp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 msec = 1;
  inline bool has_msec() const;
  inline void clear_msec();
  static const int kMsecFieldNumber = 1;
  inline ::google::protobuf::int64 msec() const;
  inline void set_msec(::google::protobuf::int64 value);
  
  // optional int64 tick = 2;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 2;
  inline ::google::protobuf::int64 tick() const;
  inline void set_tick(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:pagespeed.Timestamp)
 private:
  inline void set_has_msec();
  inline void clear_has_msec();
  inline void set_has_tick();
  inline void clear_has_tick();
  
  ::google::protobuf::int64 msec_;
  ::google::protobuf::int64 tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static Timestamp* default_instance_;
};
// -------------------------------------------------------------------

class ResourceFetchDelayData : public ::google::protobuf::MessageLite {
 public:
  ResourceFetchDelayData();
  virtual ~ResourceFetchDelayData();
  
  ResourceFetchDelayData(const ResourceFetchDelayData& from);
  
  inline ResourceFetchDelayData& operator=(const ResourceFetchDelayData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ResourceFetchDelayData& default_instance();
  
  void Swap(ResourceFetchDelayData* other);
  
  // implements Message ----------------------------------------------
  
  ResourceFetchDelayData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResourceFetchDelayData& from);
  void MergeFrom(const ResourceFetchDelayData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .pagespeed.ResourceFetchDelayType type = 1 [default = UNKNOWN_DELAY_TYPE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline pagespeed::ResourceFetchDelayType type() const;
  inline void set_type(pagespeed::ResourceFetchDelayType value);
  
  // repeated .pagespeed.CodeLocation location = 2;
  inline int location_size() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline const ::pagespeed::CodeLocation& location(int index) const;
  inline ::pagespeed::CodeLocation* mutable_location(int index);
  inline ::pagespeed::CodeLocation* add_location();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation >&
      location() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation >*
      mutable_location();
  
  // optional string event_name = 3;
  inline bool has_event_name() const;
  inline void clear_event_name();
  static const int kEventNameFieldNumber = 3;
  inline const ::std::string& event_name() const;
  inline void set_event_name(const ::std::string& value);
  inline void set_event_name(const char* value);
  inline void set_event_name(const char* value, size_t size);
  inline ::std::string* mutable_event_name();
  inline ::std::string* release_event_name();
  
  // optional int32 timeout_msec = 4;
  inline bool has_timeout_msec() const;
  inline void clear_timeout_msec();
  static const int kTimeoutMsecFieldNumber = 4;
  inline ::google::protobuf::int32 timeout_msec() const;
  inline void set_timeout_msec(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:pagespeed.ResourceFetchDelayData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_event_name();
  inline void clear_has_event_name();
  inline void set_has_timeout_msec();
  inline void clear_has_timeout_msec();
  
  ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation > location_;
  int type_;
  ::google::protobuf::int32 timeout_msec_;
  ::std::string* event_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static ResourceFetchDelayData* default_instance_;
};
// -------------------------------------------------------------------

class ResourceFetchDownloadData : public ::google::protobuf::MessageLite {
 public:
  ResourceFetchDownloadData();
  virtual ~ResourceFetchDownloadData();
  
  ResourceFetchDownloadData(const ResourceFetchDownloadData& from);
  
  inline ResourceFetchDownloadData& operator=(const ResourceFetchDownloadData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ResourceFetchDownloadData& default_instance();
  
  void Swap(ResourceFetchDownloadData* other);
  
  // implements Message ----------------------------------------------
  
  ResourceFetchDownloadData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResourceFetchDownloadData& from);
  void MergeFrom(const ResourceFetchDownloadData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string requestor_uri = 1;
  inline bool has_requestor_uri() const;
  inline void clear_requestor_uri();
  static const int kRequestorUriFieldNumber = 1;
  inline const ::std::string& requestor_uri() const;
  inline void set_requestor_uri(const ::std::string& value);
  inline void set_requestor_uri(const char* value);
  inline void set_requestor_uri(const char* value, size_t size);
  inline ::std::string* mutable_requestor_uri();
  inline ::std::string* release_requestor_uri();
  
  // optional .pagespeed.Timestamp start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline const ::pagespeed::Timestamp& start() const;
  inline ::pagespeed::Timestamp* mutable_start();
  inline ::pagespeed::Timestamp* release_start();
  
  // optional .pagespeed.Timestamp finish = 3;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 3;
  inline const ::pagespeed::Timestamp& finish() const;
  inline ::pagespeed::Timestamp* mutable_finish();
  inline ::pagespeed::Timestamp* release_finish();
  
  // @@protoc_insertion_point(class_scope:pagespeed.ResourceFetchDownloadData)
 private:
  inline void set_has_requestor_uri();
  inline void clear_has_requestor_uri();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_finish();
  inline void clear_has_finish();
  
  ::std::string* requestor_uri_;
  ::pagespeed::Timestamp* start_;
  ::pagespeed::Timestamp* finish_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static ResourceFetchDownloadData* default_instance_;
};
// -------------------------------------------------------------------

class ResourceFetchData : public ::google::protobuf::MessageLite {
 public:
  ResourceFetchData();
  virtual ~ResourceFetchData();
  
  ResourceFetchData(const ResourceFetchData& from);
  
  inline ResourceFetchData& operator=(const ResourceFetchData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ResourceFetchData& default_instance();
  
  void Swap(ResourceFetchData* other);
  
  // implements Message ----------------------------------------------
  
  ResourceFetchData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResourceFetchData& from);
  void MergeFrom(const ResourceFetchData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  
  // optional string resource_url = 2;
  inline bool has_resource_url() const;
  inline void clear_resource_url();
  static const int kResourceUrlFieldNumber = 2;
  inline const ::std::string& resource_url() const;
  inline void set_resource_url(const ::std::string& value);
  inline void set_resource_url(const char* value);
  inline void set_resource_url(const char* value, size_t size);
  inline ::std::string* mutable_resource_url();
  inline ::std::string* release_resource_url();
  
  // optional .pagespeed.ResourceDiscoveryType type = 3 [default = UNKNOWN_DISCOVERY_TYPE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline pagespeed::ResourceDiscoveryType type() const;
  inline void set_type(pagespeed::ResourceDiscoveryType value);
  
  // optional .pagespeed.ResourceFetchDownloadData download = 4;
  inline bool has_download() const;
  inline void clear_download();
  static const int kDownloadFieldNumber = 4;
  inline const ::pagespeed::ResourceFetchDownloadData& download() const;
  inline ::pagespeed::ResourceFetchDownloadData* mutable_download();
  inline ::pagespeed::ResourceFetchDownloadData* release_download();
  
  // repeated .pagespeed.CodeLocation location = 5;
  inline int location_size() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 5;
  inline const ::pagespeed::CodeLocation& location(int index) const;
  inline ::pagespeed::CodeLocation* mutable_location(int index);
  inline ::pagespeed::CodeLocation* add_location();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation >&
      location() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation >*
      mutable_location();
  
  // repeated .pagespeed.ResourceFetchDelayData delay = 6;
  inline int delay_size() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 6;
  inline const ::pagespeed::ResourceFetchDelayData& delay(int index) const;
  inline ::pagespeed::ResourceFetchDelayData* mutable_delay(int index);
  inline ::pagespeed::ResourceFetchDelayData* add_delay();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchDelayData >&
      delay() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchDelayData >*
      mutable_delay();
  
  // optional .pagespeed.ResourceFetchDownloadData redirect_download = 7;
  inline bool has_redirect_download() const;
  inline void clear_redirect_download();
  static const int kRedirectDownloadFieldNumber = 7;
  inline const ::pagespeed::ResourceFetchDownloadData& redirect_download() const;
  inline ::pagespeed::ResourceFetchDownloadData* mutable_redirect_download();
  inline ::pagespeed::ResourceFetchDownloadData* release_redirect_download();
  
  // @@protoc_insertion_point(class_scope:pagespeed.ResourceFetchData)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_resource_url();
  inline void clear_has_resource_url();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_download();
  inline void clear_has_download();
  inline void set_has_redirect_download();
  inline void clear_has_redirect_download();
  
  ::std::string* uri_;
  ::std::string* resource_url_;
  ::pagespeed::ResourceFetchDownloadData* download_;
  ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation > location_;
  ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchDelayData > delay_;
  ::pagespeed::ResourceFetchDownloadData* redirect_download_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static ResourceFetchData* default_instance_;
};
// -------------------------------------------------------------------

class ResourceEvaluationConstraintData : public ::google::protobuf::MessageLite {
 public:
  ResourceEvaluationConstraintData();
  virtual ~ResourceEvaluationConstraintData();
  
  ResourceEvaluationConstraintData(const ResourceEvaluationConstraintData& from);
  
  inline ResourceEvaluationConstraintData& operator=(const ResourceEvaluationConstraintData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ResourceEvaluationConstraintData& default_instance();
  
  void Swap(ResourceEvaluationConstraintData* other);
  
  // implements Message ----------------------------------------------
  
  ResourceEvaluationConstraintData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResourceEvaluationConstraintData& from);
  void MergeFrom(const ResourceEvaluationConstraintData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .pagespeed.EvaluationConstraintType type = 1 [default = UNKNOWN_CONSTRAINT_TYPE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline pagespeed::EvaluationConstraintType type() const;
  inline void set_type(pagespeed::EvaluationConstraintType value);
  
  // optional string predecessor_uri = 2;
  inline bool has_predecessor_uri() const;
  inline void clear_predecessor_uri();
  static const int kPredecessorUriFieldNumber = 2;
  inline const ::std::string& predecessor_uri() const;
  inline void set_predecessor_uri(const ::std::string& value);
  inline void set_predecessor_uri(const char* value);
  inline void set_predecessor_uri(const char* value, size_t size);
  inline ::std::string* mutable_predecessor_uri();
  inline ::std::string* release_predecessor_uri();
  
  // @@protoc_insertion_point(class_scope:pagespeed.ResourceEvaluationConstraintData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_predecessor_uri();
  inline void clear_has_predecessor_uri();
  
  ::std::string* predecessor_uri_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static ResourceEvaluationConstraintData* default_instance_;
};
// -------------------------------------------------------------------

class ResourceEvaluationData : public ::google::protobuf::MessageLite {
 public:
  ResourceEvaluationData();
  virtual ~ResourceEvaluationData();
  
  ResourceEvaluationData(const ResourceEvaluationData& from);
  
  inline ResourceEvaluationData& operator=(const ResourceEvaluationData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ResourceEvaluationData& default_instance();
  
  void Swap(ResourceEvaluationData* other);
  
  // implements Message ----------------------------------------------
  
  ResourceEvaluationData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResourceEvaluationData& from);
  void MergeFrom(const ResourceEvaluationData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  
  // optional string resource_url = 2;
  inline bool has_resource_url() const;
  inline void clear_resource_url();
  static const int kResourceUrlFieldNumber = 2;
  inline const ::std::string& resource_url() const;
  inline void set_resource_url(const ::std::string& value);
  inline void set_resource_url(const char* value);
  inline void set_resource_url(const char* value, size_t size);
  inline ::std::string* mutable_resource_url();
  inline ::std::string* release_resource_url();
  
  // optional string fetch_uri = 3;
  inline bool has_fetch_uri() const;
  inline void clear_fetch_uri();
  static const int kFetchUriFieldNumber = 3;
  inline const ::std::string& fetch_uri() const;
  inline void set_fetch_uri(const ::std::string& value);
  inline void set_fetch_uri(const char* value);
  inline void set_fetch_uri(const char* value, size_t size);
  inline ::std::string* mutable_fetch_uri();
  inline ::std::string* release_fetch_uri();
  
  // optional .pagespeed.EvaluationType type = 4 [default = UNKNOWN_EVALUATION_TYPE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline pagespeed::EvaluationType type() const;
  inline void set_type(pagespeed::EvaluationType value);
  
  // repeated .pagespeed.ResourceEvaluationConstraintData constraints = 5;
  inline int constraints_size() const;
  inline void clear_constraints();
  static const int kConstraintsFieldNumber = 5;
  inline const ::pagespeed::ResourceEvaluationConstraintData& constraints(int index) const;
  inline ::pagespeed::ResourceEvaluationConstraintData* mutable_constraints(int index);
  inline ::pagespeed::ResourceEvaluationConstraintData* add_constraints();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationConstraintData >&
      constraints() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationConstraintData >*
      mutable_constraints();
  
  // optional int32 block_start_line = 6 [default = -1];
  inline bool has_block_start_line() const;
  inline void clear_block_start_line();
  static const int kBlockStartLineFieldNumber = 6;
  inline ::google::protobuf::int32 block_start_line() const;
  inline void set_block_start_line(::google::protobuf::int32 value);
  
  // optional int32 block_end_line = 7 [default = -1];
  inline bool has_block_end_line() const;
  inline void clear_block_end_line();
  static const int kBlockEndLineFieldNumber = 7;
  inline ::google::protobuf::int32 block_end_line() const;
  inline void set_block_end_line(::google::protobuf::int32 value);
  
  // optional .pagespeed.Timestamp start = 8;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 8;
  inline const ::pagespeed::Timestamp& start() const;
  inline ::pagespeed::Timestamp* mutable_start();
  inline ::pagespeed::Timestamp* release_start();
  
  // optional .pagespeed.Timestamp finish = 9;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 9;
  inline const ::pagespeed::Timestamp& finish() const;
  inline ::pagespeed::Timestamp* mutable_finish();
  inline ::pagespeed::Timestamp* release_finish();
  
  // optional bool is_async = 10;
  inline bool has_is_async() const;
  inline void clear_is_async();
  static const int kIsAsyncFieldNumber = 10;
  inline bool is_async() const;
  inline void set_is_async(bool value);
  
  // optional bool is_defer = 11;
  inline bool has_is_defer() const;
  inline void clear_is_defer();
  static const int kIsDeferFieldNumber = 11;
  inline bool is_defer() const;
  inline void set_is_defer(bool value);
  
  // optional bool is_matching_media_type = 12;
  inline bool has_is_matching_media_type() const;
  inline void clear_is_matching_media_type();
  static const int kIsMatchingMediaTypeFieldNumber = 12;
  inline bool is_matching_media_type() const;
  inline void set_is_matching_media_type(bool value);
  
  // @@protoc_insertion_point(class_scope:pagespeed.ResourceEvaluationData)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_resource_url();
  inline void clear_has_resource_url();
  inline void set_has_fetch_uri();
  inline void clear_has_fetch_uri();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_block_start_line();
  inline void clear_has_block_start_line();
  inline void set_has_block_end_line();
  inline void clear_has_block_end_line();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_finish();
  inline void clear_has_finish();
  inline void set_has_is_async();
  inline void clear_has_is_async();
  inline void set_has_is_defer();
  inline void clear_has_is_defer();
  inline void set_has_is_matching_media_type();
  inline void clear_has_is_matching_media_type();
  
  ::std::string* uri_;
  ::std::string* resource_url_;
  ::std::string* fetch_uri_;
  ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationConstraintData > constraints_;
  int type_;
  ::google::protobuf::int32 block_start_line_;
  ::pagespeed::Timestamp* start_;
  ::pagespeed::Timestamp* finish_;
  ::google::protobuf::int32 block_end_line_;
  bool is_async_;
  bool is_defer_;
  bool is_matching_media_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static ResourceEvaluationData* default_instance_;
};
// -------------------------------------------------------------------

class HeaderData : public ::google::protobuf::MessageLite {
 public:
  HeaderData();
  virtual ~HeaderData();
  
  HeaderData(const HeaderData& from);
  
  inline HeaderData& operator=(const HeaderData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const HeaderData& default_instance();
  
  void Swap(HeaderData* other);
  
  // implements Message ----------------------------------------------
  
  HeaderData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const HeaderData& from);
  void MergeFrom(const HeaderData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:pagespeed.HeaderData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static HeaderData* default_instance_;
};
// -------------------------------------------------------------------

class ResourceData : public ::google::protobuf::MessageLite {
 public:
  ResourceData();
  virtual ~ResourceData();
  
  ResourceData(const ResourceData& from);
  
  inline ResourceData& operator=(const ResourceData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ResourceData& default_instance();
  
  void Swap(ResourceData* other);
  
  // implements Message ----------------------------------------------
  
  ResourceData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResourceData& from);
  void MergeFrom(const ResourceData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string request_url = 1;
  inline bool has_request_url() const;
  inline void clear_request_url();
  static const int kRequestUrlFieldNumber = 1;
  inline const ::std::string& request_url() const;
  inline void set_request_url(const ::std::string& value);
  inline void set_request_url(const char* value);
  inline void set_request_url(const char* value, size_t size);
  inline ::std::string* mutable_request_url();
  inline ::std::string* release_request_url();
  
  // optional string request_method = 2;
  inline bool has_request_method() const;
  inline void clear_request_method();
  static const int kRequestMethodFieldNumber = 2;
  inline const ::std::string& request_method() const;
  inline void set_request_method(const ::std::string& value);
  inline void set_request_method(const char* value);
  inline void set_request_method(const char* value, size_t size);
  inline ::std::string* mutable_request_method();
  inline ::std::string* release_request_method();
  
  // repeated .pagespeed.HeaderData request_headers = 3;
  inline int request_headers_size() const;
  inline void clear_request_headers();
  static const int kRequestHeadersFieldNumber = 3;
  inline const ::pagespeed::HeaderData& request_headers(int index) const;
  inline ::pagespeed::HeaderData* mutable_request_headers(int index);
  inline ::pagespeed::HeaderData* add_request_headers();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData >&
      request_headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData >*
      mutable_request_headers();
  
  // optional int32 request_body_size = 4;
  inline bool has_request_body_size() const;
  inline void clear_request_body_size();
  static const int kRequestBodySizeFieldNumber = 4;
  inline ::google::protobuf::int32 request_body_size() const;
  inline void set_request_body_size(::google::protobuf::int32 value);
  
  // optional int32 status_code = 5;
  inline bool has_status_code() const;
  inline void clear_status_code();
  static const int kStatusCodeFieldNumber = 5;
  inline ::google::protobuf::int32 status_code() const;
  inline void set_status_code(::google::protobuf::int32 value);
  
  // optional .pagespeed.Protocol response_protocol = 6 [default = UNKNOWN_PROTOCOL];
  inline bool has_response_protocol() const;
  inline void clear_response_protocol();
  static const int kResponseProtocolFieldNumber = 6;
  inline pagespeed::Protocol response_protocol() const;
  inline void set_response_protocol(pagespeed::Protocol value);
  
  // repeated .pagespeed.HeaderData response_headers = 7;
  inline int response_headers_size() const;
  inline void clear_response_headers();
  static const int kResponseHeadersFieldNumber = 7;
  inline const ::pagespeed::HeaderData& response_headers(int index) const;
  inline ::pagespeed::HeaderData* mutable_response_headers(int index);
  inline ::pagespeed::HeaderData* add_response_headers();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData >&
      response_headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData >*
      mutable_response_headers();
  
  // optional int32 response_body_size = 8;
  inline bool has_response_body_size() const;
  inline void clear_response_body_size();
  static const int kResponseBodySizeFieldNumber = 8;
  inline ::google::protobuf::int32 response_body_size() const;
  inline void set_response_body_size(::google::protobuf::int32 value);
  
  // optional .pagespeed.ResourceType resource_type = 9 [default = OTHER];
  inline bool has_resource_type() const;
  inline void clear_resource_type();
  static const int kResourceTypeFieldNumber = 9;
  inline pagespeed::ResourceType resource_type() const;
  inline void set_resource_type(pagespeed::ResourceType value);
  
  // optional string mime_type = 10;
  inline bool has_mime_type() const;
  inline void clear_mime_type();
  static const int kMimeTypeFieldNumber = 10;
  inline const ::std::string& mime_type() const;
  inline void set_mime_type(const ::std::string& value);
  inline void set_mime_type(const char* value);
  inline void set_mime_type(const char* value, size_t size);
  inline ::std::string* mutable_mime_type();
  inline ::std::string* release_mime_type();
  
  // @@protoc_insertion_point(class_scope:pagespeed.ResourceData)
 private:
  inline void set_has_request_url();
  inline void clear_has_request_url();
  inline void set_has_request_method();
  inline void clear_has_request_method();
  inline void set_has_request_body_size();
  inline void clear_has_request_body_size();
  inline void set_has_status_code();
  inline void clear_has_status_code();
  inline void set_has_response_protocol();
  inline void clear_has_response_protocol();
  inline void set_has_response_body_size();
  inline void clear_has_response_body_size();
  inline void set_has_resource_type();
  inline void clear_has_resource_type();
  inline void set_has_mime_type();
  inline void clear_has_mime_type();
  
  ::std::string* request_url_;
  ::std::string* request_method_;
  ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData > request_headers_;
  ::google::protobuf::int32 request_body_size_;
  ::google::protobuf::int32 status_code_;
  ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData > response_headers_;
  int response_protocol_;
  ::google::protobuf::int32 response_body_size_;
  ::std::string* mime_type_;
  int resource_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static ResourceData* default_instance_;
};
// -------------------------------------------------------------------

class BrowsingContextData : public ::google::protobuf::MessageLite {
 public:
  BrowsingContextData();
  virtual ~BrowsingContextData();
  
  BrowsingContextData(const BrowsingContextData& from);
  
  inline BrowsingContextData& operator=(const BrowsingContextData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BrowsingContextData& default_instance();
  
  void Swap(BrowsingContextData* other);
  
  // implements Message ----------------------------------------------
  
  BrowsingContextData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BrowsingContextData& from);
  void MergeFrom(const BrowsingContextData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  
  // optional string document_resource_url = 2;
  inline bool has_document_resource_url() const;
  inline void clear_document_resource_url();
  static const int kDocumentResourceUrlFieldNumber = 2;
  inline const ::std::string& document_resource_url() const;
  inline void set_document_resource_url(const ::std::string& value);
  inline void set_document_resource_url(const char* value);
  inline void set_document_resource_url(const char* value, size_t size);
  inline ::std::string* mutable_document_resource_url();
  inline ::std::string* release_document_resource_url();
  
  // repeated string resource_urls = 3;
  inline int resource_urls_size() const;
  inline void clear_resource_urls();
  static const int kResourceUrlsFieldNumber = 3;
  inline const ::std::string& resource_urls(int index) const;
  inline ::std::string* mutable_resource_urls(int index);
  inline void set_resource_urls(int index, const ::std::string& value);
  inline void set_resource_urls(int index, const char* value);
  inline void set_resource_urls(int index, const char* value, size_t size);
  inline ::std::string* add_resource_urls();
  inline void add_resource_urls(const ::std::string& value);
  inline void add_resource_urls(const char* value);
  inline void add_resource_urls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& resource_urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resource_urls();
  
  // repeated .pagespeed.ResourceFetchData fetch = 4;
  inline int fetch_size() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 4;
  inline const ::pagespeed::ResourceFetchData& fetch(int index) const;
  inline ::pagespeed::ResourceFetchData* mutable_fetch(int index);
  inline ::pagespeed::ResourceFetchData* add_fetch();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchData >&
      fetch() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchData >*
      mutable_fetch();
  
  // repeated .pagespeed.ResourceEvaluationData evaluation = 5;
  inline int evaluation_size() const;
  inline void clear_evaluation();
  static const int kEvaluationFieldNumber = 5;
  inline const ::pagespeed::ResourceEvaluationData& evaluation(int index) const;
  inline ::pagespeed::ResourceEvaluationData* mutable_evaluation(int index);
  inline ::pagespeed::ResourceEvaluationData* add_evaluation();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationData >&
      evaluation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationData >*
      mutable_evaluation();
  
  // repeated .pagespeed.BrowsingContextData nested_context = 6;
  inline int nested_context_size() const;
  inline void clear_nested_context();
  static const int kNestedContextFieldNumber = 6;
  inline const ::pagespeed::BrowsingContextData& nested_context(int index) const;
  inline ::pagespeed::BrowsingContextData* mutable_nested_context(int index);
  inline ::pagespeed::BrowsingContextData* add_nested_context();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::BrowsingContextData >&
      nested_context() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::BrowsingContextData >*
      mutable_nested_context();
  
  // optional .pagespeed.Timestamp event_dom_content = 7;
  inline bool has_event_dom_content() const;
  inline void clear_event_dom_content();
  static const int kEventDomContentFieldNumber = 7;
  inline const ::pagespeed::Timestamp& event_dom_content() const;
  inline ::pagespeed::Timestamp* mutable_event_dom_content();
  inline ::pagespeed::Timestamp* release_event_dom_content();
  
  // optional .pagespeed.Timestamp event_on_load = 8;
  inline bool has_event_on_load() const;
  inline void clear_event_on_load();
  static const int kEventOnLoadFieldNumber = 8;
  inline const ::pagespeed::Timestamp& event_on_load() const;
  inline ::pagespeed::Timestamp* mutable_event_on_load();
  inline ::pagespeed::Timestamp* release_event_on_load();
  
  // @@protoc_insertion_point(class_scope:pagespeed.BrowsingContextData)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_document_resource_url();
  inline void clear_has_document_resource_url();
  inline void set_has_event_dom_content();
  inline void clear_has_event_dom_content();
  inline void set_has_event_on_load();
  inline void clear_has_event_on_load();
  
  ::std::string* uri_;
  ::std::string* document_resource_url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resource_urls_;
  ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchData > fetch_;
  ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationData > evaluation_;
  ::google::protobuf::RepeatedPtrField< ::pagespeed::BrowsingContextData > nested_context_;
  ::pagespeed::Timestamp* event_dom_content_;
  ::pagespeed::Timestamp* event_on_load_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static BrowsingContextData* default_instance_;
};
// -------------------------------------------------------------------

class PageResourceData : public ::google::protobuf::MessageLite {
 public:
  PageResourceData();
  virtual ~PageResourceData();
  
  PageResourceData(const PageResourceData& from);
  
  inline PageResourceData& operator=(const PageResourceData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PageResourceData& default_instance();
  
  void Swap(PageResourceData* other);
  
  // implements Message ----------------------------------------------
  
  PageResourceData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PageResourceData& from);
  void MergeFrom(const PageResourceData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string primary_resource_url = 1;
  inline bool has_primary_resource_url() const;
  inline void clear_primary_resource_url();
  static const int kPrimaryResourceUrlFieldNumber = 1;
  inline const ::std::string& primary_resource_url() const;
  inline void set_primary_resource_url(const ::std::string& value);
  inline void set_primary_resource_url(const char* value);
  inline void set_primary_resource_url(const char* value, size_t size);
  inline ::std::string* mutable_primary_resource_url();
  inline ::std::string* release_primary_resource_url();
  
  // optional .pagespeed.BrowsingContextData top_level_context = 2;
  inline bool has_top_level_context() const;
  inline void clear_top_level_context();
  static const int kTopLevelContextFieldNumber = 2;
  inline const ::pagespeed::BrowsingContextData& top_level_context() const;
  inline ::pagespeed::BrowsingContextData* mutable_top_level_context();
  inline ::pagespeed::BrowsingContextData* release_top_level_context();
  
  // repeated .pagespeed.ResourceData resources = 3;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 3;
  inline const ::pagespeed::ResourceData& resources(int index) const;
  inline ::pagespeed::ResourceData* mutable_resources(int index);
  inline ::pagespeed::ResourceData* add_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceData >&
      resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceData >*
      mutable_resources();
  
  // @@protoc_insertion_point(class_scope:pagespeed.PageResourceData)
 private:
  inline void set_has_primary_resource_url();
  inline void clear_has_primary_resource_url();
  inline void set_has_top_level_context();
  inline void clear_has_top_level_context();
  
  ::std::string* primary_resource_url_;
  ::pagespeed::BrowsingContextData* top_level_context_;
  ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceData > resources_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();
  
  void InitAsDefaultInstance();
  static PageResourceData* default_instance_;
};
// ===================================================================


// ===================================================================

// CodeLocation

// required string url = 1;
inline bool CodeLocation::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CodeLocation::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CodeLocation::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CodeLocation::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& CodeLocation::url() const {
  return *url_;
}
inline void CodeLocation::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CodeLocation::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CodeLocation::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CodeLocation::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* CodeLocation::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 line = 2;
inline bool CodeLocation::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CodeLocation::set_has_line() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CodeLocation::clear_has_line() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CodeLocation::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 CodeLocation::line() const {
  return line_;
}
inline void CodeLocation::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}

// optional int32 column = 3;
inline bool CodeLocation::has_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CodeLocation::set_has_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CodeLocation::clear_has_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CodeLocation::clear_column() {
  column_ = 0;
  clear_has_column();
}
inline ::google::protobuf::int32 CodeLocation::column() const {
  return column_;
}
inline void CodeLocation::set_column(::google::protobuf::int32 value) {
  set_has_column();
  column_ = value;
}

// optional string function_name = 4;
inline bool CodeLocation::has_function_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CodeLocation::set_has_function_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CodeLocation::clear_has_function_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CodeLocation::clear_function_name() {
  if (function_name_ != &::google::protobuf::internal::kEmptyString) {
    function_name_->clear();
  }
  clear_has_function_name();
}
inline const ::std::string& CodeLocation::function_name() const {
  return *function_name_;
}
inline void CodeLocation::set_function_name(const ::std::string& value) {
  set_has_function_name();
  if (function_name_ == &::google::protobuf::internal::kEmptyString) {
    function_name_ = new ::std::string;
  }
  function_name_->assign(value);
}
inline void CodeLocation::set_function_name(const char* value) {
  set_has_function_name();
  if (function_name_ == &::google::protobuf::internal::kEmptyString) {
    function_name_ = new ::std::string;
  }
  function_name_->assign(value);
}
inline void CodeLocation::set_function_name(const char* value, size_t size) {
  set_has_function_name();
  if (function_name_ == &::google::protobuf::internal::kEmptyString) {
    function_name_ = new ::std::string;
  }
  function_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CodeLocation::mutable_function_name() {
  set_has_function_name();
  if (function_name_ == &::google::protobuf::internal::kEmptyString) {
    function_name_ = new ::std::string;
  }
  return function_name_;
}
inline ::std::string* CodeLocation::release_function_name() {
  clear_has_function_name();
  if (function_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = function_name_;
    function_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Timestamp

// optional int64 msec = 1;
inline bool Timestamp::has_msec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::set_has_msec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Timestamp::clear_has_msec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Timestamp::clear_msec() {
  msec_ = GOOGLE_LONGLONG(0);
  clear_has_msec();
}
inline ::google::protobuf::int64 Timestamp::msec() const {
  return msec_;
}
inline void Timestamp::set_msec(::google::protobuf::int64 value) {
  set_has_msec();
  msec_ = value;
}

// optional int64 tick = 2;
inline bool Timestamp::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Timestamp::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Timestamp::clear_tick() {
  tick_ = GOOGLE_LONGLONG(0);
  clear_has_tick();
}
inline ::google::protobuf::int64 Timestamp::tick() const {
  return tick_;
}
inline void Timestamp::set_tick(::google::protobuf::int64 value) {
  set_has_tick();
  tick_ = value;
}

// -------------------------------------------------------------------

// ResourceFetchDelayData

// optional .pagespeed.ResourceFetchDelayType type = 1 [default = UNKNOWN_DELAY_TYPE];
inline bool ResourceFetchDelayData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceFetchDelayData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceFetchDelayData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceFetchDelayData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline pagespeed::ResourceFetchDelayType ResourceFetchDelayData::type() const {
  return static_cast< pagespeed::ResourceFetchDelayType >(type_);
}
inline void ResourceFetchDelayData::set_type(pagespeed::ResourceFetchDelayType value) {
  GOOGLE_DCHECK(pagespeed::ResourceFetchDelayType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .pagespeed.CodeLocation location = 2;
inline int ResourceFetchDelayData::location_size() const {
  return location_.size();
}
inline void ResourceFetchDelayData::clear_location() {
  location_.Clear();
}
inline const ::pagespeed::CodeLocation& ResourceFetchDelayData::location(int index) const {
  return location_.Get(index);
}
inline ::pagespeed::CodeLocation* ResourceFetchDelayData::mutable_location(int index) {
  return location_.Mutable(index);
}
inline ::pagespeed::CodeLocation* ResourceFetchDelayData::add_location() {
  return location_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation >&
ResourceFetchDelayData::location() const {
  return location_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation >*
ResourceFetchDelayData::mutable_location() {
  return &location_;
}

// optional string event_name = 3;
inline bool ResourceFetchDelayData::has_event_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceFetchDelayData::set_has_event_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceFetchDelayData::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceFetchDelayData::clear_event_name() {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    event_name_->clear();
  }
  clear_has_event_name();
}
inline const ::std::string& ResourceFetchDelayData::event_name() const {
  return *event_name_;
}
inline void ResourceFetchDelayData::set_event_name(const ::std::string& value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void ResourceFetchDelayData::set_event_name(const char* value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void ResourceFetchDelayData::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceFetchDelayData::mutable_event_name() {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  return event_name_;
}
inline ::std::string* ResourceFetchDelayData::release_event_name() {
  clear_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_name_;
    event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 timeout_msec = 4;
inline bool ResourceFetchDelayData::has_timeout_msec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResourceFetchDelayData::set_has_timeout_msec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResourceFetchDelayData::clear_has_timeout_msec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResourceFetchDelayData::clear_timeout_msec() {
  timeout_msec_ = 0;
  clear_has_timeout_msec();
}
inline ::google::protobuf::int32 ResourceFetchDelayData::timeout_msec() const {
  return timeout_msec_;
}
inline void ResourceFetchDelayData::set_timeout_msec(::google::protobuf::int32 value) {
  set_has_timeout_msec();
  timeout_msec_ = value;
}

// -------------------------------------------------------------------

// ResourceFetchDownloadData

// optional string requestor_uri = 1;
inline bool ResourceFetchDownloadData::has_requestor_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceFetchDownloadData::set_has_requestor_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceFetchDownloadData::clear_has_requestor_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceFetchDownloadData::clear_requestor_uri() {
  if (requestor_uri_ != &::google::protobuf::internal::kEmptyString) {
    requestor_uri_->clear();
  }
  clear_has_requestor_uri();
}
inline const ::std::string& ResourceFetchDownloadData::requestor_uri() const {
  return *requestor_uri_;
}
inline void ResourceFetchDownloadData::set_requestor_uri(const ::std::string& value) {
  set_has_requestor_uri();
  if (requestor_uri_ == &::google::protobuf::internal::kEmptyString) {
    requestor_uri_ = new ::std::string;
  }
  requestor_uri_->assign(value);
}
inline void ResourceFetchDownloadData::set_requestor_uri(const char* value) {
  set_has_requestor_uri();
  if (requestor_uri_ == &::google::protobuf::internal::kEmptyString) {
    requestor_uri_ = new ::std::string;
  }
  requestor_uri_->assign(value);
}
inline void ResourceFetchDownloadData::set_requestor_uri(const char* value, size_t size) {
  set_has_requestor_uri();
  if (requestor_uri_ == &::google::protobuf::internal::kEmptyString) {
    requestor_uri_ = new ::std::string;
  }
  requestor_uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceFetchDownloadData::mutable_requestor_uri() {
  set_has_requestor_uri();
  if (requestor_uri_ == &::google::protobuf::internal::kEmptyString) {
    requestor_uri_ = new ::std::string;
  }
  return requestor_uri_;
}
inline ::std::string* ResourceFetchDownloadData::release_requestor_uri() {
  clear_has_requestor_uri();
  if (requestor_uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestor_uri_;
    requestor_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .pagespeed.Timestamp start = 2;
inline bool ResourceFetchDownloadData::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceFetchDownloadData::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceFetchDownloadData::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceFetchDownloadData::clear_start() {
  if (start_ != NULL) start_->::pagespeed::Timestamp::Clear();
  clear_has_start();
}
inline const ::pagespeed::Timestamp& ResourceFetchDownloadData::start() const {
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::pagespeed::Timestamp* ResourceFetchDownloadData::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::pagespeed::Timestamp;
  return start_;
}
inline ::pagespeed::Timestamp* ResourceFetchDownloadData::release_start() {
  clear_has_start();
  ::pagespeed::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}

// optional .pagespeed.Timestamp finish = 3;
inline bool ResourceFetchDownloadData::has_finish() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceFetchDownloadData::set_has_finish() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceFetchDownloadData::clear_has_finish() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceFetchDownloadData::clear_finish() {
  if (finish_ != NULL) finish_->::pagespeed::Timestamp::Clear();
  clear_has_finish();
}
inline const ::pagespeed::Timestamp& ResourceFetchDownloadData::finish() const {
  return finish_ != NULL ? *finish_ : *default_instance_->finish_;
}
inline ::pagespeed::Timestamp* ResourceFetchDownloadData::mutable_finish() {
  set_has_finish();
  if (finish_ == NULL) finish_ = new ::pagespeed::Timestamp;
  return finish_;
}
inline ::pagespeed::Timestamp* ResourceFetchDownloadData::release_finish() {
  clear_has_finish();
  ::pagespeed::Timestamp* temp = finish_;
  finish_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ResourceFetchData

// optional string uri = 1;
inline bool ResourceFetchData::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceFetchData::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceFetchData::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceFetchData::clear_uri() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& ResourceFetchData::uri() const {
  return *uri_;
}
inline void ResourceFetchData::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void ResourceFetchData::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void ResourceFetchData::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceFetchData::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  return uri_;
}
inline ::std::string* ResourceFetchData::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string resource_url = 2;
inline bool ResourceFetchData::has_resource_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceFetchData::set_has_resource_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceFetchData::clear_has_resource_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceFetchData::clear_resource_url() {
  if (resource_url_ != &::google::protobuf::internal::kEmptyString) {
    resource_url_->clear();
  }
  clear_has_resource_url();
}
inline const ::std::string& ResourceFetchData::resource_url() const {
  return *resource_url_;
}
inline void ResourceFetchData::set_resource_url(const ::std::string& value) {
  set_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    resource_url_ = new ::std::string;
  }
  resource_url_->assign(value);
}
inline void ResourceFetchData::set_resource_url(const char* value) {
  set_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    resource_url_ = new ::std::string;
  }
  resource_url_->assign(value);
}
inline void ResourceFetchData::set_resource_url(const char* value, size_t size) {
  set_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    resource_url_ = new ::std::string;
  }
  resource_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceFetchData::mutable_resource_url() {
  set_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    resource_url_ = new ::std::string;
  }
  return resource_url_;
}
inline ::std::string* ResourceFetchData::release_resource_url() {
  clear_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resource_url_;
    resource_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .pagespeed.ResourceDiscoveryType type = 3 [default = UNKNOWN_DISCOVERY_TYPE];
inline bool ResourceFetchData::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceFetchData::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceFetchData::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceFetchData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline pagespeed::ResourceDiscoveryType ResourceFetchData::type() const {
  return static_cast< pagespeed::ResourceDiscoveryType >(type_);
}
inline void ResourceFetchData::set_type(pagespeed::ResourceDiscoveryType value) {
  GOOGLE_DCHECK(pagespeed::ResourceDiscoveryType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .pagespeed.ResourceFetchDownloadData download = 4;
inline bool ResourceFetchData::has_download() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResourceFetchData::set_has_download() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResourceFetchData::clear_has_download() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResourceFetchData::clear_download() {
  if (download_ != NULL) download_->::pagespeed::ResourceFetchDownloadData::Clear();
  clear_has_download();
}
inline const ::pagespeed::ResourceFetchDownloadData& ResourceFetchData::download() const {
  return download_ != NULL ? *download_ : *default_instance_->download_;
}
inline ::pagespeed::ResourceFetchDownloadData* ResourceFetchData::mutable_download() {
  set_has_download();
  if (download_ == NULL) download_ = new ::pagespeed::ResourceFetchDownloadData;
  return download_;
}
inline ::pagespeed::ResourceFetchDownloadData* ResourceFetchData::release_download() {
  clear_has_download();
  ::pagespeed::ResourceFetchDownloadData* temp = download_;
  download_ = NULL;
  return temp;
}

// repeated .pagespeed.CodeLocation location = 5;
inline int ResourceFetchData::location_size() const {
  return location_.size();
}
inline void ResourceFetchData::clear_location() {
  location_.Clear();
}
inline const ::pagespeed::CodeLocation& ResourceFetchData::location(int index) const {
  return location_.Get(index);
}
inline ::pagespeed::CodeLocation* ResourceFetchData::mutable_location(int index) {
  return location_.Mutable(index);
}
inline ::pagespeed::CodeLocation* ResourceFetchData::add_location() {
  return location_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation >&
ResourceFetchData::location() const {
  return location_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::CodeLocation >*
ResourceFetchData::mutable_location() {
  return &location_;
}

// repeated .pagespeed.ResourceFetchDelayData delay = 6;
inline int ResourceFetchData::delay_size() const {
  return delay_.size();
}
inline void ResourceFetchData::clear_delay() {
  delay_.Clear();
}
inline const ::pagespeed::ResourceFetchDelayData& ResourceFetchData::delay(int index) const {
  return delay_.Get(index);
}
inline ::pagespeed::ResourceFetchDelayData* ResourceFetchData::mutable_delay(int index) {
  return delay_.Mutable(index);
}
inline ::pagespeed::ResourceFetchDelayData* ResourceFetchData::add_delay() {
  return delay_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchDelayData >&
ResourceFetchData::delay() const {
  return delay_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchDelayData >*
ResourceFetchData::mutable_delay() {
  return &delay_;
}

// optional .pagespeed.ResourceFetchDownloadData redirect_download = 7;
inline bool ResourceFetchData::has_redirect_download() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResourceFetchData::set_has_redirect_download() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResourceFetchData::clear_has_redirect_download() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResourceFetchData::clear_redirect_download() {
  if (redirect_download_ != NULL) redirect_download_->::pagespeed::ResourceFetchDownloadData::Clear();
  clear_has_redirect_download();
}
inline const ::pagespeed::ResourceFetchDownloadData& ResourceFetchData::redirect_download() const {
  return redirect_download_ != NULL ? *redirect_download_ : *default_instance_->redirect_download_;
}
inline ::pagespeed::ResourceFetchDownloadData* ResourceFetchData::mutable_redirect_download() {
  set_has_redirect_download();
  if (redirect_download_ == NULL) redirect_download_ = new ::pagespeed::ResourceFetchDownloadData;
  return redirect_download_;
}
inline ::pagespeed::ResourceFetchDownloadData* ResourceFetchData::release_redirect_download() {
  clear_has_redirect_download();
  ::pagespeed::ResourceFetchDownloadData* temp = redirect_download_;
  redirect_download_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ResourceEvaluationConstraintData

// optional .pagespeed.EvaluationConstraintType type = 1 [default = UNKNOWN_CONSTRAINT_TYPE];
inline bool ResourceEvaluationConstraintData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceEvaluationConstraintData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceEvaluationConstraintData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceEvaluationConstraintData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline pagespeed::EvaluationConstraintType ResourceEvaluationConstraintData::type() const {
  return static_cast< pagespeed::EvaluationConstraintType >(type_);
}
inline void ResourceEvaluationConstraintData::set_type(pagespeed::EvaluationConstraintType value) {
  GOOGLE_DCHECK(pagespeed::EvaluationConstraintType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string predecessor_uri = 2;
inline bool ResourceEvaluationConstraintData::has_predecessor_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceEvaluationConstraintData::set_has_predecessor_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceEvaluationConstraintData::clear_has_predecessor_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceEvaluationConstraintData::clear_predecessor_uri() {
  if (predecessor_uri_ != &::google::protobuf::internal::kEmptyString) {
    predecessor_uri_->clear();
  }
  clear_has_predecessor_uri();
}
inline const ::std::string& ResourceEvaluationConstraintData::predecessor_uri() const {
  return *predecessor_uri_;
}
inline void ResourceEvaluationConstraintData::set_predecessor_uri(const ::std::string& value) {
  set_has_predecessor_uri();
  if (predecessor_uri_ == &::google::protobuf::internal::kEmptyString) {
    predecessor_uri_ = new ::std::string;
  }
  predecessor_uri_->assign(value);
}
inline void ResourceEvaluationConstraintData::set_predecessor_uri(const char* value) {
  set_has_predecessor_uri();
  if (predecessor_uri_ == &::google::protobuf::internal::kEmptyString) {
    predecessor_uri_ = new ::std::string;
  }
  predecessor_uri_->assign(value);
}
inline void ResourceEvaluationConstraintData::set_predecessor_uri(const char* value, size_t size) {
  set_has_predecessor_uri();
  if (predecessor_uri_ == &::google::protobuf::internal::kEmptyString) {
    predecessor_uri_ = new ::std::string;
  }
  predecessor_uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceEvaluationConstraintData::mutable_predecessor_uri() {
  set_has_predecessor_uri();
  if (predecessor_uri_ == &::google::protobuf::internal::kEmptyString) {
    predecessor_uri_ = new ::std::string;
  }
  return predecessor_uri_;
}
inline ::std::string* ResourceEvaluationConstraintData::release_predecessor_uri() {
  clear_has_predecessor_uri();
  if (predecessor_uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = predecessor_uri_;
    predecessor_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResourceEvaluationData

// optional string uri = 1;
inline bool ResourceEvaluationData::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceEvaluationData::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceEvaluationData::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceEvaluationData::clear_uri() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& ResourceEvaluationData::uri() const {
  return *uri_;
}
inline void ResourceEvaluationData::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void ResourceEvaluationData::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void ResourceEvaluationData::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceEvaluationData::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  return uri_;
}
inline ::std::string* ResourceEvaluationData::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string resource_url = 2;
inline bool ResourceEvaluationData::has_resource_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceEvaluationData::set_has_resource_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceEvaluationData::clear_has_resource_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceEvaluationData::clear_resource_url() {
  if (resource_url_ != &::google::protobuf::internal::kEmptyString) {
    resource_url_->clear();
  }
  clear_has_resource_url();
}
inline const ::std::string& ResourceEvaluationData::resource_url() const {
  return *resource_url_;
}
inline void ResourceEvaluationData::set_resource_url(const ::std::string& value) {
  set_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    resource_url_ = new ::std::string;
  }
  resource_url_->assign(value);
}
inline void ResourceEvaluationData::set_resource_url(const char* value) {
  set_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    resource_url_ = new ::std::string;
  }
  resource_url_->assign(value);
}
inline void ResourceEvaluationData::set_resource_url(const char* value, size_t size) {
  set_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    resource_url_ = new ::std::string;
  }
  resource_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceEvaluationData::mutable_resource_url() {
  set_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    resource_url_ = new ::std::string;
  }
  return resource_url_;
}
inline ::std::string* ResourceEvaluationData::release_resource_url() {
  clear_has_resource_url();
  if (resource_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resource_url_;
    resource_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fetch_uri = 3;
inline bool ResourceEvaluationData::has_fetch_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceEvaluationData::set_has_fetch_uri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceEvaluationData::clear_has_fetch_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceEvaluationData::clear_fetch_uri() {
  if (fetch_uri_ != &::google::protobuf::internal::kEmptyString) {
    fetch_uri_->clear();
  }
  clear_has_fetch_uri();
}
inline const ::std::string& ResourceEvaluationData::fetch_uri() const {
  return *fetch_uri_;
}
inline void ResourceEvaluationData::set_fetch_uri(const ::std::string& value) {
  set_has_fetch_uri();
  if (fetch_uri_ == &::google::protobuf::internal::kEmptyString) {
    fetch_uri_ = new ::std::string;
  }
  fetch_uri_->assign(value);
}
inline void ResourceEvaluationData::set_fetch_uri(const char* value) {
  set_has_fetch_uri();
  if (fetch_uri_ == &::google::protobuf::internal::kEmptyString) {
    fetch_uri_ = new ::std::string;
  }
  fetch_uri_->assign(value);
}
inline void ResourceEvaluationData::set_fetch_uri(const char* value, size_t size) {
  set_has_fetch_uri();
  if (fetch_uri_ == &::google::protobuf::internal::kEmptyString) {
    fetch_uri_ = new ::std::string;
  }
  fetch_uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceEvaluationData::mutable_fetch_uri() {
  set_has_fetch_uri();
  if (fetch_uri_ == &::google::protobuf::internal::kEmptyString) {
    fetch_uri_ = new ::std::string;
  }
  return fetch_uri_;
}
inline ::std::string* ResourceEvaluationData::release_fetch_uri() {
  clear_has_fetch_uri();
  if (fetch_uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fetch_uri_;
    fetch_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .pagespeed.EvaluationType type = 4 [default = UNKNOWN_EVALUATION_TYPE];
inline bool ResourceEvaluationData::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResourceEvaluationData::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResourceEvaluationData::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResourceEvaluationData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline pagespeed::EvaluationType ResourceEvaluationData::type() const {
  return static_cast< pagespeed::EvaluationType >(type_);
}
inline void ResourceEvaluationData::set_type(pagespeed::EvaluationType value) {
  GOOGLE_DCHECK(pagespeed::EvaluationType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .pagespeed.ResourceEvaluationConstraintData constraints = 5;
inline int ResourceEvaluationData::constraints_size() const {
  return constraints_.size();
}
inline void ResourceEvaluationData::clear_constraints() {
  constraints_.Clear();
}
inline const ::pagespeed::ResourceEvaluationConstraintData& ResourceEvaluationData::constraints(int index) const {
  return constraints_.Get(index);
}
inline ::pagespeed::ResourceEvaluationConstraintData* ResourceEvaluationData::mutable_constraints(int index) {
  return constraints_.Mutable(index);
}
inline ::pagespeed::ResourceEvaluationConstraintData* ResourceEvaluationData::add_constraints() {
  return constraints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationConstraintData >&
ResourceEvaluationData::constraints() const {
  return constraints_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationConstraintData >*
ResourceEvaluationData::mutable_constraints() {
  return &constraints_;
}

// optional int32 block_start_line = 6 [default = -1];
inline bool ResourceEvaluationData::has_block_start_line() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResourceEvaluationData::set_has_block_start_line() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResourceEvaluationData::clear_has_block_start_line() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResourceEvaluationData::clear_block_start_line() {
  block_start_line_ = -1;
  clear_has_block_start_line();
}
inline ::google::protobuf::int32 ResourceEvaluationData::block_start_line() const {
  return block_start_line_;
}
inline void ResourceEvaluationData::set_block_start_line(::google::protobuf::int32 value) {
  set_has_block_start_line();
  block_start_line_ = value;
}

// optional int32 block_end_line = 7 [default = -1];
inline bool ResourceEvaluationData::has_block_end_line() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResourceEvaluationData::set_has_block_end_line() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResourceEvaluationData::clear_has_block_end_line() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResourceEvaluationData::clear_block_end_line() {
  block_end_line_ = -1;
  clear_has_block_end_line();
}
inline ::google::protobuf::int32 ResourceEvaluationData::block_end_line() const {
  return block_end_line_;
}
inline void ResourceEvaluationData::set_block_end_line(::google::protobuf::int32 value) {
  set_has_block_end_line();
  block_end_line_ = value;
}

// optional .pagespeed.Timestamp start = 8;
inline bool ResourceEvaluationData::has_start() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResourceEvaluationData::set_has_start() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResourceEvaluationData::clear_has_start() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResourceEvaluationData::clear_start() {
  if (start_ != NULL) start_->::pagespeed::Timestamp::Clear();
  clear_has_start();
}
inline const ::pagespeed::Timestamp& ResourceEvaluationData::start() const {
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::pagespeed::Timestamp* ResourceEvaluationData::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::pagespeed::Timestamp;
  return start_;
}
inline ::pagespeed::Timestamp* ResourceEvaluationData::release_start() {
  clear_has_start();
  ::pagespeed::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}

// optional .pagespeed.Timestamp finish = 9;
inline bool ResourceEvaluationData::has_finish() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResourceEvaluationData::set_has_finish() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ResourceEvaluationData::clear_has_finish() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ResourceEvaluationData::clear_finish() {
  if (finish_ != NULL) finish_->::pagespeed::Timestamp::Clear();
  clear_has_finish();
}
inline const ::pagespeed::Timestamp& ResourceEvaluationData::finish() const {
  return finish_ != NULL ? *finish_ : *default_instance_->finish_;
}
inline ::pagespeed::Timestamp* ResourceEvaluationData::mutable_finish() {
  set_has_finish();
  if (finish_ == NULL) finish_ = new ::pagespeed::Timestamp;
  return finish_;
}
inline ::pagespeed::Timestamp* ResourceEvaluationData::release_finish() {
  clear_has_finish();
  ::pagespeed::Timestamp* temp = finish_;
  finish_ = NULL;
  return temp;
}

// optional bool is_async = 10;
inline bool ResourceEvaluationData::has_is_async() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResourceEvaluationData::set_has_is_async() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ResourceEvaluationData::clear_has_is_async() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ResourceEvaluationData::clear_is_async() {
  is_async_ = false;
  clear_has_is_async();
}
inline bool ResourceEvaluationData::is_async() const {
  return is_async_;
}
inline void ResourceEvaluationData::set_is_async(bool value) {
  set_has_is_async();
  is_async_ = value;
}

// optional bool is_defer = 11;
inline bool ResourceEvaluationData::has_is_defer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ResourceEvaluationData::set_has_is_defer() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ResourceEvaluationData::clear_has_is_defer() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ResourceEvaluationData::clear_is_defer() {
  is_defer_ = false;
  clear_has_is_defer();
}
inline bool ResourceEvaluationData::is_defer() const {
  return is_defer_;
}
inline void ResourceEvaluationData::set_is_defer(bool value) {
  set_has_is_defer();
  is_defer_ = value;
}

// optional bool is_matching_media_type = 12;
inline bool ResourceEvaluationData::has_is_matching_media_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ResourceEvaluationData::set_has_is_matching_media_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ResourceEvaluationData::clear_has_is_matching_media_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ResourceEvaluationData::clear_is_matching_media_type() {
  is_matching_media_type_ = false;
  clear_has_is_matching_media_type();
}
inline bool ResourceEvaluationData::is_matching_media_type() const {
  return is_matching_media_type_;
}
inline void ResourceEvaluationData::set_is_matching_media_type(bool value) {
  set_has_is_matching_media_type();
  is_matching_media_type_ = value;
}

// -------------------------------------------------------------------

// HeaderData

// optional bytes name = 1;
inline bool HeaderData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeaderData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeaderData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeaderData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HeaderData::name() const {
  return *name_;
}
inline void HeaderData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HeaderData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HeaderData::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeaderData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HeaderData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes value = 2;
inline bool HeaderData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeaderData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeaderData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeaderData::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& HeaderData::value() const {
  return *value_;
}
inline void HeaderData::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void HeaderData::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void HeaderData::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeaderData::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* HeaderData::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResourceData

// optional string request_url = 1;
inline bool ResourceData::has_request_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceData::set_has_request_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceData::clear_has_request_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceData::clear_request_url() {
  if (request_url_ != &::google::protobuf::internal::kEmptyString) {
    request_url_->clear();
  }
  clear_has_request_url();
}
inline const ::std::string& ResourceData::request_url() const {
  return *request_url_;
}
inline void ResourceData::set_request_url(const ::std::string& value) {
  set_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    request_url_ = new ::std::string;
  }
  request_url_->assign(value);
}
inline void ResourceData::set_request_url(const char* value) {
  set_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    request_url_ = new ::std::string;
  }
  request_url_->assign(value);
}
inline void ResourceData::set_request_url(const char* value, size_t size) {
  set_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    request_url_ = new ::std::string;
  }
  request_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceData::mutable_request_url() {
  set_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    request_url_ = new ::std::string;
  }
  return request_url_;
}
inline ::std::string* ResourceData::release_request_url() {
  clear_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_url_;
    request_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string request_method = 2;
inline bool ResourceData::has_request_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceData::set_has_request_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceData::clear_has_request_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceData::clear_request_method() {
  if (request_method_ != &::google::protobuf::internal::kEmptyString) {
    request_method_->clear();
  }
  clear_has_request_method();
}
inline const ::std::string& ResourceData::request_method() const {
  return *request_method_;
}
inline void ResourceData::set_request_method(const ::std::string& value) {
  set_has_request_method();
  if (request_method_ == &::google::protobuf::internal::kEmptyString) {
    request_method_ = new ::std::string;
  }
  request_method_->assign(value);
}
inline void ResourceData::set_request_method(const char* value) {
  set_has_request_method();
  if (request_method_ == &::google::protobuf::internal::kEmptyString) {
    request_method_ = new ::std::string;
  }
  request_method_->assign(value);
}
inline void ResourceData::set_request_method(const char* value, size_t size) {
  set_has_request_method();
  if (request_method_ == &::google::protobuf::internal::kEmptyString) {
    request_method_ = new ::std::string;
  }
  request_method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceData::mutable_request_method() {
  set_has_request_method();
  if (request_method_ == &::google::protobuf::internal::kEmptyString) {
    request_method_ = new ::std::string;
  }
  return request_method_;
}
inline ::std::string* ResourceData::release_request_method() {
  clear_has_request_method();
  if (request_method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_method_;
    request_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .pagespeed.HeaderData request_headers = 3;
inline int ResourceData::request_headers_size() const {
  return request_headers_.size();
}
inline void ResourceData::clear_request_headers() {
  request_headers_.Clear();
}
inline const ::pagespeed::HeaderData& ResourceData::request_headers(int index) const {
  return request_headers_.Get(index);
}
inline ::pagespeed::HeaderData* ResourceData::mutable_request_headers(int index) {
  return request_headers_.Mutable(index);
}
inline ::pagespeed::HeaderData* ResourceData::add_request_headers() {
  return request_headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData >&
ResourceData::request_headers() const {
  return request_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData >*
ResourceData::mutable_request_headers() {
  return &request_headers_;
}

// optional int32 request_body_size = 4;
inline bool ResourceData::has_request_body_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResourceData::set_has_request_body_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResourceData::clear_has_request_body_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResourceData::clear_request_body_size() {
  request_body_size_ = 0;
  clear_has_request_body_size();
}
inline ::google::protobuf::int32 ResourceData::request_body_size() const {
  return request_body_size_;
}
inline void ResourceData::set_request_body_size(::google::protobuf::int32 value) {
  set_has_request_body_size();
  request_body_size_ = value;
}

// optional int32 status_code = 5;
inline bool ResourceData::has_status_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResourceData::set_has_status_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResourceData::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResourceData::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
inline ::google::protobuf::int32 ResourceData::status_code() const {
  return status_code_;
}
inline void ResourceData::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
}

// optional .pagespeed.Protocol response_protocol = 6 [default = UNKNOWN_PROTOCOL];
inline bool ResourceData::has_response_protocol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResourceData::set_has_response_protocol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResourceData::clear_has_response_protocol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResourceData::clear_response_protocol() {
  response_protocol_ = 2;
  clear_has_response_protocol();
}
inline pagespeed::Protocol ResourceData::response_protocol() const {
  return static_cast< pagespeed::Protocol >(response_protocol_);
}
inline void ResourceData::set_response_protocol(pagespeed::Protocol value) {
  GOOGLE_DCHECK(pagespeed::Protocol_IsValid(value));
  set_has_response_protocol();
  response_protocol_ = value;
}

// repeated .pagespeed.HeaderData response_headers = 7;
inline int ResourceData::response_headers_size() const {
  return response_headers_.size();
}
inline void ResourceData::clear_response_headers() {
  response_headers_.Clear();
}
inline const ::pagespeed::HeaderData& ResourceData::response_headers(int index) const {
  return response_headers_.Get(index);
}
inline ::pagespeed::HeaderData* ResourceData::mutable_response_headers(int index) {
  return response_headers_.Mutable(index);
}
inline ::pagespeed::HeaderData* ResourceData::add_response_headers() {
  return response_headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData >&
ResourceData::response_headers() const {
  return response_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::HeaderData >*
ResourceData::mutable_response_headers() {
  return &response_headers_;
}

// optional int32 response_body_size = 8;
inline bool ResourceData::has_response_body_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResourceData::set_has_response_body_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResourceData::clear_has_response_body_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResourceData::clear_response_body_size() {
  response_body_size_ = 0;
  clear_has_response_body_size();
}
inline ::google::protobuf::int32 ResourceData::response_body_size() const {
  return response_body_size_;
}
inline void ResourceData::set_response_body_size(::google::protobuf::int32 value) {
  set_has_response_body_size();
  response_body_size_ = value;
}

// optional .pagespeed.ResourceType resource_type = 9 [default = OTHER];
inline bool ResourceData::has_resource_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResourceData::set_has_resource_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ResourceData::clear_has_resource_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ResourceData::clear_resource_type() {
  resource_type_ = 0;
  clear_has_resource_type();
}
inline pagespeed::ResourceType ResourceData::resource_type() const {
  return static_cast< pagespeed::ResourceType >(resource_type_);
}
inline void ResourceData::set_resource_type(pagespeed::ResourceType value) {
  GOOGLE_DCHECK(pagespeed::ResourceType_IsValid(value));
  set_has_resource_type();
  resource_type_ = value;
}

// optional string mime_type = 10;
inline bool ResourceData::has_mime_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResourceData::set_has_mime_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ResourceData::clear_has_mime_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ResourceData::clear_mime_type() {
  if (mime_type_ != &::google::protobuf::internal::kEmptyString) {
    mime_type_->clear();
  }
  clear_has_mime_type();
}
inline const ::std::string& ResourceData::mime_type() const {
  return *mime_type_;
}
inline void ResourceData::set_mime_type(const ::std::string& value) {
  set_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::kEmptyString) {
    mime_type_ = new ::std::string;
  }
  mime_type_->assign(value);
}
inline void ResourceData::set_mime_type(const char* value) {
  set_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::kEmptyString) {
    mime_type_ = new ::std::string;
  }
  mime_type_->assign(value);
}
inline void ResourceData::set_mime_type(const char* value, size_t size) {
  set_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::kEmptyString) {
    mime_type_ = new ::std::string;
  }
  mime_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceData::mutable_mime_type() {
  set_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::kEmptyString) {
    mime_type_ = new ::std::string;
  }
  return mime_type_;
}
inline ::std::string* ResourceData::release_mime_type() {
  clear_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mime_type_;
    mime_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BrowsingContextData

// optional string uri = 1;
inline bool BrowsingContextData::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrowsingContextData::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrowsingContextData::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrowsingContextData::clear_uri() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& BrowsingContextData::uri() const {
  return *uri_;
}
inline void BrowsingContextData::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void BrowsingContextData::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void BrowsingContextData::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrowsingContextData::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  return uri_;
}
inline ::std::string* BrowsingContextData::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string document_resource_url = 2;
inline bool BrowsingContextData::has_document_resource_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrowsingContextData::set_has_document_resource_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrowsingContextData::clear_has_document_resource_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrowsingContextData::clear_document_resource_url() {
  if (document_resource_url_ != &::google::protobuf::internal::kEmptyString) {
    document_resource_url_->clear();
  }
  clear_has_document_resource_url();
}
inline const ::std::string& BrowsingContextData::document_resource_url() const {
  return *document_resource_url_;
}
inline void BrowsingContextData::set_document_resource_url(const ::std::string& value) {
  set_has_document_resource_url();
  if (document_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    document_resource_url_ = new ::std::string;
  }
  document_resource_url_->assign(value);
}
inline void BrowsingContextData::set_document_resource_url(const char* value) {
  set_has_document_resource_url();
  if (document_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    document_resource_url_ = new ::std::string;
  }
  document_resource_url_->assign(value);
}
inline void BrowsingContextData::set_document_resource_url(const char* value, size_t size) {
  set_has_document_resource_url();
  if (document_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    document_resource_url_ = new ::std::string;
  }
  document_resource_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrowsingContextData::mutable_document_resource_url() {
  set_has_document_resource_url();
  if (document_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    document_resource_url_ = new ::std::string;
  }
  return document_resource_url_;
}
inline ::std::string* BrowsingContextData::release_document_resource_url() {
  clear_has_document_resource_url();
  if (document_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = document_resource_url_;
    document_resource_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string resource_urls = 3;
inline int BrowsingContextData::resource_urls_size() const {
  return resource_urls_.size();
}
inline void BrowsingContextData::clear_resource_urls() {
  resource_urls_.Clear();
}
inline const ::std::string& BrowsingContextData::resource_urls(int index) const {
  return resource_urls_.Get(index);
}
inline ::std::string* BrowsingContextData::mutable_resource_urls(int index) {
  return resource_urls_.Mutable(index);
}
inline void BrowsingContextData::set_resource_urls(int index, const ::std::string& value) {
  resource_urls_.Mutable(index)->assign(value);
}
inline void BrowsingContextData::set_resource_urls(int index, const char* value) {
  resource_urls_.Mutable(index)->assign(value);
}
inline void BrowsingContextData::set_resource_urls(int index, const char* value, size_t size) {
  resource_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrowsingContextData::add_resource_urls() {
  return resource_urls_.Add();
}
inline void BrowsingContextData::add_resource_urls(const ::std::string& value) {
  resource_urls_.Add()->assign(value);
}
inline void BrowsingContextData::add_resource_urls(const char* value) {
  resource_urls_.Add()->assign(value);
}
inline void BrowsingContextData::add_resource_urls(const char* value, size_t size) {
  resource_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BrowsingContextData::resource_urls() const {
  return resource_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BrowsingContextData::mutable_resource_urls() {
  return &resource_urls_;
}

// repeated .pagespeed.ResourceFetchData fetch = 4;
inline int BrowsingContextData::fetch_size() const {
  return fetch_.size();
}
inline void BrowsingContextData::clear_fetch() {
  fetch_.Clear();
}
inline const ::pagespeed::ResourceFetchData& BrowsingContextData::fetch(int index) const {
  return fetch_.Get(index);
}
inline ::pagespeed::ResourceFetchData* BrowsingContextData::mutable_fetch(int index) {
  return fetch_.Mutable(index);
}
inline ::pagespeed::ResourceFetchData* BrowsingContextData::add_fetch() {
  return fetch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchData >&
BrowsingContextData::fetch() const {
  return fetch_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceFetchData >*
BrowsingContextData::mutable_fetch() {
  return &fetch_;
}

// repeated .pagespeed.ResourceEvaluationData evaluation = 5;
inline int BrowsingContextData::evaluation_size() const {
  return evaluation_.size();
}
inline void BrowsingContextData::clear_evaluation() {
  evaluation_.Clear();
}
inline const ::pagespeed::ResourceEvaluationData& BrowsingContextData::evaluation(int index) const {
  return evaluation_.Get(index);
}
inline ::pagespeed::ResourceEvaluationData* BrowsingContextData::mutable_evaluation(int index) {
  return evaluation_.Mutable(index);
}
inline ::pagespeed::ResourceEvaluationData* BrowsingContextData::add_evaluation() {
  return evaluation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationData >&
BrowsingContextData::evaluation() const {
  return evaluation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceEvaluationData >*
BrowsingContextData::mutable_evaluation() {
  return &evaluation_;
}

// repeated .pagespeed.BrowsingContextData nested_context = 6;
inline int BrowsingContextData::nested_context_size() const {
  return nested_context_.size();
}
inline void BrowsingContextData::clear_nested_context() {
  nested_context_.Clear();
}
inline const ::pagespeed::BrowsingContextData& BrowsingContextData::nested_context(int index) const {
  return nested_context_.Get(index);
}
inline ::pagespeed::BrowsingContextData* BrowsingContextData::mutable_nested_context(int index) {
  return nested_context_.Mutable(index);
}
inline ::pagespeed::BrowsingContextData* BrowsingContextData::add_nested_context() {
  return nested_context_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::BrowsingContextData >&
BrowsingContextData::nested_context() const {
  return nested_context_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::BrowsingContextData >*
BrowsingContextData::mutable_nested_context() {
  return &nested_context_;
}

// optional .pagespeed.Timestamp event_dom_content = 7;
inline bool BrowsingContextData::has_event_dom_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BrowsingContextData::set_has_event_dom_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BrowsingContextData::clear_has_event_dom_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BrowsingContextData::clear_event_dom_content() {
  if (event_dom_content_ != NULL) event_dom_content_->::pagespeed::Timestamp::Clear();
  clear_has_event_dom_content();
}
inline const ::pagespeed::Timestamp& BrowsingContextData::event_dom_content() const {
  return event_dom_content_ != NULL ? *event_dom_content_ : *default_instance_->event_dom_content_;
}
inline ::pagespeed::Timestamp* BrowsingContextData::mutable_event_dom_content() {
  set_has_event_dom_content();
  if (event_dom_content_ == NULL) event_dom_content_ = new ::pagespeed::Timestamp;
  return event_dom_content_;
}
inline ::pagespeed::Timestamp* BrowsingContextData::release_event_dom_content() {
  clear_has_event_dom_content();
  ::pagespeed::Timestamp* temp = event_dom_content_;
  event_dom_content_ = NULL;
  return temp;
}

// optional .pagespeed.Timestamp event_on_load = 8;
inline bool BrowsingContextData::has_event_on_load() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BrowsingContextData::set_has_event_on_load() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BrowsingContextData::clear_has_event_on_load() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BrowsingContextData::clear_event_on_load() {
  if (event_on_load_ != NULL) event_on_load_->::pagespeed::Timestamp::Clear();
  clear_has_event_on_load();
}
inline const ::pagespeed::Timestamp& BrowsingContextData::event_on_load() const {
  return event_on_load_ != NULL ? *event_on_load_ : *default_instance_->event_on_load_;
}
inline ::pagespeed::Timestamp* BrowsingContextData::mutable_event_on_load() {
  set_has_event_on_load();
  if (event_on_load_ == NULL) event_on_load_ = new ::pagespeed::Timestamp;
  return event_on_load_;
}
inline ::pagespeed::Timestamp* BrowsingContextData::release_event_on_load() {
  clear_has_event_on_load();
  ::pagespeed::Timestamp* temp = event_on_load_;
  event_on_load_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PageResourceData

// optional string primary_resource_url = 1;
inline bool PageResourceData::has_primary_resource_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageResourceData::set_has_primary_resource_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageResourceData::clear_has_primary_resource_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageResourceData::clear_primary_resource_url() {
  if (primary_resource_url_ != &::google::protobuf::internal::kEmptyString) {
    primary_resource_url_->clear();
  }
  clear_has_primary_resource_url();
}
inline const ::std::string& PageResourceData::primary_resource_url() const {
  return *primary_resource_url_;
}
inline void PageResourceData::set_primary_resource_url(const ::std::string& value) {
  set_has_primary_resource_url();
  if (primary_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    primary_resource_url_ = new ::std::string;
  }
  primary_resource_url_->assign(value);
}
inline void PageResourceData::set_primary_resource_url(const char* value) {
  set_has_primary_resource_url();
  if (primary_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    primary_resource_url_ = new ::std::string;
  }
  primary_resource_url_->assign(value);
}
inline void PageResourceData::set_primary_resource_url(const char* value, size_t size) {
  set_has_primary_resource_url();
  if (primary_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    primary_resource_url_ = new ::std::string;
  }
  primary_resource_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PageResourceData::mutable_primary_resource_url() {
  set_has_primary_resource_url();
  if (primary_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    primary_resource_url_ = new ::std::string;
  }
  return primary_resource_url_;
}
inline ::std::string* PageResourceData::release_primary_resource_url() {
  clear_has_primary_resource_url();
  if (primary_resource_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = primary_resource_url_;
    primary_resource_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .pagespeed.BrowsingContextData top_level_context = 2;
inline bool PageResourceData::has_top_level_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageResourceData::set_has_top_level_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PageResourceData::clear_has_top_level_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PageResourceData::clear_top_level_context() {
  if (top_level_context_ != NULL) top_level_context_->::pagespeed::BrowsingContextData::Clear();
  clear_has_top_level_context();
}
inline const ::pagespeed::BrowsingContextData& PageResourceData::top_level_context() const {
  return top_level_context_ != NULL ? *top_level_context_ : *default_instance_->top_level_context_;
}
inline ::pagespeed::BrowsingContextData* PageResourceData::mutable_top_level_context() {
  set_has_top_level_context();
  if (top_level_context_ == NULL) top_level_context_ = new ::pagespeed::BrowsingContextData;
  return top_level_context_;
}
inline ::pagespeed::BrowsingContextData* PageResourceData::release_top_level_context() {
  clear_has_top_level_context();
  ::pagespeed::BrowsingContextData* temp = top_level_context_;
  top_level_context_ = NULL;
  return temp;
}

// repeated .pagespeed.ResourceData resources = 3;
inline int PageResourceData::resources_size() const {
  return resources_.size();
}
inline void PageResourceData::clear_resources() {
  resources_.Clear();
}
inline const ::pagespeed::ResourceData& PageResourceData::resources(int index) const {
  return resources_.Get(index);
}
inline ::pagespeed::ResourceData* PageResourceData::mutable_resources(int index) {
  return resources_.Mutable(index);
}
inline ::pagespeed::ResourceData* PageResourceData::add_resources() {
  return resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceData >&
PageResourceData::resources() const {
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::pagespeed::ResourceData >*
PageResourceData::mutable_resources() {
  return &resources_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pagespeed

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resource_2eproto__INCLUDED
