// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/http/logging.proto

#ifndef PROTOBUF_net_2finstaweb_2fhttp_2flogging_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2fhttp_2flogging_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2fhttp_2flogging_2eproto();

class TimingInfo;
class BlinkInfo;
class MetadataCacheInfo;
class SplitHtmlInfo;
class LoggingInfo;

enum BlinkInfo_BlinkRequestFlow {
  BlinkInfo_BlinkRequestFlow_BLINK_CACHE_HIT = 1,
  BlinkInfo_BlinkRequestFlow_BLINK_CACHE_MISS_FOUND_RESOURCE = 2,
  BlinkInfo_BlinkRequestFlow_BLINK_CACHE_MISS_FETCH_NON_OK = 3,
  BlinkInfo_BlinkRequestFlow_BLINK_CACHE_MISS_TRIGGERED_REWRITE = 4,
  BlinkInfo_BlinkRequestFlow_FOUND_MALFORMED_HTML = 5,
  BlinkInfo_BlinkRequestFlow_FOUND_LAST_STATUS_CODE_NON_OK = 6,
  BlinkInfo_BlinkRequestFlow_FOUND_CONTENT_LENGTH_OVER_THRESHOLD = 7
};
bool BlinkInfo_BlinkRequestFlow_IsValid(int value);
const BlinkInfo_BlinkRequestFlow BlinkInfo_BlinkRequestFlow_BlinkRequestFlow_MIN = BlinkInfo_BlinkRequestFlow_BLINK_CACHE_HIT;
const BlinkInfo_BlinkRequestFlow BlinkInfo_BlinkRequestFlow_BlinkRequestFlow_MAX = BlinkInfo_BlinkRequestFlow_FOUND_CONTENT_LENGTH_OVER_THRESHOLD;
const int BlinkInfo_BlinkRequestFlow_BlinkRequestFlow_ARRAYSIZE = BlinkInfo_BlinkRequestFlow_BlinkRequestFlow_MAX + 1;

enum BlinkInfo_UserAgent {
  BlinkInfo_UserAgent_NOT_SET = 0,
  BlinkInfo_UserAgent_BLINK_DESKTOP_WHITELIST = 1,
  BlinkInfo_UserAgent_BLINK_DESKTOP_BLACKLIST = 2,
  BlinkInfo_UserAgent_BLINK_MOBILE = 3,
  BlinkInfo_UserAgent_NULL_OR_EMPTY = 4,
  BlinkInfo_UserAgent_NOT_SUPPORT_BLINK = 5
};
bool BlinkInfo_UserAgent_IsValid(int value);
const BlinkInfo_UserAgent BlinkInfo_UserAgent_UserAgent_MIN = BlinkInfo_UserAgent_NOT_SET;
const BlinkInfo_UserAgent BlinkInfo_UserAgent_UserAgent_MAX = BlinkInfo_UserAgent_NOT_SUPPORT_BLINK;
const int BlinkInfo_UserAgent_UserAgent_ARRAYSIZE = BlinkInfo_UserAgent_UserAgent_MAX + 1;

// ===================================================================

class TimingInfo : public ::google::protobuf::MessageLite {
 public:
  TimingInfo();
  virtual ~TimingInfo();
  
  TimingInfo(const TimingInfo& from);
  
  inline TimingInfo& operator=(const TimingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const TimingInfo& default_instance();
  
  void Swap(TimingInfo* other);
  
  // implements Message ----------------------------------------------
  
  TimingInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TimingInfo& from);
  void MergeFrom(const TimingInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 cache1_ms = 1;
  inline bool has_cache1_ms() const;
  inline void clear_cache1_ms();
  static const int kCache1MsFieldNumber = 1;
  inline ::google::protobuf::int64 cache1_ms() const;
  inline void set_cache1_ms(::google::protobuf::int64 value);
  
  // optional int64 cache2_ms = 2;
  inline bool has_cache2_ms() const;
  inline void clear_cache2_ms();
  static const int kCache2MsFieldNumber = 2;
  inline ::google::protobuf::int64 cache2_ms() const;
  inline void set_cache2_ms(::google::protobuf::int64 value);
  
  // optional int64 header_fetch_ms = 3;
  inline bool has_header_fetch_ms() const;
  inline void clear_header_fetch_ms();
  static const int kHeaderFetchMsFieldNumber = 3;
  inline ::google::protobuf::int64 header_fetch_ms() const;
  inline void set_header_fetch_ms(::google::protobuf::int64 value);
  
  // optional int64 fetch_ms = 4;
  inline bool has_fetch_ms() const;
  inline void clear_fetch_ms();
  static const int kFetchMsFieldNumber = 4;
  inline ::google::protobuf::int64 fetch_ms() const;
  inline void set_fetch_ms(::google::protobuf::int64 value);
  
  // optional int64 time_to_first_byte_ms = 5;
  inline bool has_time_to_first_byte_ms() const;
  inline void clear_time_to_first_byte_ms();
  static const int kTimeToFirstByteMsFieldNumber = 5;
  inline ::google::protobuf::int64 time_to_first_byte_ms() const;
  inline void set_time_to_first_byte_ms(::google::protobuf::int64 value);
  
  // optional int64 request_start_ms = 6;
  inline bool has_request_start_ms() const;
  inline void clear_request_start_ms();
  static const int kRequestStartMsFieldNumber = 6;
  inline ::google::protobuf::int64 request_start_ms() const;
  inline void set_request_start_ms(::google::protobuf::int64 value);
  
  // optional int64 time_to_start_parse_ms = 7;
  inline bool has_time_to_start_parse_ms() const;
  inline void clear_time_to_start_parse_ms();
  static const int kTimeToStartParseMsFieldNumber = 7;
  inline ::google::protobuf::int64 time_to_start_parse_ms() const;
  inline void set_time_to_start_parse_ms(::google::protobuf::int64 value);
  
  // optional int64 time_to_start_fetch_ms = 8;
  inline bool has_time_to_start_fetch_ms() const;
  inline void clear_time_to_start_fetch_ms();
  static const int kTimeToStartFetchMsFieldNumber = 8;
  inline ::google::protobuf::int64 time_to_start_fetch_ms() const;
  inline void set_time_to_start_fetch_ms(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.TimingInfo)
 private:
  inline void set_has_cache1_ms();
  inline void clear_has_cache1_ms();
  inline void set_has_cache2_ms();
  inline void clear_has_cache2_ms();
  inline void set_has_header_fetch_ms();
  inline void clear_has_header_fetch_ms();
  inline void set_has_fetch_ms();
  inline void clear_has_fetch_ms();
  inline void set_has_time_to_first_byte_ms();
  inline void clear_has_time_to_first_byte_ms();
  inline void set_has_request_start_ms();
  inline void clear_has_request_start_ms();
  inline void set_has_time_to_start_parse_ms();
  inline void clear_has_time_to_start_parse_ms();
  inline void set_has_time_to_start_fetch_ms();
  inline void clear_has_time_to_start_fetch_ms();
  
  ::google::protobuf::int64 cache1_ms_;
  ::google::protobuf::int64 cache2_ms_;
  ::google::protobuf::int64 header_fetch_ms_;
  ::google::protobuf::int64 fetch_ms_;
  ::google::protobuf::int64 time_to_first_byte_ms_;
  ::google::protobuf::int64 request_start_ms_;
  ::google::protobuf::int64 time_to_start_parse_ms_;
  ::google::protobuf::int64 time_to_start_fetch_ms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fhttp_2flogging_2eproto();
  
  void InitAsDefaultInstance();
  static TimingInfo* default_instance_;
};
// -------------------------------------------------------------------

class BlinkInfo : public ::google::protobuf::MessageLite {
 public:
  BlinkInfo();
  virtual ~BlinkInfo();
  
  BlinkInfo(const BlinkInfo& from);
  
  inline BlinkInfo& operator=(const BlinkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BlinkInfo& default_instance();
  
  void Swap(BlinkInfo* other);
  
  // implements Message ----------------------------------------------
  
  BlinkInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BlinkInfo& from);
  void MergeFrom(const BlinkInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef BlinkInfo_BlinkRequestFlow BlinkRequestFlow;
  static const BlinkRequestFlow BLINK_CACHE_HIT = BlinkInfo_BlinkRequestFlow_BLINK_CACHE_HIT;
  static const BlinkRequestFlow BLINK_CACHE_MISS_FOUND_RESOURCE = BlinkInfo_BlinkRequestFlow_BLINK_CACHE_MISS_FOUND_RESOURCE;
  static const BlinkRequestFlow BLINK_CACHE_MISS_FETCH_NON_OK = BlinkInfo_BlinkRequestFlow_BLINK_CACHE_MISS_FETCH_NON_OK;
  static const BlinkRequestFlow BLINK_CACHE_MISS_TRIGGERED_REWRITE = BlinkInfo_BlinkRequestFlow_BLINK_CACHE_MISS_TRIGGERED_REWRITE;
  static const BlinkRequestFlow FOUND_MALFORMED_HTML = BlinkInfo_BlinkRequestFlow_FOUND_MALFORMED_HTML;
  static const BlinkRequestFlow FOUND_LAST_STATUS_CODE_NON_OK = BlinkInfo_BlinkRequestFlow_FOUND_LAST_STATUS_CODE_NON_OK;
  static const BlinkRequestFlow FOUND_CONTENT_LENGTH_OVER_THRESHOLD = BlinkInfo_BlinkRequestFlow_FOUND_CONTENT_LENGTH_OVER_THRESHOLD;
  static inline bool BlinkRequestFlow_IsValid(int value) {
    return BlinkInfo_BlinkRequestFlow_IsValid(value);
  }
  static const BlinkRequestFlow BlinkRequestFlow_MIN =
    BlinkInfo_BlinkRequestFlow_BlinkRequestFlow_MIN;
  static const BlinkRequestFlow BlinkRequestFlow_MAX =
    BlinkInfo_BlinkRequestFlow_BlinkRequestFlow_MAX;
  static const int BlinkRequestFlow_ARRAYSIZE =
    BlinkInfo_BlinkRequestFlow_BlinkRequestFlow_ARRAYSIZE;
  
  typedef BlinkInfo_UserAgent UserAgent;
  static const UserAgent NOT_SET = BlinkInfo_UserAgent_NOT_SET;
  static const UserAgent BLINK_DESKTOP_WHITELIST = BlinkInfo_UserAgent_BLINK_DESKTOP_WHITELIST;
  static const UserAgent BLINK_DESKTOP_BLACKLIST = BlinkInfo_UserAgent_BLINK_DESKTOP_BLACKLIST;
  static const UserAgent BLINK_MOBILE = BlinkInfo_UserAgent_BLINK_MOBILE;
  static const UserAgent NULL_OR_EMPTY = BlinkInfo_UserAgent_NULL_OR_EMPTY;
  static const UserAgent NOT_SUPPORT_BLINK = BlinkInfo_UserAgent_NOT_SUPPORT_BLINK;
  static inline bool UserAgent_IsValid(int value) {
    return BlinkInfo_UserAgent_IsValid(value);
  }
  static const UserAgent UserAgent_MIN =
    BlinkInfo_UserAgent_UserAgent_MIN;
  static const UserAgent UserAgent_MAX =
    BlinkInfo_UserAgent_UserAgent_MAX;
  static const int UserAgent_ARRAYSIZE =
    BlinkInfo_UserAgent_UserAgent_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // optional .net_instaweb.BlinkInfo.BlinkRequestFlow blink_request_flow = 1;
  inline bool has_blink_request_flow() const;
  inline void clear_blink_request_flow();
  static const int kBlinkRequestFlowFieldNumber = 1;
  inline ::net_instaweb::BlinkInfo_BlinkRequestFlow blink_request_flow() const;
  inline void set_blink_request_flow(::net_instaweb::BlinkInfo_BlinkRequestFlow value);
  
  // optional string request_event_id_time_usec = 2;
  inline bool has_request_event_id_time_usec() const;
  inline void clear_request_event_id_time_usec();
  static const int kRequestEventIdTimeUsecFieldNumber = 2;
  inline const ::std::string& request_event_id_time_usec() const;
  inline void set_request_event_id_time_usec(const ::std::string& value);
  inline void set_request_event_id_time_usec(const char* value);
  inline void set_request_event_id_time_usec(const char* value, size_t size);
  inline ::std::string* mutable_request_event_id_time_usec();
  inline ::std::string* release_request_event_id_time_usec();
  
  // optional bool html_match = 3;
  inline bool has_html_match() const;
  inline void clear_html_match();
  static const int kHtmlMatchFieldNumber = 3;
  inline bool html_match() const;
  inline void set_html_match(bool value);
  
  // optional .net_instaweb.BlinkInfo.UserAgent blink_user_agent = 4;
  inline bool has_blink_user_agent() const;
  inline void clear_blink_user_agent();
  static const int kBlinkUserAgentFieldNumber = 4;
  inline ::net_instaweb::BlinkInfo_UserAgent blink_user_agent() const;
  inline void set_blink_user_agent(::net_instaweb::BlinkInfo_UserAgent value);
  
  // optional string url = 5;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 5;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // optional bool html_smart_diff_match = 6;
  inline bool has_html_smart_diff_match() const;
  inline void clear_html_smart_diff_match();
  static const int kHtmlSmartDiffMatchFieldNumber = 6;
  inline bool html_smart_diff_match() const;
  inline void set_html_smart_diff_match(bool value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.BlinkInfo)
 private:
  inline void set_has_blink_request_flow();
  inline void clear_has_blink_request_flow();
  inline void set_has_request_event_id_time_usec();
  inline void clear_has_request_event_id_time_usec();
  inline void set_has_html_match();
  inline void clear_has_html_match();
  inline void set_has_blink_user_agent();
  inline void clear_has_blink_user_agent();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_html_smart_diff_match();
  inline void clear_has_html_smart_diff_match();
  
  ::std::string* request_event_id_time_usec_;
  int blink_request_flow_;
  int blink_user_agent_;
  ::std::string* url_;
  bool html_match_;
  bool html_smart_diff_match_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fhttp_2flogging_2eproto();
  
  void InitAsDefaultInstance();
  static BlinkInfo* default_instance_;
};
// -------------------------------------------------------------------

class MetadataCacheInfo : public ::google::protobuf::MessageLite {
 public:
  MetadataCacheInfo();
  virtual ~MetadataCacheInfo();
  
  MetadataCacheInfo(const MetadataCacheInfo& from);
  
  inline MetadataCacheInfo& operator=(const MetadataCacheInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const MetadataCacheInfo& default_instance();
  
  void Swap(MetadataCacheInfo* other);
  
  // implements Message ----------------------------------------------
  
  MetadataCacheInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MetadataCacheInfo& from);
  void MergeFrom(const MetadataCacheInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 num_hits = 1;
  inline bool has_num_hits() const;
  inline void clear_num_hits();
  static const int kNumHitsFieldNumber = 1;
  inline ::google::protobuf::int32 num_hits() const;
  inline void set_num_hits(::google::protobuf::int32 value);
  
  // optional int32 num_revalidates = 2;
  inline bool has_num_revalidates() const;
  inline void clear_num_revalidates();
  static const int kNumRevalidatesFieldNumber = 2;
  inline ::google::protobuf::int32 num_revalidates() const;
  inline void set_num_revalidates(::google::protobuf::int32 value);
  
  // optional int32 num_misses = 3;
  inline bool has_num_misses() const;
  inline void clear_num_misses();
  static const int kNumMissesFieldNumber = 3;
  inline ::google::protobuf::int32 num_misses() const;
  inline void set_num_misses(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.MetadataCacheInfo)
 private:
  inline void set_has_num_hits();
  inline void clear_has_num_hits();
  inline void set_has_num_revalidates();
  inline void clear_has_num_revalidates();
  inline void set_has_num_misses();
  inline void clear_has_num_misses();
  
  ::google::protobuf::int32 num_hits_;
  ::google::protobuf::int32 num_revalidates_;
  ::google::protobuf::int32 num_misses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fhttp_2flogging_2eproto();
  
  void InitAsDefaultInstance();
  static MetadataCacheInfo* default_instance_;
};
// -------------------------------------------------------------------

class SplitHtmlInfo : public ::google::protobuf::MessageLite {
 public:
  SplitHtmlInfo();
  virtual ~SplitHtmlInfo();
  
  SplitHtmlInfo(const SplitHtmlInfo& from);
  
  inline SplitHtmlInfo& operator=(const SplitHtmlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SplitHtmlInfo& default_instance();
  
  void Swap(SplitHtmlInfo* other);
  
  // implements Message ----------------------------------------------
  
  SplitHtmlInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SplitHtmlInfo& from);
  void MergeFrom(const SplitHtmlInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 json_size = 1;
  inline bool has_json_size() const;
  inline void clear_json_size();
  static const int kJsonSizeFieldNumber = 1;
  inline ::google::protobuf::int64 json_size() const;
  inline void set_json_size(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.SplitHtmlInfo)
 private:
  inline void set_has_json_size();
  inline void clear_has_json_size();
  
  ::google::protobuf::int64 json_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fhttp_2flogging_2eproto();
  
  void InitAsDefaultInstance();
  static SplitHtmlInfo* default_instance_;
};
// -------------------------------------------------------------------

class LoggingInfo : public ::google::protobuf::MessageLite {
 public:
  LoggingInfo();
  virtual ~LoggingInfo();
  
  LoggingInfo(const LoggingInfo& from);
  
  inline LoggingInfo& operator=(const LoggingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const LoggingInfo& default_instance();
  
  void Swap(LoggingInfo* other);
  
  // implements Message ----------------------------------------------
  
  LoggingInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LoggingInfo& from);
  void MergeFrom(const LoggingInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .net_instaweb.TimingInfo timing_info = 1;
  inline bool has_timing_info() const;
  inline void clear_timing_info();
  static const int kTimingInfoFieldNumber = 1;
  inline const ::net_instaweb::TimingInfo& timing_info() const;
  inline ::net_instaweb::TimingInfo* mutable_timing_info();
  inline ::net_instaweb::TimingInfo* release_timing_info();
  
  // optional .net_instaweb.BlinkInfo blink_info = 2;
  inline bool has_blink_info() const;
  inline void clear_blink_info();
  static const int kBlinkInfoFieldNumber = 2;
  inline const ::net_instaweb::BlinkInfo& blink_info() const;
  inline ::net_instaweb::BlinkInfo* mutable_blink_info();
  inline ::net_instaweb::BlinkInfo* release_blink_info();
  
  // optional string applied_rewriters = 3;
  inline bool has_applied_rewriters() const;
  inline void clear_applied_rewriters();
  static const int kAppliedRewritersFieldNumber = 3;
  inline const ::std::string& applied_rewriters() const;
  inline void set_applied_rewriters(const ::std::string& value);
  inline void set_applied_rewriters(const char* value);
  inline void set_applied_rewriters(const char* value, size_t size);
  inline ::std::string* mutable_applied_rewriters();
  inline ::std::string* release_applied_rewriters();
  
  // optional .net_instaweb.MetadataCacheInfo metadata_cache_info = 4;
  inline bool has_metadata_cache_info() const;
  inline void clear_metadata_cache_info();
  static const int kMetadataCacheInfoFieldNumber = 4;
  inline const ::net_instaweb::MetadataCacheInfo& metadata_cache_info() const;
  inline ::net_instaweb::MetadataCacheInfo* mutable_metadata_cache_info();
  inline ::net_instaweb::MetadataCacheInfo* release_metadata_cache_info();
  
  // optional bool is_original_resource_cacheable = 5 [default = true];
  inline bool has_is_original_resource_cacheable() const;
  inline void clear_is_original_resource_cacheable();
  static const int kIsOriginalResourceCacheableFieldNumber = 5;
  inline bool is_original_resource_cacheable() const;
  inline void set_is_original_resource_cacheable(bool value);
  
  // optional int32 furious_id = 6;
  inline bool has_furious_id() const;
  inline void clear_furious_id();
  static const int kFuriousIdFieldNumber = 6;
  inline ::google::protobuf::int32 furious_id() const;
  inline void set_furious_id(::google::protobuf::int32 value);
  
  // optional .net_instaweb.SplitHtmlInfo split_html_info = 7;
  inline bool has_split_html_info() const;
  inline void clear_split_html_info();
  static const int kSplitHtmlInfoFieldNumber = 7;
  inline const ::net_instaweb::SplitHtmlInfo& split_html_info() const;
  inline ::net_instaweb::SplitHtmlInfo* mutable_split_html_info();
  inline ::net_instaweb::SplitHtmlInfo* release_split_html_info();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.LoggingInfo)
 private:
  inline void set_has_timing_info();
  inline void clear_has_timing_info();
  inline void set_has_blink_info();
  inline void clear_has_blink_info();
  inline void set_has_applied_rewriters();
  inline void clear_has_applied_rewriters();
  inline void set_has_metadata_cache_info();
  inline void clear_has_metadata_cache_info();
  inline void set_has_is_original_resource_cacheable();
  inline void clear_has_is_original_resource_cacheable();
  inline void set_has_furious_id();
  inline void clear_has_furious_id();
  inline void set_has_split_html_info();
  inline void clear_has_split_html_info();
  
  ::net_instaweb::TimingInfo* timing_info_;
  ::net_instaweb::BlinkInfo* blink_info_;
  ::std::string* applied_rewriters_;
  ::net_instaweb::MetadataCacheInfo* metadata_cache_info_;
  bool is_original_resource_cacheable_;
  ::google::protobuf::int32 furious_id_;
  ::net_instaweb::SplitHtmlInfo* split_html_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2fhttp_2flogging_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2fhttp_2flogging_2eproto();
  
  void InitAsDefaultInstance();
  static LoggingInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TimingInfo

// optional int64 cache1_ms = 1;
inline bool TimingInfo::has_cache1_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimingInfo::set_has_cache1_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimingInfo::clear_has_cache1_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimingInfo::clear_cache1_ms() {
  cache1_ms_ = GOOGLE_LONGLONG(0);
  clear_has_cache1_ms();
}
inline ::google::protobuf::int64 TimingInfo::cache1_ms() const {
  return cache1_ms_;
}
inline void TimingInfo::set_cache1_ms(::google::protobuf::int64 value) {
  set_has_cache1_ms();
  cache1_ms_ = value;
}

// optional int64 cache2_ms = 2;
inline bool TimingInfo::has_cache2_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimingInfo::set_has_cache2_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimingInfo::clear_has_cache2_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimingInfo::clear_cache2_ms() {
  cache2_ms_ = GOOGLE_LONGLONG(0);
  clear_has_cache2_ms();
}
inline ::google::protobuf::int64 TimingInfo::cache2_ms() const {
  return cache2_ms_;
}
inline void TimingInfo::set_cache2_ms(::google::protobuf::int64 value) {
  set_has_cache2_ms();
  cache2_ms_ = value;
}

// optional int64 header_fetch_ms = 3;
inline bool TimingInfo::has_header_fetch_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimingInfo::set_has_header_fetch_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimingInfo::clear_has_header_fetch_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimingInfo::clear_header_fetch_ms() {
  header_fetch_ms_ = GOOGLE_LONGLONG(0);
  clear_has_header_fetch_ms();
}
inline ::google::protobuf::int64 TimingInfo::header_fetch_ms() const {
  return header_fetch_ms_;
}
inline void TimingInfo::set_header_fetch_ms(::google::protobuf::int64 value) {
  set_has_header_fetch_ms();
  header_fetch_ms_ = value;
}

// optional int64 fetch_ms = 4;
inline bool TimingInfo::has_fetch_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimingInfo::set_has_fetch_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimingInfo::clear_has_fetch_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimingInfo::clear_fetch_ms() {
  fetch_ms_ = GOOGLE_LONGLONG(0);
  clear_has_fetch_ms();
}
inline ::google::protobuf::int64 TimingInfo::fetch_ms() const {
  return fetch_ms_;
}
inline void TimingInfo::set_fetch_ms(::google::protobuf::int64 value) {
  set_has_fetch_ms();
  fetch_ms_ = value;
}

// optional int64 time_to_first_byte_ms = 5;
inline bool TimingInfo::has_time_to_first_byte_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TimingInfo::set_has_time_to_first_byte_ms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TimingInfo::clear_has_time_to_first_byte_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TimingInfo::clear_time_to_first_byte_ms() {
  time_to_first_byte_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_first_byte_ms();
}
inline ::google::protobuf::int64 TimingInfo::time_to_first_byte_ms() const {
  return time_to_first_byte_ms_;
}
inline void TimingInfo::set_time_to_first_byte_ms(::google::protobuf::int64 value) {
  set_has_time_to_first_byte_ms();
  time_to_first_byte_ms_ = value;
}

// optional int64 request_start_ms = 6;
inline bool TimingInfo::has_request_start_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TimingInfo::set_has_request_start_ms() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TimingInfo::clear_has_request_start_ms() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TimingInfo::clear_request_start_ms() {
  request_start_ms_ = GOOGLE_LONGLONG(0);
  clear_has_request_start_ms();
}
inline ::google::protobuf::int64 TimingInfo::request_start_ms() const {
  return request_start_ms_;
}
inline void TimingInfo::set_request_start_ms(::google::protobuf::int64 value) {
  set_has_request_start_ms();
  request_start_ms_ = value;
}

// optional int64 time_to_start_parse_ms = 7;
inline bool TimingInfo::has_time_to_start_parse_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TimingInfo::set_has_time_to_start_parse_ms() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TimingInfo::clear_has_time_to_start_parse_ms() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TimingInfo::clear_time_to_start_parse_ms() {
  time_to_start_parse_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_start_parse_ms();
}
inline ::google::protobuf::int64 TimingInfo::time_to_start_parse_ms() const {
  return time_to_start_parse_ms_;
}
inline void TimingInfo::set_time_to_start_parse_ms(::google::protobuf::int64 value) {
  set_has_time_to_start_parse_ms();
  time_to_start_parse_ms_ = value;
}

// optional int64 time_to_start_fetch_ms = 8;
inline bool TimingInfo::has_time_to_start_fetch_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TimingInfo::set_has_time_to_start_fetch_ms() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TimingInfo::clear_has_time_to_start_fetch_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TimingInfo::clear_time_to_start_fetch_ms() {
  time_to_start_fetch_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_start_fetch_ms();
}
inline ::google::protobuf::int64 TimingInfo::time_to_start_fetch_ms() const {
  return time_to_start_fetch_ms_;
}
inline void TimingInfo::set_time_to_start_fetch_ms(::google::protobuf::int64 value) {
  set_has_time_to_start_fetch_ms();
  time_to_start_fetch_ms_ = value;
}

// -------------------------------------------------------------------

// BlinkInfo

// optional .net_instaweb.BlinkInfo.BlinkRequestFlow blink_request_flow = 1;
inline bool BlinkInfo::has_blink_request_flow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlinkInfo::set_has_blink_request_flow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlinkInfo::clear_has_blink_request_flow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlinkInfo::clear_blink_request_flow() {
  blink_request_flow_ = 1;
  clear_has_blink_request_flow();
}
inline ::net_instaweb::BlinkInfo_BlinkRequestFlow BlinkInfo::blink_request_flow() const {
  return static_cast< ::net_instaweb::BlinkInfo_BlinkRequestFlow >(blink_request_flow_);
}
inline void BlinkInfo::set_blink_request_flow(::net_instaweb::BlinkInfo_BlinkRequestFlow value) {
  GOOGLE_DCHECK(::net_instaweb::BlinkInfo_BlinkRequestFlow_IsValid(value));
  set_has_blink_request_flow();
  blink_request_flow_ = value;
}

// optional string request_event_id_time_usec = 2;
inline bool BlinkInfo::has_request_event_id_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlinkInfo::set_has_request_event_id_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlinkInfo::clear_has_request_event_id_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlinkInfo::clear_request_event_id_time_usec() {
  if (request_event_id_time_usec_ != &::google::protobuf::internal::kEmptyString) {
    request_event_id_time_usec_->clear();
  }
  clear_has_request_event_id_time_usec();
}
inline const ::std::string& BlinkInfo::request_event_id_time_usec() const {
  return *request_event_id_time_usec_;
}
inline void BlinkInfo::set_request_event_id_time_usec(const ::std::string& value) {
  set_has_request_event_id_time_usec();
  if (request_event_id_time_usec_ == &::google::protobuf::internal::kEmptyString) {
    request_event_id_time_usec_ = new ::std::string;
  }
  request_event_id_time_usec_->assign(value);
}
inline void BlinkInfo::set_request_event_id_time_usec(const char* value) {
  set_has_request_event_id_time_usec();
  if (request_event_id_time_usec_ == &::google::protobuf::internal::kEmptyString) {
    request_event_id_time_usec_ = new ::std::string;
  }
  request_event_id_time_usec_->assign(value);
}
inline void BlinkInfo::set_request_event_id_time_usec(const char* value, size_t size) {
  set_has_request_event_id_time_usec();
  if (request_event_id_time_usec_ == &::google::protobuf::internal::kEmptyString) {
    request_event_id_time_usec_ = new ::std::string;
  }
  request_event_id_time_usec_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkInfo::mutable_request_event_id_time_usec() {
  set_has_request_event_id_time_usec();
  if (request_event_id_time_usec_ == &::google::protobuf::internal::kEmptyString) {
    request_event_id_time_usec_ = new ::std::string;
  }
  return request_event_id_time_usec_;
}
inline ::std::string* BlinkInfo::release_request_event_id_time_usec() {
  clear_has_request_event_id_time_usec();
  if (request_event_id_time_usec_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_event_id_time_usec_;
    request_event_id_time_usec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool html_match = 3;
inline bool BlinkInfo::has_html_match() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlinkInfo::set_has_html_match() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlinkInfo::clear_has_html_match() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlinkInfo::clear_html_match() {
  html_match_ = false;
  clear_has_html_match();
}
inline bool BlinkInfo::html_match() const {
  return html_match_;
}
inline void BlinkInfo::set_html_match(bool value) {
  set_has_html_match();
  html_match_ = value;
}

// optional .net_instaweb.BlinkInfo.UserAgent blink_user_agent = 4;
inline bool BlinkInfo::has_blink_user_agent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlinkInfo::set_has_blink_user_agent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlinkInfo::clear_has_blink_user_agent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlinkInfo::clear_blink_user_agent() {
  blink_user_agent_ = 0;
  clear_has_blink_user_agent();
}
inline ::net_instaweb::BlinkInfo_UserAgent BlinkInfo::blink_user_agent() const {
  return static_cast< ::net_instaweb::BlinkInfo_UserAgent >(blink_user_agent_);
}
inline void BlinkInfo::set_blink_user_agent(::net_instaweb::BlinkInfo_UserAgent value) {
  GOOGLE_DCHECK(::net_instaweb::BlinkInfo_UserAgent_IsValid(value));
  set_has_blink_user_agent();
  blink_user_agent_ = value;
}

// optional string url = 5;
inline bool BlinkInfo::has_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlinkInfo::set_has_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlinkInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlinkInfo::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BlinkInfo::url() const {
  return *url_;
}
inline void BlinkInfo::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BlinkInfo::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BlinkInfo::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlinkInfo::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BlinkInfo::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool html_smart_diff_match = 6;
inline bool BlinkInfo::has_html_smart_diff_match() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlinkInfo::set_has_html_smart_diff_match() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlinkInfo::clear_has_html_smart_diff_match() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlinkInfo::clear_html_smart_diff_match() {
  html_smart_diff_match_ = false;
  clear_has_html_smart_diff_match();
}
inline bool BlinkInfo::html_smart_diff_match() const {
  return html_smart_diff_match_;
}
inline void BlinkInfo::set_html_smart_diff_match(bool value) {
  set_has_html_smart_diff_match();
  html_smart_diff_match_ = value;
}

// -------------------------------------------------------------------

// MetadataCacheInfo

// optional int32 num_hits = 1;
inline bool MetadataCacheInfo::has_num_hits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetadataCacheInfo::set_has_num_hits() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetadataCacheInfo::clear_has_num_hits() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetadataCacheInfo::clear_num_hits() {
  num_hits_ = 0;
  clear_has_num_hits();
}
inline ::google::protobuf::int32 MetadataCacheInfo::num_hits() const {
  return num_hits_;
}
inline void MetadataCacheInfo::set_num_hits(::google::protobuf::int32 value) {
  set_has_num_hits();
  num_hits_ = value;
}

// optional int32 num_revalidates = 2;
inline bool MetadataCacheInfo::has_num_revalidates() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetadataCacheInfo::set_has_num_revalidates() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetadataCacheInfo::clear_has_num_revalidates() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetadataCacheInfo::clear_num_revalidates() {
  num_revalidates_ = 0;
  clear_has_num_revalidates();
}
inline ::google::protobuf::int32 MetadataCacheInfo::num_revalidates() const {
  return num_revalidates_;
}
inline void MetadataCacheInfo::set_num_revalidates(::google::protobuf::int32 value) {
  set_has_num_revalidates();
  num_revalidates_ = value;
}

// optional int32 num_misses = 3;
inline bool MetadataCacheInfo::has_num_misses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetadataCacheInfo::set_has_num_misses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MetadataCacheInfo::clear_has_num_misses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MetadataCacheInfo::clear_num_misses() {
  num_misses_ = 0;
  clear_has_num_misses();
}
inline ::google::protobuf::int32 MetadataCacheInfo::num_misses() const {
  return num_misses_;
}
inline void MetadataCacheInfo::set_num_misses(::google::protobuf::int32 value) {
  set_has_num_misses();
  num_misses_ = value;
}

// -------------------------------------------------------------------

// SplitHtmlInfo

// optional int64 json_size = 1;
inline bool SplitHtmlInfo::has_json_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitHtmlInfo::set_has_json_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SplitHtmlInfo::clear_has_json_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SplitHtmlInfo::clear_json_size() {
  json_size_ = GOOGLE_LONGLONG(0);
  clear_has_json_size();
}
inline ::google::protobuf::int64 SplitHtmlInfo::json_size() const {
  return json_size_;
}
inline void SplitHtmlInfo::set_json_size(::google::protobuf::int64 value) {
  set_has_json_size();
  json_size_ = value;
}

// -------------------------------------------------------------------

// LoggingInfo

// optional .net_instaweb.TimingInfo timing_info = 1;
inline bool LoggingInfo::has_timing_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoggingInfo::set_has_timing_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoggingInfo::clear_has_timing_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoggingInfo::clear_timing_info() {
  if (timing_info_ != NULL) timing_info_->::net_instaweb::TimingInfo::Clear();
  clear_has_timing_info();
}
inline const ::net_instaweb::TimingInfo& LoggingInfo::timing_info() const {
  return timing_info_ != NULL ? *timing_info_ : *default_instance_->timing_info_;
}
inline ::net_instaweb::TimingInfo* LoggingInfo::mutable_timing_info() {
  set_has_timing_info();
  if (timing_info_ == NULL) timing_info_ = new ::net_instaweb::TimingInfo;
  return timing_info_;
}
inline ::net_instaweb::TimingInfo* LoggingInfo::release_timing_info() {
  clear_has_timing_info();
  ::net_instaweb::TimingInfo* temp = timing_info_;
  timing_info_ = NULL;
  return temp;
}

// optional .net_instaweb.BlinkInfo blink_info = 2;
inline bool LoggingInfo::has_blink_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoggingInfo::set_has_blink_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoggingInfo::clear_has_blink_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoggingInfo::clear_blink_info() {
  if (blink_info_ != NULL) blink_info_->::net_instaweb::BlinkInfo::Clear();
  clear_has_blink_info();
}
inline const ::net_instaweb::BlinkInfo& LoggingInfo::blink_info() const {
  return blink_info_ != NULL ? *blink_info_ : *default_instance_->blink_info_;
}
inline ::net_instaweb::BlinkInfo* LoggingInfo::mutable_blink_info() {
  set_has_blink_info();
  if (blink_info_ == NULL) blink_info_ = new ::net_instaweb::BlinkInfo;
  return blink_info_;
}
inline ::net_instaweb::BlinkInfo* LoggingInfo::release_blink_info() {
  clear_has_blink_info();
  ::net_instaweb::BlinkInfo* temp = blink_info_;
  blink_info_ = NULL;
  return temp;
}

// optional string applied_rewriters = 3;
inline bool LoggingInfo::has_applied_rewriters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoggingInfo::set_has_applied_rewriters() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoggingInfo::clear_has_applied_rewriters() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoggingInfo::clear_applied_rewriters() {
  if (applied_rewriters_ != &::google::protobuf::internal::kEmptyString) {
    applied_rewriters_->clear();
  }
  clear_has_applied_rewriters();
}
inline const ::std::string& LoggingInfo::applied_rewriters() const {
  return *applied_rewriters_;
}
inline void LoggingInfo::set_applied_rewriters(const ::std::string& value) {
  set_has_applied_rewriters();
  if (applied_rewriters_ == &::google::protobuf::internal::kEmptyString) {
    applied_rewriters_ = new ::std::string;
  }
  applied_rewriters_->assign(value);
}
inline void LoggingInfo::set_applied_rewriters(const char* value) {
  set_has_applied_rewriters();
  if (applied_rewriters_ == &::google::protobuf::internal::kEmptyString) {
    applied_rewriters_ = new ::std::string;
  }
  applied_rewriters_->assign(value);
}
inline void LoggingInfo::set_applied_rewriters(const char* value, size_t size) {
  set_has_applied_rewriters();
  if (applied_rewriters_ == &::google::protobuf::internal::kEmptyString) {
    applied_rewriters_ = new ::std::string;
  }
  applied_rewriters_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoggingInfo::mutable_applied_rewriters() {
  set_has_applied_rewriters();
  if (applied_rewriters_ == &::google::protobuf::internal::kEmptyString) {
    applied_rewriters_ = new ::std::string;
  }
  return applied_rewriters_;
}
inline ::std::string* LoggingInfo::release_applied_rewriters() {
  clear_has_applied_rewriters();
  if (applied_rewriters_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = applied_rewriters_;
    applied_rewriters_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .net_instaweb.MetadataCacheInfo metadata_cache_info = 4;
inline bool LoggingInfo::has_metadata_cache_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoggingInfo::set_has_metadata_cache_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoggingInfo::clear_has_metadata_cache_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoggingInfo::clear_metadata_cache_info() {
  if (metadata_cache_info_ != NULL) metadata_cache_info_->::net_instaweb::MetadataCacheInfo::Clear();
  clear_has_metadata_cache_info();
}
inline const ::net_instaweb::MetadataCacheInfo& LoggingInfo::metadata_cache_info() const {
  return metadata_cache_info_ != NULL ? *metadata_cache_info_ : *default_instance_->metadata_cache_info_;
}
inline ::net_instaweb::MetadataCacheInfo* LoggingInfo::mutable_metadata_cache_info() {
  set_has_metadata_cache_info();
  if (metadata_cache_info_ == NULL) metadata_cache_info_ = new ::net_instaweb::MetadataCacheInfo;
  return metadata_cache_info_;
}
inline ::net_instaweb::MetadataCacheInfo* LoggingInfo::release_metadata_cache_info() {
  clear_has_metadata_cache_info();
  ::net_instaweb::MetadataCacheInfo* temp = metadata_cache_info_;
  metadata_cache_info_ = NULL;
  return temp;
}

// optional bool is_original_resource_cacheable = 5 [default = true];
inline bool LoggingInfo::has_is_original_resource_cacheable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoggingInfo::set_has_is_original_resource_cacheable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoggingInfo::clear_has_is_original_resource_cacheable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoggingInfo::clear_is_original_resource_cacheable() {
  is_original_resource_cacheable_ = true;
  clear_has_is_original_resource_cacheable();
}
inline bool LoggingInfo::is_original_resource_cacheable() const {
  return is_original_resource_cacheable_;
}
inline void LoggingInfo::set_is_original_resource_cacheable(bool value) {
  set_has_is_original_resource_cacheable();
  is_original_resource_cacheable_ = value;
}

// optional int32 furious_id = 6;
inline bool LoggingInfo::has_furious_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoggingInfo::set_has_furious_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoggingInfo::clear_has_furious_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoggingInfo::clear_furious_id() {
  furious_id_ = 0;
  clear_has_furious_id();
}
inline ::google::protobuf::int32 LoggingInfo::furious_id() const {
  return furious_id_;
}
inline void LoggingInfo::set_furious_id(::google::protobuf::int32 value) {
  set_has_furious_id();
  furious_id_ = value;
}

// optional .net_instaweb.SplitHtmlInfo split_html_info = 7;
inline bool LoggingInfo::has_split_html_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoggingInfo::set_has_split_html_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoggingInfo::clear_has_split_html_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoggingInfo::clear_split_html_info() {
  if (split_html_info_ != NULL) split_html_info_->::net_instaweb::SplitHtmlInfo::Clear();
  clear_has_split_html_info();
}
inline const ::net_instaweb::SplitHtmlInfo& LoggingInfo::split_html_info() const {
  return split_html_info_ != NULL ? *split_html_info_ : *default_instance_->split_html_info_;
}
inline ::net_instaweb::SplitHtmlInfo* LoggingInfo::mutable_split_html_info() {
  set_has_split_html_info();
  if (split_html_info_ == NULL) split_html_info_ = new ::net_instaweb::SplitHtmlInfo;
  return split_html_info_;
}
inline ::net_instaweb::SplitHtmlInfo* LoggingInfo::release_split_html_info() {
  clear_has_split_html_info();
  ::net_instaweb::SplitHtmlInfo* temp = split_html_info_;
  split_html_info_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2fhttp_2flogging_2eproto__INCLUDED
