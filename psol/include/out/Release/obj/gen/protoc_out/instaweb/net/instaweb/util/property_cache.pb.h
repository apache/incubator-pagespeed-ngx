// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/util/property_cache.proto

#ifndef PROTOBUF_net_2finstaweb_2futil_2fproperty_5fcache_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2futil_2fproperty_5fcache_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2finstaweb_2futil_2fproperty_5fcache_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2futil_2fproperty_5fcache_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2futil_2fproperty_5fcache_2eproto();

class PropertyValueProtobuf;
class PropertyCacheValues;

// ===================================================================

class PropertyValueProtobuf : public ::google::protobuf::MessageLite {
 public:
  PropertyValueProtobuf();
  virtual ~PropertyValueProtobuf();
  
  PropertyValueProtobuf(const PropertyValueProtobuf& from);
  
  inline PropertyValueProtobuf& operator=(const PropertyValueProtobuf& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PropertyValueProtobuf& default_instance();
  
  void Swap(PropertyValueProtobuf* other);
  
  // implements Message ----------------------------------------------
  
  PropertyValueProtobuf* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PropertyValueProtobuf& from);
  void MergeFrom(const PropertyValueProtobuf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bytes body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  
  // optional int64 write_timestamp_ms = 3;
  inline bool has_write_timestamp_ms() const;
  inline void clear_write_timestamp_ms();
  static const int kWriteTimestampMsFieldNumber = 3;
  inline ::google::protobuf::int64 write_timestamp_ms() const;
  inline void set_write_timestamp_ms(::google::protobuf::int64 value);
  
  // optional uint64 update_mask = 4 [default = 0];
  inline bool has_update_mask() const;
  inline void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 4;
  inline ::google::protobuf::uint64 update_mask() const;
  inline void set_update_mask(::google::protobuf::uint64 value);
  
  // optional int64 num_writes = 5 [default = 0];
  inline bool has_num_writes() const;
  inline void clear_num_writes();
  static const int kNumWritesFieldNumber = 5;
  inline ::google::protobuf::int64 num_writes() const;
  inline void set_num_writes(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:net_instaweb.PropertyValueProtobuf)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_write_timestamp_ms();
  inline void clear_has_write_timestamp_ms();
  inline void set_has_update_mask();
  inline void clear_has_update_mask();
  inline void set_has_num_writes();
  inline void clear_has_num_writes();
  
  ::std::string* name_;
  ::std::string* body_;
  ::google::protobuf::int64 write_timestamp_ms_;
  ::google::protobuf::uint64 update_mask_;
  ::google::protobuf::int64 num_writes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2futil_2fproperty_5fcache_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2futil_2fproperty_5fcache_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2futil_2fproperty_5fcache_2eproto();
  
  void InitAsDefaultInstance();
  static PropertyValueProtobuf* default_instance_;
};
// -------------------------------------------------------------------

class PropertyCacheValues : public ::google::protobuf::MessageLite {
 public:
  PropertyCacheValues();
  virtual ~PropertyCacheValues();
  
  PropertyCacheValues(const PropertyCacheValues& from);
  
  inline PropertyCacheValues& operator=(const PropertyCacheValues& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PropertyCacheValues& default_instance();
  
  void Swap(PropertyCacheValues* other);
  
  // implements Message ----------------------------------------------
  
  PropertyCacheValues* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PropertyCacheValues& from);
  void MergeFrom(const PropertyCacheValues& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .net_instaweb.PropertyValueProtobuf value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::net_instaweb::PropertyValueProtobuf& value(int index) const;
  inline ::net_instaweb::PropertyValueProtobuf* mutable_value(int index);
  inline ::net_instaweb::PropertyValueProtobuf* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::PropertyValueProtobuf >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::PropertyValueProtobuf >*
      mutable_value();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.PropertyCacheValues)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::net_instaweb::PropertyValueProtobuf > value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_2finstaweb_2futil_2fproperty_5fcache_2eproto();
  friend void protobuf_AssignDesc_net_2finstaweb_2futil_2fproperty_5fcache_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2futil_2fproperty_5fcache_2eproto();
  
  void InitAsDefaultInstance();
  static PropertyCacheValues* default_instance_;
};
// ===================================================================


// ===================================================================

// PropertyValueProtobuf

// optional string name = 1;
inline bool PropertyValueProtobuf::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyValueProtobuf::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyValueProtobuf::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyValueProtobuf::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PropertyValueProtobuf::name() const {
  return *name_;
}
inline void PropertyValueProtobuf::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PropertyValueProtobuf::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PropertyValueProtobuf::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyValueProtobuf::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PropertyValueProtobuf::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes body = 2;
inline bool PropertyValueProtobuf::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyValueProtobuf::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyValueProtobuf::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyValueProtobuf::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& PropertyValueProtobuf::body() const {
  return *body_;
}
inline void PropertyValueProtobuf::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void PropertyValueProtobuf::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void PropertyValueProtobuf::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyValueProtobuf::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* PropertyValueProtobuf::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 write_timestamp_ms = 3;
inline bool PropertyValueProtobuf::has_write_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropertyValueProtobuf::set_has_write_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropertyValueProtobuf::clear_has_write_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropertyValueProtobuf::clear_write_timestamp_ms() {
  write_timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_write_timestamp_ms();
}
inline ::google::protobuf::int64 PropertyValueProtobuf::write_timestamp_ms() const {
  return write_timestamp_ms_;
}
inline void PropertyValueProtobuf::set_write_timestamp_ms(::google::protobuf::int64 value) {
  set_has_write_timestamp_ms();
  write_timestamp_ms_ = value;
}

// optional uint64 update_mask = 4 [default = 0];
inline bool PropertyValueProtobuf::has_update_mask() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropertyValueProtobuf::set_has_update_mask() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropertyValueProtobuf::clear_has_update_mask() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropertyValueProtobuf::clear_update_mask() {
  update_mask_ = GOOGLE_ULONGLONG(0);
  clear_has_update_mask();
}
inline ::google::protobuf::uint64 PropertyValueProtobuf::update_mask() const {
  return update_mask_;
}
inline void PropertyValueProtobuf::set_update_mask(::google::protobuf::uint64 value) {
  set_has_update_mask();
  update_mask_ = value;
}

// optional int64 num_writes = 5 [default = 0];
inline bool PropertyValueProtobuf::has_num_writes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PropertyValueProtobuf::set_has_num_writes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PropertyValueProtobuf::clear_has_num_writes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PropertyValueProtobuf::clear_num_writes() {
  num_writes_ = GOOGLE_LONGLONG(0);
  clear_has_num_writes();
}
inline ::google::protobuf::int64 PropertyValueProtobuf::num_writes() const {
  return num_writes_;
}
inline void PropertyValueProtobuf::set_num_writes(::google::protobuf::int64 value) {
  set_has_num_writes();
  num_writes_ = value;
}

// -------------------------------------------------------------------

// PropertyCacheValues

// repeated .net_instaweb.PropertyValueProtobuf value = 1;
inline int PropertyCacheValues::value_size() const {
  return value_.size();
}
inline void PropertyCacheValues::clear_value() {
  value_.Clear();
}
inline const ::net_instaweb::PropertyValueProtobuf& PropertyCacheValues::value(int index) const {
  return value_.Get(index);
}
inline ::net_instaweb::PropertyValueProtobuf* PropertyCacheValues::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::net_instaweb::PropertyValueProtobuf* PropertyCacheValues::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::PropertyValueProtobuf >&
PropertyCacheValues::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::PropertyValueProtobuf >*
PropertyCacheValues::mutable_value() {
  return &value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2futil_2fproperty_5fcache_2eproto__INCLUDED
