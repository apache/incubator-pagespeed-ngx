{
# Port map:
# 8080 -- master configuration.
# 8081 -- COVERAGE / PROXY / SLURP
# 8082 -- SLURP
# @@APACHE_SECONDARY_PORT@@ -- secondary configuration (8083 debug, 8084 root)
#
# Note that when system-testing on CentOS installs we need to authorize these
# ports via semanage.  Any new ports should thus be added to the Makefile in
# this directory, target enable_ports_and_file_access.
# We don't enable XHTML in the default pagespeed.conf.  For the
# add_instrumentation xhtml tests to work, though, we have to enable
# it here.  If we change pagespeed.conf.template to enable XHTML by
# default then we can eliminate this line.
##AddOutputFilterByType MOD_PAGESPEED_OUTPUT_FILTER application/xhtml+xml

# This is needed for the server-side includes test in
# apache_system_test.sh.  See mod_pagespeed_test/ssi/.htaccess as well.
##<IfModule !include_module>
##  LoadModule include_module @@APACHE_MODULES@@/mod_include.so
##</IfModule>
##AddType text/html .shtml
##AddOutputFilter INCLUDES .shtml

# For the mod_rewrite test in apache_system_test.sh
##<IfModule !rewrite_module>
##  LoadModule rewrite_module  @@APACHE_MODULES@@/mod_rewrite.so
##</IfModule>

# For the vary: handling test
##<IfModule !headers_module>
##  LoadModule headers_module  @@APACHE_MODULES@@/mod_headers.so
##</IfModule>

# Helps tests that extra headers supplied by the apache conf
# survive single-resource rewrites
#
# http://code.google.com/p/modpagespeed/issues/detail?id=324
##Header append 'X-Extra-Header' '1'

# However we should not allow user-specified cache-control on
# rewritten HTML or resources.  This setting helps us make
# sure that we strip any user-specified cache-control when
# we rewrite HTML.  We test this in apache_system_test.sh.
##Header set Cache-Control "max-age=600"

pagespeed: {
# If X-PSA-Blocking-Rewrite request header is present and its value matches the
# value of ModPagespeedBlockingRewriteKey below, the response will be fully
# rewritten before being flushed to the client.
BlockingRewriteKey: "psatest",
# This will cause an error report in the startup log if mod_pagespeed is not
# built with ssl, but otherwise will cause no trouble.
FetchHttps: "enable,allow_self_signed",

# add_instrumentation must be enabled so that we can test /mod_pagespeed_beacon.
EnableFilters: "add_instrumentation",

# For regression test of connection failing.
Domain: "modpagespeed.com:1023",

# Test LoadFromFile mapping by mapping one dir to another.
LoadFromFile: "http://@@APACHE_DOMAIN@@/mod_pagespeed_test/load_from_file/web_dir/" "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/load_from_file/file_dir/", 
LoadFromFileMatch: "^http://@@APACHE_DOMAIN@@/mod_pagespeed_test/load_from_file_match/web_([^/]*)/" "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/load_from_file/file_\\1/",
LoadFromFileRule: "Disallow \"@@APACHE_DOC_ROOT@@/mod_pagespeed_test/load_from_file/file_dir/httponly/\"",
FromFileRuleMatch: "Disallow \.ssp.css$",
LoadFromFileRuleMatch: "Allow exception\.ssp\.css$",

# Print out detail about connection-refused errors.  We don't negative-test
# this here cause it's a hassle; we just depend on the unit-tests for that.
ListOutstandingUrlsOnError: "on",

AvoidRenamingIntrospectiveJavascript: "off",

# Establish a proxy mapping where the current server proxies an image
# stored on ref.pssdemos.com.  We use ref.pssdemos.com rather than
# modpagespeed.com so that we use a single html file both for:
#   1. a demo of the feature on modpagespeed.com.  It would
#      be confusing to demo a Proxying when the origin was the
#      same as the proxy.
#   2. A system-test of the feature to be run with our usual testing.
MapProxyDomain: "@@APACHE_DOMAIN@@/pss_images http://ref.pssdemos.com/filter/images",

# These will be sent to the origin domain when fetching subresources.
CustomFetchHeader: "header value",
CustomFetchHeader: "x-other False",

InPlaceResourceOptimization: "on",
RespectXForwardedProto: "on",


#STATS_LOGGING Statistics: "on",
#STATS_LOGGING StatisticsLogging: "on",
#STATS_LOGGING StatisticsLoggingFile: "\"@@MOD_PAGESPEED_STATS_LOG@@\"",
#STATS_LOGGING StatisticsLoggingIntervalMs: 10,

#ALL_DIRECTIVES # Invoke all ModPagespeed* directives to make sure they work:
#ALL_DIRECTIVES Allow: "foo",
#ALL_DIRECTIVES AnalyticsID: 1234,
#ALL_DIRECTIVES AvoidRenamingIntrospectiveJavascript: "true",
#ALL_DIRECTIVES BeaconUrl: "\"http://example.com/beacon\"",
#ALL_DIRECTIVES BlockingRewriteKey: "test",
#ALL_DIRECTIVES CacheFlushFilename: "/tmp/cache.flush",
#ALL_DIRECTIVES CacheFlushPollInterevalSec: 10,
#ALL_DIRECTIVES ClientDomainRewrite: "false",
#ALL_DIRECTIVES CollectRefererStatistics: "false",
#ALL_DIRECTIVES CombineAcrossPaths: "true",
#ALL_DIRECTIVES CssFlattenMaxBytes: 2000,
#ALL_DIRECTIVES CssImageInlineMaxBytes: 2000,
#ALL_DIRECTIVES CssInlineMaxBytes: 2000,
#ALL_DIRECTIVES CssOutlineMinBytes: 2000,
#ALL_DIRECTIVES CssPreserveURLs: "off",
#ALL_DIRECTIVES DisableFilters: "strip_scripts",
#ALL_DIRECTIVES Disallow: "bar",
#ALL_DIRECTIVES Domain: "http://example.com",
#ALL_DIRECTIVES DomainRewriteHyperlinks: "true",
#ALL_DIRECTIVES EnableFilters: "extend_cache",
#ALL_DIRECTIVES ExperimentSpec: "\"id=8;percent=10\"",
#ALL_DIRECTIVES ExperimentVariable: 3,
#ALL_DIRECTIVES FetchProxy: "localhost:4321",
#ALL_DIRECTIVES FetchWithGzip: "on",
#ALL_DIRECTIVES FetcherTimeOutMs: 1000,
#ALL_DIRECTIVES FileCacheCleanIntervalMs: 3600000,
#ALL_DIRECTIVES FileCacheInodeLimit: 10000,
#ALL_DIRECTIVES FileCachePath: "/tmp/cache/",
#ALL_DIRECTIVES FileCacheSizeKb: 1000,
#ALL_DIRECTIVES ForbidAllDisabledFilters: true,
#ALL_DIRECTIVES ForbidFilters: "rewrite_images",
#ALL_DIRECTIVES ForceCaching: "off",
#ALL_DIRECTIVES HashRefererStatistics: "false",
#ALL_DIRECTIVES ImageInlineMaxBytes: 2000,
#ALL_DIRECTIVES ImageLimitOptimizedPercent: 80,
#ALL_DIRECTIVES ImageLimitResizeAreaPercent: 80,
#ALL_DIRECTIVES ImageMaxRewritesAtOnce: 5,
#ALL_DIRECTIVES ImageRecompressionQuality: 75,
#ALL_DIRECTIVES ImagePreserveURLs: "false",
#ALL_DIRECTIVES ImageWebpRecompressionQuality: 85,
#ALL_DIRECTIVES ImgInlineMaxBytes: 2000,
#ALL_DIRECTIVES ImgMaxRewritesAtOnce: 5,
#ALL_DIRECTIVES InPlaceResourceOptimization: "on",
#ALL_DIRECTIVES IncreaseSpeedTracking: "true",
#ALL_DIRECTIVES InstallCrashHandler: "off",
#ALL_DIRECTIVES JpegRecompressionQuality: 80,
#ALL_DIRECTIVES JsInlineMaxBytes: 2000,
#ALL_DIRECTIVES JsOutlineMinBytes: 2000,
#ALL_DIRECTIVES JsPreserveURLS: "off",
#ALL_DIRECTIVES LRUCacheByteLimit: 1000,
#ALL_DIRECTIVES LRUCacheKbPerProcess: 1,
#ALL_DIRECTIVES ListOutstandingUrlsOnError: "on",
#ALL_DIRECTIVES LoadFromFile: "http://example.com/ /var/html/example/",
#ALL_DIRECTIVES LoadFromFileMatch: "\"^http://example.com/\" /var/html/example/",
#ALL_DIRECTIVES LoadFromFileRule: "allow /var/html/example/",
#ALL_DIRECTIVES LoadFromFileRuleMatch: "Disallow \.php.css$",
#ALL_DIRECTIVES LogRewriteTiming: "false",
#ALL_DIRECTIVES LowercaseHtmlNames: "true",
## TODO(oschaaf): TYPE in localhost? probably doesn't mattor
#ALL_DIRECTIVES MapOriginDomain: "example.com localhlost",
#ALL_DIRECTIVES MapRewriteDomain: "example.com static.example.com",
#ALL_DIRECTIVES MaxImageSizeLowResolutionBytes: 1000,
#ALL_DIRECTIVES MaxInlinedPreviewImagesIndex: 80,
#ALL_DIRECTIVES MaxSegmentLength: 100,
#ALL_DIRECTIVES MemcachedServers: "localhost:6765",
#ALL_DIRECTIVES MemcachedThreads: 1,
#ALL_DIRECTIVES MessageBufferSize: 100,
#ALL_DIRECTIVES MinImageSizeLowResolutionBytes: 2000,
#ALL_DIRECTIVES ModifyCachingHeaders: "true",
#ALL_DIRECTIVES NumExpensiveRewriteThreads: 2,
#ALL_DIRECTIVES NumRewriteThreads: 4,
#ALL_DIRECTIVES RateLimitBackgroundFetches: "true",
#ALL_DIRECTIVES RefererStatisticsOutputLevel: "simple",
#ALL_DIRECTIVES ReportUnloadTime: "true",
#ALL_DIRECTIVES RespectVary: "true",
#ALL_DIRECTIVES RespectXForwardedProto: "off",
#ALL_DIRECTIVES RetainComment: "\"special\"",
#ALL_DIRECTIVES RewriteDeadlinePerFlushMs: 10,
#ALL_DIRECTIVES RewriteLevel: "CoreFilters",
#ALL_DIRECTIVES RunExperiment: "true",
#ALL_DIRECTIVES ShardDomain: "example.com 1.example.com,2.example.com",
#ALL_DIRECTIVES SharedMemoryLocks: "true",
#ALL_DIRECTIVES SlurpDirectory: "/tmp/slurp/",
#ALL_DIRECTIVES SlurpFlushLimit: 5,
#ALL_DIRECTIVES SlurpReadOnly: "true",
#ALL_DIRECTIVES Statistics: "true",
#ALL_DIRECTIVES StatisticsLogging: "true",
#ALL_DIRECTIVES StatisticsLoggingChartsCSS: "\"example.com/css.css\"",
#ALL_DIRECTIVES StatisticsLoggingChartsJS: "\"example.com/js.js\"",
#ALL_DIRECTIVES StatisticsLoggingFile: "\"@@MOD_PAGESPEED_STATS_LOG@@\"",
#ALL_DIRECTIVES StatisticsLoggingIntervalMs: 3000,
#ALL_DIRECTIVES SupportNoScriptEnabled: "true",
#ALL_DIRECTIVES TestProxy: "off",
#ALL_DIRECTIVES UrlValuedAttribute: "span src Hyperlink",
#ALL_DIRECTIVES UsePerVHostStatistics: "on",
#ALL_DIRECTIVES XHeaderValue: "\"test\"",

#PER_VHOST_STATS UsePerVHostStatistics: "on",

# Do testing using memcached in lieu of the file cache.
#MEMCACHED MemcachedServers: "localhost:6765",

# When testing memcached in system tests, let's make sure we are really
# hitting it and not servicing the lookups in-memory.  Note that we will
# cover having a non-zero lru-cache with  memcached in load tests.
#MEMCACHED LRUCacheKbPerProcess: 0,
#GZIP FetchWithGzip: "on",
#PER_VHOST_STATS # Make sure we behave OK with this on, too.
#PER_VHOST_STATS FetchWithGzip: "on",
}, #pagespeed:

# Test coverage for <ModPagespeedIf>
pagespeed_if:{
    spdy: {
        # A setting one might want...
  	DisableFilters: "combine_css",
  	# Settings that doesn't make much sense, but which we want for tests.
  	DisableFilters: "rewrite_css",
 	DisableFilters: "extend_cache",
  	DisableFilters: "rewrite_images",
    },
    "!spdy": { 
      ShardDomain: "nonspdy.example.com s1.example.com,s2.example.com",
    },
}, #pagespeed_if
directories: [
    {
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/max_html_parse_size",
	pagespeed: { 
            MaxHtmlParseBytes: 5000,
        }
    },
    {
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/https_fetch",
	pagespeed: { 
            Domain: "https://modpagespeed.com",
            MapProxyDomain: "http://@@APACHE_DOMAIN@@/modpagespeed_dot_com https://modpagespeed.com/do_not_modify",
        }
    },
    # These caching headers are set up for the document root, and
    # also serve as a demonstration of good values to set for the entire
    # site, if it is to be optimized by mod_pagespeed.
    {
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_example",
##  <IfModule headers_module>
##    # To enable to show that mod_pagespeed to rewrites web pages, we must
##    # turn off Etags for HTML files and eliminate caching altogether.
##    # mod_pagespeed should rewrite HTML files each time they are served.
##    # The first time mod_pagespeed sees an HTML file, it may not optimize
##    # it fully.  It will optimize better after the second view.  Caching
##    # defeats this behavior.
##    <FilesMatch "\.(html|htm)$">
##      Header unset Etag
##      Header set Cache-control "max-age=0, no-cache"
##    </FilesMatch>

##    # Images, styles, and javascript are all cache-extended for
##    # a year by rewriting URLs to include a content hash.  mod_pagespeed
##    # can only do this if the resources are cacheable in the first place.
##    # The origin caching policy, set here to 10 minutes, dictates how
##    # frequently mod_pagespeed must re-read the content files and recompute
##    # the content-hash.  As long as the content doesn't actually change,
##    # the content-hash will remain the same, and the resources stored
##    # in browser caches will stay relevant.
##    <FilesMatch "\.(jpg|jpeg|gif|png|js|css)$">
##      Header unset Etag
##      Header set Cache-control "public, max-age=600"
##    </FilesMatch>
##  </IfModule>
        
    },
    {
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/shard",
        pagespeed: {
	    ShardDomain: "\"@@APACHE_DOMAIN@@\" shard1,shard2,",
	    RewriteLevel: "PassThrough",
	    EnableFilters: "extend_cache",
        }
    },
    { 
        path: "@@APACHE_DOC_ROOT@@/",
##    # This is enabled to make sure we don't crash mod_negotiation.
##    Options +MultiViews

    },
# Enable htaccess
    { 
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_example/",
##    	AllowOverride All
    },
    {
	path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/",
##    	AllowOverride All
##    	# Some versions of mod_rewrite will refuse to do any work if
##    	# symlink handling is off.
##    	Options +SymLinksIfOwnerMatch
    },
    {
	path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/close_connection/",
##  	AllowOverride All
    	#Helps tests whether we successfully strip Connection:close
    	# results from the origin.
##    	Options +SymLinksIfOwnerMatch
##    	Header append 'Connection' 'close'
    },
    {
	path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/compressed/",
##    # Files in this directory are already compressed so always add
##    # the right header.
##    Header set Cache-control "max-age=600"
##    Header append 'Content-Encoding' 'gzip'
##    AddType text/javascript .custom_ext
	
    },
    {
	path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/no_cache/",
##    # Files in this directory should be served uncacheable.
##    Header set Cache-control "no-cache"

    },
    # Set jpeg Quality
    {
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/jpeg_rewriting/",
	pagespeed: {
	    JpegRecompressionQuality: 70,
	}
    },
    # Set Generic Image Quality
    {
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/webp_rewriting",
	pagespeed: {
	    ImageRecompressionQuality: 75,
	}
    },
    # Set Webp Quality
    {
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/image_rewriting",
	pagespeed: {
	    ImageWebpRecompressionQuality: 65, 
	}
    },
    # This Directory does not even exist, but by setting some options in that
    # scope we test to make sure the options we claim are really settable in
    # .htaccess.  Note that <Directory> and .htaccess are enforced the same way.
    {
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/htaccess_test",
	pagespeed: {
##	    ModPagespeed: "on",
  	    Allow: "*",
  	    voidRenamingIntrospectiveJavascript: "on",
  	    BeaconUrl: "foo",
  	    CombineAcrossPaths: "off",
 	    CssFlattenMaxBytes: 100,
 	    CssImageInlineMaxBytes: 100,
	    CssInlineMaxBytes: 100,
  	    CssOutlineMinBytes: 10000,
  	    DisableFilters: "rewrite_images",
  	    Disallow: "*bad*",
  	    Domain: "example.com",
  	    EnableFilters: "extend_cache",
  	    ImageInlineMaxBytes: 100,
  	    ImageLimitOptimizedPercent: 50,
 	    ImageLimitResizeAreaPercent: 50,
  	    JpegRecompressionQuality: 85,
  	    JsInlineMaxBytes: 100,
  	    JsOutlineMinBytes: 10000,
  	    LowercaseHtmlNames: "on",
  	    MapOriginDomain: "localhost example.com",
  	    MapRewriteDomain: "cdn.com example.com",
 	    MaxHtmlParseBytes: 100000,
  	    MaxInlinedPreviewImagesIndex: 10,
  	    MinImageSizeLowResolutionBytes: 100,
  	    ModifyCachingHeaders: "off",
  	    RetainComment: "*ad_tag*",
  	    RewriteLevel: "PassThrough",
        }
    },
    {
        path: "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/forbid_all_disabled/disabled",
	pagespeed: { 
   	    # Prevent the enabling of these filters for files in this directory
    	    # -and- all subdirectories (they can't override it, deliberately).
    	    ForbidAllDisabledFilters: "true",
    	    DisableFilters: ["remove_quotes,remove_comments","collapse_whitespace"],
    	    # Enable this, which was disabled in ../.htaccess, to test that we can
	    # enable something already disabled at the same time as we forbid all.
    	    EnableFilters: "inline_css",
	}
    },
], #directories
locations: [
    {
        path: "/mod_pagespeed_log_request_headers.js",
  	##SetHandler mod_pagespeed_log_request_headers
    },
    {
        wildcard_path: "/mod_pagespeed_test/response_headers.html*",
## TODO: retain regex location
##<Location ~ "/mod_pagespeed_test/response_headers.html*">
##  SetHandler mod_pagespeed_response_options_handler
##</Location>

    },

#PER_VHOST_STATS    {
#PER_VHOST_STATS        path: "/mod_pagespeed_global_statistics",
#PER_VHOST_STATS    ## Order allow,deny
#PER_VHOST_STATS    ## Allow from localhost
#PER_VHOST_STATS    ## Allow from 127.0.0.1
#PER_VHOST_STATS    ## SetHandler mod_pagespeed_global_statistics
#PER_VHOST_STATS    }
], #locations

#SPELING # Enable mod_speling to ensure that we don't regress Issue 194
#SPELING <IfModule !speling_module>
#SPELING   LoadModule speling_module  @@APACHE_MODULES@@/mod_speling.so
#SPELING </IfModule>
#SPELING CheckSpelling on

#GZIP SetOutputFilter DEFLATE

#STRESS # These lines are only needed for the stress test.
#STRESS <Directory "@@APACHE_DOC_ROOT@@/mod_pagespeed_example/cgi" >
#STRESS   Options +ExecCGI
#STRESS </Directory>
#STRESS AddHandler cgi-script .cgi
#STRESS <IfVersion >= 2.4.2>
#STRESS   <IfModule !slotmem_shm_module>
#STRESS     LoadModule slotmem_shm_module @@APACHE_MODULES@@/mod_slotmem_shm.so
#STRESS   </IfModule>
#STRESS </IfVersion>

# Globally set the message-buffer size during load-tests.
#
# TODO(jmarantz): add a test-path where we set this in a VirtualHost and
# make sure the right error message comes out.
#COVERAGE # Don't want global slurp inheriting into :8080
#COVERAGE ModPagespeedInheritVHostConfig off
#COVERAGE ModPagespeedMessageBufferSize 100000
#COVERAGE
#COVERAGE # We want backtraces to be dumped during the load test, as
#COVERAGE # one of its purposes is to discover crash bugs.
#COVERAGE ModPagespeedInstallCrashHandler on
#COVERAGE
#COVERAGE # These lines are used for large-scale code coverage testing.
#COVERAGE # We use 2 servers for it, one doing rewriting and fetching
#COVERAGE # from the other one, which plays back slurps
#COVERAGE Listen 8081
#COVERAGE <VirtualHost *:8080>
#COVERAGE   pagespeed: "on",
#COVERAGE   # Proxy using SERF
#COVERAGE   ModPagespeedTestProxy on
#COVERAGE   ModPagespeedFetchProxy "127.0.0.1:8081"
#COVERAGE
#MEMCACHE_COVERAGE   ModPagespeedMemcachedServers localhost:6765
#COVERAGE   ModPagespeedFileCachePath            "@@MOD_PAGESPEED_CACHE@@/"
#COVERAGE   ModPagespeedRewriteLevel AllFilters
#COVERAGE   ModPagespeedEnableFilters elide_attributes
#COVERAGE   ModPagespeedDomain *
#COVERAGE   ModPagespeedFileCacheSizeKb          102400
#COVERAGE   ModPagespeedFileCacheCleanIntervalMs 3600000
#COVERAGE   ModPagespeedLRUCacheKbPerProcess     1024
#COVERAGE   ModPagespeedLRUCacheByteLimit        16384
#COVERAGE   ModPagespeedCssFlattenMaxBytes       2048
#COVERAGE   ModPagespeedCssInlineMaxBytes        2048
#COVERAGE   ModPagespeedCssImageInlineMaxBytes   2048
#COVERAGE   ModPagespeedImageInlineMaxBytes      2048
#COVERAGE   ModPagespeedJsInlineMaxBytes         2048
#COVERAGE   ModPagespeedCssOutlineMinBytes       3000
#COVERAGE   ModPagespeedJsOutlineMinBytes        3000
#COVERAGE   ModPagespeedImageMaxRewritesAtOnce      8
#COVERAGE   ModPagespeedSlurpFlushLimit          8192
#COVERAGE   ModPagespeedJpegRecompressionQuality   -1
#COVERAGE   ModPagespeedImageLimitOptimizedPercent  100
#COVERAGE   ModPagespeedImageLimitResizeAreaPercent 100
#COVERAGE   <Location /mod_pagespeed_beacon>
#COVERAGE       SetHandler mod_pagespeed_beacon
#COVERAGE   </Location>
#COVERAGE   <Location /mod_pagespeed_statistics>
#COVERAGE       Order allow,deny
#COVERAGE       Allow from localhost
#COVERAGE       SetHandler mod_pagespeed_statistics
#COVERAGE   </Location>
#COVERAGE    <Location /mod_pagespeed_message>
#COVERAGE        Allow from localhost
#COVERAGE        Allow from 127.0.0.1
#COVERAGE        SetHandler mod_pagespeed_message
#COVERAGE    </Location>
#COVERAGE </VirtualHost>
#COVERAGE
#COVERAGE <VirtualHost *:8081>
#COVERAGE   pagespeed_status: "on",
#COVERAGE
#COVERAGE   ModPagespeedFileCachePath            "@@MOD_PAGESPEED_CACHE@@-alt/"
#COVERAGE   ModPagespeedRewriteLevel PassThrough
#COVERAGE
#COVERAGE   # ModPagespeedSlurpDirectory ...
#COVERAGE   # ModPagespeedSlurpReadOnly on
#COVERAGE
#COVERAGE   <Location /mod_pagespeed_message>
#COVERAGE        Allow from localhost
#COVERAGE        Allow from 127.0.0.1
#COVERAGE        SetHandler mod_pagespeed_message
#COVERAGE   </Location>
#COVERAGE </VirtualHost>


#PROXY # This is used for ProxyPass testing.
#PROXY #   See: http://code.google.com/p/modpagespeed/issues/detail?id=74
#PROXY # We use 2 servers for it, one doing rewriting and fetching
#PROXY # from the other one which does not have mod_pagespeed enabled.
#PROXY Listen 8081
#PROXY <VirtualHost *:8080>
#PROXY   # Host at 8080 should have no relevant content.
#PROXY   DocumentRoot  /tmp/
#PROXY
#PROXY   # Turn these declarations back on during testing if you are
#PROXY   # having trouble distinguishing which server is saying what.
#PROXY   #ErrorLog   "@@MOD_PAGESPEED_CACHE@@/logs/error_log"
#PROXY   #CustomLog  "@@MOD_PAGESPEED_CACHE@@/logs/access_log" common
#PROXY
#PROXY   pagespeed_status: "on",
#PROXY
#PROXY   ModPagespeedFileCachePath         "@@MOD_PAGESPEED_CACHE@@/"
#PROXY
#PROXY   ModPagespeedRewriteLevel PassThrough
#PROXY   ModPagespeedEnableFilters extend_cache
#PROXY   ModPagespeedDomain *
#PROXY
#PROXY   # Proxy through to 8081.
#PROXY   ProxyPass / http://localhost:8081/
#PROXY </VirtualHost>
#PROXY
#PROXY <VirtualHost *:8081>
#PROXY   # Host at 8081 sees into mod_pagespeed_examples directory.
#PROXY   DocumentRoot  "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/"
#PROXY
#PROXY   #ErrorLog   "@@MOD_PAGESPEED_CACHE@@-alt/logs/error_log"
#PROXY   #CustomLog  "@@MOD_PAGESPEED_CACHE@@-alt/logs/access_log" common
#PROXY
#PROXY   pagespeed_status: "off",
#PROXY   ModPagespeedFileCachePath        "@@MOD_PAGESPEED_CACHE@@-alt/"
#PROXY   ModPagespeedRewriteLevel PassThrough
#PROXY </VirtualHost>

#SLURP # This is used for Slurp testing.  The initial slurp testing
#SLURP # uses a slurp test dir pre-populated from source control,
#SLURP # via a read-only slurp setup on port 8080.  We also test slurp
#SLURP # writing via an origin server on port 8081, and a slurp server
#SLURP # on 8082 with slurping read-only off.
#SLURP Listen 8081
#SLURP Listen 8082
#SLURP <VirtualHost *:8080>
#SLURP   ModPagespeedFileCachePath        "@@MOD_PAGESPEED_CACHE@@/"
#SLURP   ModPagespeedSlurpDirectory "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/slurp"
#SLURP   ModPagespeedSlurpReadOnly on
#SLURP </VirtualHost>
#SLURP <VirtualHost *:8081>
#SLURP   # Host at 8081 sees into mod_pagespeed_examples directory.
#SLURP   DocumentRoot  "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/"
#SLURP
#SLURP   pagespeed_status: "off",
#SLURP   ModPagespeedFileCachePath        "@@MOD_PAGESPEED_CACHE@@-alt/"
#SLURP   ModPagespeedRewriteLevel PassThrough
#SLURP </VirtualHost>
#SLURP <VirtualHost *:8082>
#SLURP   ModPagespeedFileCachePath        "@@MOD_PAGESPEED_CACHE@@-alt2/"
#SLURP   ModPagespeedSlurpDirectory @@TMP_SLURP_DIR@@
#SLURP   ModPagespeedSlurpReadOnly off
#SLURP   ModPagespeedDomain *
#SLURP   ModPagespeedMaxHtmlParseBytes 1000000
#SLURP   ModPagespeedSlurpFlushLimit     10000
#SLURP </VirtualHost>

#SHARED_MEM_LOCKS ModPagespeedSharedMemoryLocks on

#HTTPS # This is used for testing https requests.
#HTTPS <IfVersion >= 2.4>
#HTTPS   <IfModule !socache_shmcb_module>
#HTTPS     LoadModule socache_shmcb_module @@APACHE_MODULES@@/mod_socache_shmcb.so
#HTTPS   </IfModule>
#HTTPS   <IfModule !slotmem_shm_module>
#HTTPS     LoadModule slotmem_shm_module @@APACHE_MODULES@@/mod_slotmem_shm.so
#HTTPS   </IfModule>
#HTTPS </IfVersion>

#HTTPS Include conf/extra/httpd-ssl.conf
#HTTPS <IfModule !ssl_module>
#HTTPS   LoadModule ssl_module @@APACHE_MODULES@@/mod_ssl.so
#HTTPS </IfModule>
#HTTPS SSLRandomSeed startup builtin
#HTTPS SSLRandomSeed connect builtin
#HTTPS ModPagespeedMapOriginDomain http://@@APACHE_DOMAIN@@ https://@@APACHE_HTTPS_DOMAIN@@

#FURIOUS_GA # This is used for testing the Furious experiment framework.
#FURIOUS_GA ModPagespeedRunExperiment on
#FURIOUS_GA ModPagespeedAnalyticsID "123-45-6734"
#FURIOUS_GA ModPagespeedExperimentVariable 2
#FURIOUS_GA ModPagespeedExperimentSpec "id=7;enable=recompress_images;disable=convert_jpeg_to_progressive;percent=50"
#FURIOUS_GA ModPagespeedExperimentSpec "id=2;enable=recompress_images;percent=50"

#FURIOUS_NO_GA # This is used for testing the Furious experiment framework still
#FURIOUS_NO_GA # works when no analytics ID is specified.  It should assign
#FURIOUS_NO_GA # users to experiments and use appropriate experimental options,
#FURIOUS_NO_GA # but not report back to Google Analytics.  The instrumentation
#FURIOUS_NO_GA # beacon, however, will still contain the experiment id.
#FURIOUS_NO_GA ModPagespeedRunExperiment on
#FURIOUS_NO_GA ModPagespeedExperimentVariable 2
#FURIOUS_NO_GA ModPagespeedExperimentSpec "id=7;enable=recompress_images;disable=convert_jpeg_to_progressive;percent=50"
#FURIOUS_NO_GA ModPagespeedExperimentSpec "id=2;enable=recompress_images;percent=50"

## Another VirtualHost can be enabled by default as it does no harm.  This can
## be used for testing alternate configuration settings in system tests without
## restarting Apache.
##
## We use NameVirtualHost so we can have multiple VirtualHost
## configurations sharing the same port.  Note that the port is
## different depending on whether we are running system tests as root
## or as a normal user.  Note that fetches must be done with
##    http_proxy=SECONDARY_HOST:SECONDARY_PORT.


listen: [
    @@APACHE_SECONDARY_PORT@@,
],
name_virtual_hosts: [
    {
        address: "localhost",
        port: @@APACHE_SECONDARY_PORT@@
    }
],
servers: [ 
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "secondary.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed_status: "on",
    	pagespeed: { 
	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/_secondary/\"",
	    MapProxyDomain: "secondary.example.com/pss_images http://ref.pssdemos.com/filter/images",
  	    # This is the same memcached instance as the root configuration,
  	    # but with a different file-cache path.
#MEMCACHED  MemcachedServers: "localhost:6765",

  	    CacheFlushFilename: "cache.flush",
  	    # If you uncomment this, the test will fail, proving we can disable
  	    # cache-flush polling.
  	    # CacheFlushPollIntervalSec: 0,

  	    # Helps testing whether the configuration of reporting 'unload' time works.
  	    ReportUnloadTime: "on",

#REWRITE   # These lines are only needed for the mod_rewrite test, where
#REWRITE   # we are just trying to prove that we remove mod_rewrite from
#REWRITE   # the request if the URL is going to be handled by mod_pagespeed.
#REWRITE   # In the root install test, this mod_rewrite seems to only take
#REWRITE   # effect in a vhost.  I haven't explored why that is because it
#REWRITE   # doesn't affect the point of the test.
##REWRITE   Options +Indexes
##REWRITE   RewriteEngine on
##REWRITE   RewriteRule (.*).jpg.pagespeed.(.*).jpg /broken.jpg
##REWRITE   RewriteRule mod_pagespeed_statistics /broken
##REWRITE   RewriteRule shortcut.html /mod_pagespeed_example/index.html
    	},#pagespeed
    },#server
    # Sets up a logical home-page server on www.example.com
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "www.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
  	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/\"",
  	    LoadFromFile: "http://cdn.example.com @@APACHE_DOC_ROOT@@",
  	    MapRewriteDomain: "cdn.example.com origin.example.com",
  	    RewriteLevel: "PassThrough",
  	    EnableFilters: "rewrite_css,rewrite_images",
        }
    },
    # Sets up a logical origin for CDNs to fetch content from, on origin.example.com.
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "origin.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
  	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/\"",
  	    LoadFromFile: "http://cdn.example.com @@APACHE_DOC_ROOT@@",
  	    MapRewriteDomain: "cdn.example.com origin.example.com",
  	    RewriteLevel: "PassThrough",
  	    EnableFilters: "rewrite_css,rewrite_images",
        }
    },
    # Sets up a logical cdn, which is where we tell browsers to fetch resources from.
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "cdn.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
  	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/\"",
  	    LoadFromFile: "http://cdn.example.com @@APACHE_DOC_ROOT@@",
  	    MapRewriteDomain: "cdn.example.com origin.example.com",
  	    RewriteLevel: "PassThrough",
  	    EnableFilters: "rewrite_css,rewrite_images",
        }
    },
    # Sets up a virtual host where we can specify forbidden filters without
    # affecting any other hosts.
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "forbidden.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
  	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/\"",
  	    # Start with all core filters enabled ...
  	    RewriteLevel: "CoreFilters",
  	    # ... then forbid these filters ...
  	    ForbidFilters: ["remove_quotes,remove_comments,collapse_whitespace",
  	    		   "rewrite_css,resize_images"],
  	    # ... and disable but not forbid this one (to ensure we retain its URL).
  	    DisableFilters: "inline_css",
        }
    },
    # Sets up a logical home-page server on
    # max_cacheable_content_length.example.com.  This server is only used to test
    # MaxCacheableContentLength, i.e.,
    # max_cacheable_response_content_length.
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "max_cacheable_content_length.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
  	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/\"",
  	    RewriteLevel: "PassThrough",
	    EnableFilters: "rewrite_javascript",
  	    MaxCacheableContentLength: 85,
        }
    },
    # Set the value of the X-Mod-Pagespeed header
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "xheader.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
	    XHeaderValue: "\"UNSPECIFIED VERSION\""
        }
    },
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "domain_hyperlinks_on.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
  	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/\"",
  	    DomainRewriteHyperlinks: "on",
  	    MapRewriteDomain: "http://dst.example.com http://src.example.com",
  	    EnableFilters: "rewrite_domains",
        }
    },
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "domain_hyperlinks_off.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
  	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/\"",
  	    DomainRewriteHyperlinks: "off",
  	    MapRewriteDomain: "http://dst.example.com http://src.example.com",
  	    EnableFilters: "rewrite_domains",
        }
    },
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "client_domain_rewrite.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
  	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/\"",
 	    MapRewriteDomain: "http://client_domain_rewrite.example.com http://@@APACHE_DOMAIN@@",
  	    ClientDomainRewrite: "true",
  	    EnableFilters: "rewrite_domains",
        }
    },
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "url_attribute.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
## TODO(oschaaf): urlvaluedattribute order->ask significance
  	    # This is used for testing dynamically defined url-valued
  	    # attributes
  	    UrlValuedAttribute: ["span src Hyperlink",
  	    			 "hr imgsrc Image",
				 "custom a Image",
				 "custom b otherResource",
				 "custom c hyperlink"],
  	    DomainRewriteHyperlinks: "on",
	    MapRewriteDomain: "http://dst.example.com http://src.example.com",
  	    EnableFilters: "rewrite_domains",
        }
    },
    {
        address: "localhost",
    	port: @@APACHE_SECONDARY_PORT@@,
    	server_name: "absolute_urls.example.com",
    	root: "@@APACHE_DOC_ROOT@@",
	pagespeed: {  
  	    FileCachePath: "\"@@MOD_PAGESPEED_CACHE@@/\"",
	      # This is used for testing that we don't load resources from
  	      # absolute urls during resource reconstruction unless they're for
  	      # our own hostname.  While ModPagespeedDomain should no longer
  	      # have an effect on whether we load absolute urls, we need to
  	      # include it to be sure we're failing because of the code under
  	      # test and not because the domain lawyer is rejecting it.
  	      Domain: "http://example.com",
        }
    },
] #servers
} #configuration